{"ast":null,"code":"import { computed, unref } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { SortOrder, oppositeOrderMap } from '../constants.mjs';\nimport { placeholderSign } from '../private.mjs';\nimport { calcColumnStyle } from './utils.mjs';\nimport { isObject } from '@vue/shared';\n\nfunction useColumns(props, columns, fixed) {\n  const visibleColumns = computed(() => {\n    return unref(columns).filter(column => !column.hidden);\n  });\n  const fixedColumnsOnLeft = computed(() => unref(visibleColumns).filter(column => column.fixed === \"left\" || column.fixed === true));\n  const fixedColumnsOnRight = computed(() => unref(visibleColumns).filter(column => column.fixed === \"right\"));\n  const normalColumns = computed(() => unref(visibleColumns).filter(column => !column.fixed));\n  const mainColumns = computed(() => {\n    const ret = [];\n    unref(fixedColumnsOnLeft).forEach(column => {\n      ret.push({ ...column,\n        placeholderSign\n      });\n    });\n    unref(normalColumns).forEach(column => {\n      ret.push(column);\n    });\n    unref(fixedColumnsOnRight).forEach(column => {\n      ret.push({ ...column,\n        placeholderSign\n      });\n    });\n    return ret;\n  });\n  const hasFixedColumns = computed(() => {\n    return unref(fixedColumnsOnLeft).length || unref(fixedColumnsOnRight).length;\n  });\n  const columnsStyles = computed(() => {\n    const _columns = unref(columns);\n\n    return _columns.reduce((style, column) => {\n      style[column.key] = calcColumnStyle(column, unref(fixed), props.fixed);\n      return style;\n    }, {});\n  });\n  const columnsTotalWidth = computed(() => {\n    return unref(visibleColumns).reduce((width, column) => width + column.width, 0);\n  });\n\n  const getColumn = key => {\n    return unref(columns).find(column => column.key === key);\n  };\n\n  const getColumnStyle = key => {\n    return unref(columnsStyles)[key];\n  };\n\n  const updateColumnWidth = (column, width) => {\n    column.width = width;\n  };\n\n  function onColumnSorted(e) {\n    var _a;\n\n    const {\n      key\n    } = e.currentTarget.dataset;\n    if (!key) return;\n    const {\n      sortState,\n      sortBy\n    } = props;\n    let order = SortOrder.ASC;\n\n    if (isObject(sortState)) {\n      order = oppositeOrderMap[sortState[key]];\n    } else {\n      order = oppositeOrderMap[sortBy.order];\n    }\n\n    (_a = props.onColumnSort) == null ? void 0 : _a.call(props, {\n      column: getColumn(key),\n      key,\n      order\n    });\n  }\n\n  return {\n    columns,\n    columnsStyles,\n    columnsTotalWidth,\n    fixedColumnsOnLeft,\n    fixedColumnsOnRight,\n    hasFixedColumns,\n    mainColumns,\n    normalColumns,\n    visibleColumns,\n    getColumn,\n    getColumnStyle,\n    updateColumnWidth,\n    onColumnSorted\n  };\n}\n\nexport { useColumns };","map":{"version":3,"mappings":";;;;;;;AAKA,SAASA,UAAT,CAAoBC,KAApB,EAA2BC,OAA3B,EAAoCC,KAApC,EAA2C;EACzC,MAAMC,cAAc,GAAGC,QAAQ,CAAC,MAAM;IACpC,OAAOC,KAAK,CAACJ,OAAD,CAAL,CAAeK,MAAf,CAAuBC,MAAD,IAAY,CAACA,MAAM,CAACC,MAA1C,CAAP;EACD,CAF8B,CAA/B;EAGA,MAAMC,kBAAkB,GAAGL,QAAQ,CAAC,MAAMC,KAAK,CAACF,cAAD,CAAL,CAAsBG,MAAtB,CAA8BC,MAAD,IAAYA,MAAM,CAACL,KAAP,KAAiB,MAAjB,IAA2BK,MAAM,CAACL,KAAP,KAAiB,IAArF,CAAP,CAAnC;EACA,MAAMQ,mBAAmB,GAAGN,QAAQ,CAAC,MAAMC,KAAK,CAACF,cAAD,CAAL,CAAsBG,MAAtB,CAA8BC,MAAD,IAAYA,MAAM,CAACL,KAAP,KAAiB,OAA1D,CAAP,CAApC;EACA,MAAMS,aAAa,GAAGP,QAAQ,CAAC,MAAMC,KAAK,CAACF,cAAD,CAAL,CAAsBG,MAAtB,CAA8BC,MAAD,IAAY,CAACA,MAAM,CAACL,KAAjD,CAAP,CAA9B;EACA,MAAMU,WAAW,GAAGR,QAAQ,CAAC,MAAM;IACjC,MAAMS,GAAG,GAAG,EAAZ;IACAR,KAAK,CAACI,kBAAD,CAAL,CAA0BK,OAA1B,CAAmCP,MAAD,IAAY;MAC5CM,GAAG,CAACE,IAAJ,CAAS,EACP,GAAGR,MADI;QAEPS;MAFO,CAAT;IAID,CALD;IAMAX,KAAK,CAACM,aAAD,CAAL,CAAqBG,OAArB,CAA8BP,MAAD,IAAY;MACvCM,GAAG,CAACE,IAAJ,CAASR,MAAT;IACD,CAFD;IAGAF,KAAK,CAACK,mBAAD,CAAL,CAA2BI,OAA3B,CAAoCP,MAAD,IAAY;MAC7CM,GAAG,CAACE,IAAJ,CAAS,EACP,GAAGR,MADI;QAEPS;MAFO,CAAT;IAID,CALD;IAMA,OAAOH,GAAP;EACD,CAlB2B,CAA5B;EAmBA,MAAMI,eAAe,GAAGb,QAAQ,CAAC,MAAM;IACrC,OAAOC,KAAK,CAACI,kBAAD,CAAL,CAA0BS,MAA1B,IAAoCb,KAAK,CAACK,mBAAD,CAAL,CAA2BQ,MAAtE;EACD,CAF+B,CAAhC;EAGA,MAAMC,aAAa,GAAGf,QAAQ,CAAC,MAAM;IACnC,MAAMgB,QAAQ,GAAGf,KAAK,CAACJ,OAAD,CAAtB;;IACA,OAAOmB,QAAQ,CAACC,MAAT,CAAgB,CAACC,KAAD,EAAQf,MAAR,KAAmB;MACxCe,KAAK,CAACf,MAAM,CAACgB,GAAR,CAAL,GAAoBC,eAAe,CAACjB,MAAD,EAASF,KAAK,CAACH,KAAD,CAAd,EAAuBF,KAAK,CAACE,KAA7B,CAAnC;MACA,OAAOoB,KAAP;IACD,CAHM,EAGJ,EAHI,CAAP;EAID,CAN6B,CAA9B;EAOA,MAAMG,iBAAiB,GAAGrB,QAAQ,CAAC,MAAM;IACvC,OAAOC,KAAK,CAACF,cAAD,CAAL,CAAsBkB,MAAtB,CAA6B,CAACK,KAAD,EAAQnB,MAAR,KAAmBmB,KAAK,GAAGnB,MAAM,CAACmB,KAA/D,EAAsE,CAAtE,CAAP;EACD,CAFiC,CAAlC;;EAGA,MAAMC,SAAS,GAAIJ,GAAD,IAAS;IACzB,OAAOlB,KAAK,CAACJ,OAAD,CAAL,CAAe2B,IAAf,CAAqBrB,MAAD,IAAYA,MAAM,CAACgB,GAAP,KAAeA,GAA/C,CAAP;EACD,CAFD;;EAGA,MAAMM,cAAc,GAAIN,GAAD,IAAS;IAC9B,OAAOlB,KAAK,CAACc,aAAD,CAAL,CAAqBI,GAArB,CAAP;EACD,CAFD;;EAGA,MAAMO,iBAAiB,GAAG,CAACvB,MAAD,EAASmB,KAAT,KAAmB;IAC3CnB,MAAM,CAACmB,KAAP,GAAeA,KAAf;EACD,CAFD;;EAGA,SAASK,cAAT,CAAwBC,CAAxB,EAA2B;IACzB,IAAIC,EAAJ;;IACA,MAAM;MAAEV;IAAF,IAAUS,CAAC,CAACE,aAAF,CAAgBC,OAAhC;IACA,IAAI,CAACZ,GAAL,EACE;IACF,MAAM;MAAEa,SAAF;MAAaC;IAAb,IAAwBrC,KAA9B;IACA,IAAIsC,KAAK,GAAGC,SAAS,CAACC,GAAtB;;IACA,IAAIC,QAAQ,CAACL,SAAD,CAAZ,EAAyB;MACvBE,KAAK,GAAGI,gBAAgB,CAACN,SAAS,CAACb,GAAD,CAAV,CAAxB;IACD,CAFD,MAEO;MACLe,KAAK,GAAGI,gBAAgB,CAACL,MAAM,CAACC,KAAR,CAAxB;IACD;;IACD,CAACL,EAAE,GAAGjC,KAAK,CAAC2C,YAAZ,KAA6B,IAA7B,GAAoC,KAAK,CAAzC,GAA6CV,EAAE,CAACW,IAAH,CAAQ5C,KAAR,EAAe;MAAEO,MAAM,EAAEoB,SAAS,CAACJ,GAAD,CAAnB;MAA0BA,GAA1B;MAA+Be;IAA/B,CAAf,CAA7C;EACD;;EACD,OAAO;IACLrC,OADK;IAELkB,aAFK;IAGLM,iBAHK;IAILhB,kBAJK;IAKLC,mBALK;IAMLO,eANK;IAOLL,WAPK;IAQLD,aARK;IASLR,cATK;IAULwB,SAVK;IAWLE,cAXK;IAYLC,iBAZK;IAaLC;EAbK,CAAP;AAeF","names":["useColumns","props","columns","fixed","visibleColumns","computed","unref","filter","column","hidden","fixedColumnsOnLeft","fixedColumnsOnRight","normalColumns","mainColumns","ret","forEach","push","placeholderSign","hasFixedColumns","length","columnsStyles","_columns","reduce","style","key","calcColumnStyle","columnsTotalWidth","width","getColumn","find","getColumnStyle","updateColumnWidth","onColumnSorted","e","_a","currentTarget","dataset","sortState","sortBy","order","SortOrder","ASC","isObject","oppositeOrderMap","onColumnSort","call"],"sources":["../../../../../../../packages/components/table-v2/src/composables/use-columns.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, unref } from 'vue'\nimport { isObject } from '@element-plus/utils'\nimport { SortOrder, oppositeOrderMap } from '../constants'\nimport { placeholderSign } from '../private'\nimport { calcColumnStyle } from './utils'\n\nimport type { CSSProperties, Ref } from 'vue'\nimport type { TableV2Props } from '../table'\nimport type { AnyColumns, Column, KeyType } from '../types'\n\nfunction useColumns(\n  props: TableV2Props,\n  columns: Ref<AnyColumns>,\n  fixed: Ref<boolean>\n) {\n  const visibleColumns = computed(() => {\n    return unref(columns).filter((column) => !column.hidden)\n  })\n\n  const fixedColumnsOnLeft = computed(() =>\n    unref(visibleColumns).filter(\n      (column) => column.fixed === 'left' || column.fixed === true\n    )\n  )\n\n  const fixedColumnsOnRight = computed(() =>\n    unref(visibleColumns).filter((column) => column.fixed === 'right')\n  )\n\n  const normalColumns = computed(() =>\n    unref(visibleColumns).filter((column) => !column.fixed)\n  )\n\n  const mainColumns = computed(() => {\n    const ret: AnyColumns = []\n\n    unref(fixedColumnsOnLeft).forEach((column) => {\n      ret.push({\n        ...column,\n        placeholderSign,\n      })\n    })\n\n    unref(normalColumns).forEach((column) => {\n      ret.push(column)\n    })\n\n    unref(fixedColumnsOnRight).forEach((column) => {\n      ret.push({\n        ...column,\n        placeholderSign,\n      })\n    })\n\n    return ret\n  })\n\n  const hasFixedColumns = computed(() => {\n    return unref(fixedColumnsOnLeft).length || unref(fixedColumnsOnRight).length\n  })\n\n  const columnsStyles = computed(() => {\n    const _columns = unref(columns)\n\n    return _columns.reduce<Record<Column<any>['key'], CSSProperties>>(\n      (style, column) => {\n        style[column.key] = calcColumnStyle(column, unref(fixed), props.fixed)\n        return style\n      },\n      {}\n    )\n  })\n\n  const columnsTotalWidth = computed(() => {\n    return unref(visibleColumns).reduce(\n      (width, column) => width + column.width,\n      0\n    )\n  })\n\n  const getColumn = (key: KeyType) => {\n    return unref(columns).find((column) => column.key === key)\n  }\n\n  const getColumnStyle = (key: KeyType) => {\n    return unref(columnsStyles)[key]\n  }\n\n  const updateColumnWidth = (column: Column<any>, width: number) => {\n    column.width = width\n  }\n\n  function onColumnSorted(e: MouseEvent) {\n    const { key } = (e.currentTarget as HTMLElement).dataset\n    if (!key) return\n    const { sortState, sortBy } = props\n\n    let order = SortOrder.ASC\n\n    if (isObject(sortState)) {\n      order = oppositeOrderMap[sortState[key]]\n    } else {\n      order = oppositeOrderMap[sortBy.order]\n    }\n\n    props.onColumnSort?.({ column: getColumn(key)!, key, order })\n  }\n\n  return {\n    columns,\n    columnsStyles,\n    columnsTotalWidth,\n    fixedColumnsOnLeft,\n    fixedColumnsOnRight,\n    hasFixedColumns,\n    mainColumns,\n    normalColumns,\n    visibleColumns,\n\n    getColumn,\n    getColumnStyle,\n    updateColumnWidth,\n    onColumnSorted,\n  }\n}\n\nexport { useColumns }\nexport type UseColumnsReturn = ReturnType<typeof useColumns>\n"]},"metadata":{},"sourceType":"module"}