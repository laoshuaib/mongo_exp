{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, onMounted, nextTick, h } from 'vue';\nimport { ElCheckbox } from '../../../checkbox/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport FilterPanel from '../filter-panel.mjs';\nimport useLayoutObserver from '../layout-observer.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport useEvent from './event-helper.mjs';\nimport useStyle from './style.helper.mjs';\nimport useUtils from './utils-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nvar TableHeader = defineComponent({\n  name: \"ElTableHeader\",\n  components: {\n    ElCheckbox\n  },\n  props: {\n    fixed: {\n      type: String,\n      default: \"\"\n    },\n    store: {\n      required: true,\n      type: Object\n    },\n    border: Boolean,\n    defaultSort: {\n      type: Object,\n      default: () => {\n        return {\n          prop: \"\",\n          order: \"\"\n        };\n      }\n    }\n  },\n\n  setup(props, {\n    emit\n  }) {\n    const instance = getCurrentInstance();\n    const parent = inject(TABLE_INJECTION_KEY);\n    const ns = useNamespace(\"table\");\n    const filterPanels = ref({});\n    const {\n      onColumnsChange,\n      onScrollableChange\n    } = useLayoutObserver(parent);\n    onMounted(async () => {\n      await nextTick();\n      await nextTick();\n      const {\n        prop,\n        order\n      } = props.defaultSort;\n      parent == null ? void 0 : parent.store.commit(\"sort\", {\n        prop,\n        order,\n        init: true\n      });\n    });\n    const {\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleMouseOut,\n      handleSortClick,\n      handleFilterClick\n    } = useEvent(props, emit);\n    const {\n      getHeaderRowStyle,\n      getHeaderRowClass,\n      getHeaderCellStyle,\n      getHeaderCellClass\n    } = useStyle(props);\n    const {\n      isGroup,\n      toggleAllSelection,\n      columnRows\n    } = useUtils(props);\n    instance.state = {\n      onColumnsChange,\n      onScrollableChange\n    };\n    instance.filterPanels = filterPanels;\n    return {\n      ns,\n      filterPanels,\n      onColumnsChange,\n      onScrollableChange,\n      columnRows,\n      getHeaderRowClass,\n      getHeaderRowStyle,\n      getHeaderCellClass,\n      getHeaderCellStyle,\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleMouseOut,\n      handleSortClick,\n      handleFilterClick,\n      isGroup,\n      toggleAllSelection\n    };\n  },\n\n  render() {\n    const {\n      ns,\n      isGroup,\n      columnRows,\n      getHeaderCellStyle,\n      getHeaderCellClass,\n      getHeaderRowClass,\n      getHeaderRowStyle,\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleSortClick,\n      handleMouseOut,\n      store,\n      $parent\n    } = this;\n    let rowSpan = 1;\n    return h(\"thead\", {\n      class: {\n        [ns.is(\"group\")]: isGroup\n      }\n    }, columnRows.map((subColumns, rowIndex) => h(\"tr\", {\n      class: getHeaderRowClass(rowIndex),\n      key: rowIndex,\n      style: getHeaderRowStyle(rowIndex)\n    }, subColumns.map((column, cellIndex) => {\n      if (column.rowSpan > rowSpan) {\n        rowSpan = column.rowSpan;\n      }\n\n      return h(\"th\", {\n        class: getHeaderCellClass(rowIndex, cellIndex, subColumns, column),\n        colspan: column.colSpan,\n        key: `${column.id}-thead`,\n        rowspan: column.rowSpan,\n        style: getHeaderCellStyle(rowIndex, cellIndex, subColumns, column),\n        onClick: $event => handleHeaderClick($event, column),\n        onContextmenu: $event => handleHeaderContextMenu($event, column),\n        onMousedown: $event => handleMouseDown($event, column),\n        onMousemove: $event => handleMouseMove($event, column),\n        onMouseout: handleMouseOut\n      }, [h(\"div\", {\n        class: [\"cell\", column.filteredValue && column.filteredValue.length > 0 ? \"highlight\" : \"\", column.labelClassName]\n      }, [column.renderHeader ? column.renderHeader({\n        column,\n        $index: cellIndex,\n        store,\n        _self: $parent\n      }) : column.label, column.sortable && h(\"span\", {\n        onClick: $event => handleSortClick($event, column),\n        class: \"caret-wrapper\"\n      }, [h(\"i\", {\n        onClick: $event => handleSortClick($event, column, \"ascending\"),\n        class: \"sort-caret ascending\"\n      }), h(\"i\", {\n        onClick: $event => handleSortClick($event, column, \"descending\"),\n        class: \"sort-caret descending\"\n      })]), column.filterable && h(FilterPanel, {\n        store,\n        placement: column.filterPlacement || \"bottom-start\",\n        column,\n        upDataColumn: (key, value) => {\n          column[key] = value;\n        }\n      })])]);\n    }))));\n  }\n\n});\nexport { TableHeader as default };","map":{"version":3,"mappings":";;;;;;;;;;AAiBA,kBAAeA,eAAe,CAAC;EAC7BC,IAAI,EAAE,eADuB;EAE7BC,UAAU,EAAE;IACVC;EADU,CAFiB;EAK7BC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MADD;MAELC,OAAO,EAAE;IAFJ,CADF;IAKLC,KAAK,EAAE;MACLC,QAAQ,EAAE,IADL;MAELJ,IAAI,EAAEK;IAFD,CALF;IASLC,MAAM,EAAEC,OATH;IAULC,WAAW,EAAE;MACXR,IAAI,EAAEK,MADK;MAEXH,OAAO,EAAE,MAAM;QACb,OAAO;UACLO,IAAI,EAAE,EADD;UAELC,KAAK,EAAE;QAFF,CAAP;MAID;IAPU;EAVR,CALsB;;EAyB7BC,KAAK,CAACb,KAAD,EAAQ;IAAEc;EAAF,CAAR,EAAkB;IACrB,MAAMC,QAAQ,GAAGC,kBAAkB,EAAnC;IACA,MAAMC,MAAM,GAAGC,MAAM,CAACC,mBAAD,CAArB;IACA,MAAMC,EAAE,GAAGC,YAAY,CAAC,OAAD,CAAvB;IACA,MAAMC,YAAY,GAAGC,GAAG,CAAC,EAAD,CAAxB;IACA,MAAM;MAAEC,eAAF;MAAmBC;IAAnB,IAA0CC,iBAAiB,CAACT,MAAD,CAAjE;IACAU,SAAS,CAAC,YAAY;MACpB,MAAMC,QAAQ,EAAd;MACA,MAAMA,QAAQ,EAAd;MACA,MAAM;QAAEjB,IAAF;QAAQC;MAAR,IAAkBZ,KAAK,CAACU,WAA9B;MACAO,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACZ,KAAP,CAAawB,MAAb,CAAoB,MAApB,EAA4B;QAAElB,IAAF;QAAQC,KAAR;QAAekB,IAAI,EAAE;MAArB,CAA5B,CAA1B;IACD,CALQ,CAAT;IAMA,MAAM;MACJC,iBADI;MAEJC,uBAFI;MAGJC,eAHI;MAIJC,eAJI;MAKJC,cALI;MAMJC,eANI;MAOJC;IAPI,IAQFC,QAAQ,CAACtC,KAAD,EAAQc,IAAR,CARZ;IASA,MAAM;MACJyB,iBADI;MAEJC,iBAFI;MAGJC,kBAHI;MAIJC;IAJI,IAKFC,QAAQ,CAAC3C,KAAD,CALZ;IAMA,MAAM;MAAE4C,OAAF;MAAWC,kBAAX;MAA+BC;IAA/B,IAA8CC,QAAQ,CAAC/C,KAAD,CAA5D;IACAe,QAAQ,CAACiC,KAAT,GAAiB;MACfxB,eADe;MAEfC;IAFe,CAAjB;IAIAV,QAAQ,CAACO,YAAT,GAAwBA,YAAxB;IACA,OAAO;MACLF,EADK;MAELE,YAFK;MAGLE,eAHK;MAILC,kBAJK;MAKLqB,UALK;MAMLN,iBANK;MAOLD,iBAPK;MAQLG,kBARK;MASLD,kBATK;MAULV,iBAVK;MAWLC,uBAXK;MAYLC,eAZK;MAaLC,eAbK;MAcLC,cAdK;MAeLC,eAfK;MAgBLC,iBAhBK;MAiBLO,OAjBK;MAkBLC;IAlBK,CAAP;EAoBD,CA9E4B;;EA+E7BI,MAAM,GAAG;IACP,MAAM;MACJ7B,EADI;MAEJwB,OAFI;MAGJE,UAHI;MAIJL,kBAJI;MAKJC,kBALI;MAMJF,iBANI;MAOJD,iBAPI;MAQJR,iBARI;MASJC,uBATI;MAUJC,eAVI;MAWJC,eAXI;MAYJE,eAZI;MAaJD,cAbI;MAcJ9B,KAdI;MAeJ6C;IAfI,IAgBF,IAhBJ;IAiBA,IAAIC,OAAO,GAAG,CAAd;IACA,OAAOC,CAAC,CAAC,OAAD,EAAU;MAChBC,KAAK,EAAE;QAAE,CAACjC,EAAE,CAACkC,EAAH,CAAM,OAAN,CAAD,GAAkBV;MAApB;IADS,CAAV,EAELE,UAAU,CAACS,GAAX,CAAe,CAACC,UAAD,EAAaC,QAAb,KAA0BL,CAAC,CAAC,IAAD,EAAO;MAClDC,KAAK,EAAEb,iBAAiB,CAACiB,QAAD,CAD0B;MAElDC,GAAG,EAAED,QAF6C;MAGlDE,KAAK,EAAEpB,iBAAiB,CAACkB,QAAD;IAH0B,CAAP,EAI1CD,UAAU,CAACD,GAAX,CAAe,CAACK,MAAD,EAASC,SAAT,KAAuB;MACvC,IAAID,MAAM,CAACT,OAAP,GAAiBA,OAArB,EAA8B;QAC5BA,OAAO,GAAGS,MAAM,CAACT,OAAjB;MACD;;MACD,OAAOC,CAAC,CAAC,IAAD,EAAO;QACbC,KAAK,EAAEX,kBAAkB,CAACe,QAAD,EAAWI,SAAX,EAAsBL,UAAtB,EAAkCI,MAAlC,CADZ;QAEbE,OAAO,EAAEF,MAAM,CAACG,OAFH;QAGbL,GAAG,EAAG,GAAEE,MAAM,CAACI,EAAG,QAHL;QAIbC,OAAO,EAAEL,MAAM,CAACT,OAJH;QAKbQ,KAAK,EAAElB,kBAAkB,CAACgB,QAAD,EAAWI,SAAX,EAAsBL,UAAtB,EAAkCI,MAAlC,CALZ;QAMbM,OAAO,EAAGC,MAAD,IAAYpC,iBAAiB,CAACoC,MAAD,EAASP,MAAT,CANzB;QAObQ,aAAa,EAAGD,MAAD,IAAYnC,uBAAuB,CAACmC,MAAD,EAASP,MAAT,CAPrC;QAQbS,WAAW,EAAGF,MAAD,IAAYlC,eAAe,CAACkC,MAAD,EAASP,MAAT,CAR3B;QASbU,WAAW,EAAGH,MAAD,IAAYjC,eAAe,CAACiC,MAAD,EAASP,MAAT,CAT3B;QAUbW,UAAU,EAAEpC;MAVC,CAAP,EAWL,CACDiB,CAAC,CAAC,KAAD,EAAQ;QACPC,KAAK,EAAE,CACL,MADK,EAELO,MAAM,CAACY,aAAP,IAAwBZ,MAAM,CAACY,aAAP,CAAqBC,MAArB,GAA8B,CAAtD,GAA0D,WAA1D,GAAwE,EAFnE,EAGLb,MAAM,CAACc,cAHF;MADA,CAAR,EAME,CACDd,MAAM,CAACe,YAAP,GAAsBf,MAAM,CAACe,YAAP,CAAoB;QACxCf,MADwC;QAExCgB,MAAM,EAAEf,SAFgC;QAGxCxD,KAHwC;QAIxCwE,KAAK,EAAE3B;MAJiC,CAApB,CAAtB,GAKKU,MAAM,CAACkB,KANX,EAODlB,MAAM,CAACmB,QAAP,IAAmB3B,CAAC,CAAC,MAAD,EAAS;QAC3Bc,OAAO,EAAGC,MAAD,IAAY/B,eAAe,CAAC+B,MAAD,EAASP,MAAT,CADT;QAE3BP,KAAK,EAAE;MAFoB,CAAT,EAGjB,CACDD,CAAC,CAAC,GAAD,EAAM;QACLc,OAAO,EAAGC,MAAD,IAAY/B,eAAe,CAAC+B,MAAD,EAASP,MAAT,EAAiB,WAAjB,CAD/B;QAELP,KAAK,EAAE;MAFF,CAAN,CADA,EAKDD,CAAC,CAAC,GAAD,EAAM;QACLc,OAAO,EAAGC,MAAD,IAAY/B,eAAe,CAAC+B,MAAD,EAASP,MAAT,EAAiB,YAAjB,CAD/B;QAELP,KAAK,EAAE;MAFF,CAAN,CALA,CAHiB,CAPnB,EAoBDO,MAAM,CAACoB,UAAP,IAAqB5B,CAAC,CAAC6B,WAAD,EAAc;QAClC5E,KADkC;QAElC6E,SAAS,EAAEtB,MAAM,CAACuB,eAAP,IAA0B,cAFH;QAGlCvB,MAHkC;QAIlCwB,YAAY,EAAE,CAAC1B,GAAD,EAAM2B,KAAN,KAAgB;UAC5BzB,MAAM,CAACF,GAAD,CAAN,GAAc2B,KAAd;QACD;MANiC,CAAd,CApBrB,CANF,CADA,CAXK,CAAR;IAgDD,CApDE,CAJ0C,CAA1C,CAFK,CAAR;EA2DD;;AA7J4B,CAAD,CAA9B","names":["defineComponent","name","components","ElCheckbox","props","fixed","type","String","default","store","required","Object","border","Boolean","defaultSort","prop","order","setup","emit","instance","getCurrentInstance","parent","inject","TABLE_INJECTION_KEY","ns","useNamespace","filterPanels","ref","onColumnsChange","onScrollableChange","useLayoutObserver","onMounted","nextTick","commit","init","handleHeaderClick","handleHeaderContextMenu","handleMouseDown","handleMouseMove","handleMouseOut","handleSortClick","handleFilterClick","useEvent","getHeaderRowStyle","getHeaderRowClass","getHeaderCellStyle","getHeaderCellClass","useStyle","isGroup","toggleAllSelection","columnRows","useUtils","state","render","$parent","rowSpan","h","class","is","map","subColumns","rowIndex","key","style","column","cellIndex","colspan","colSpan","id","rowspan","onClick","$event","onContextmenu","onMousedown","onMousemove","onMouseout","filteredValue","length","labelClassName","renderHeader","$index","_self","label","sortable","filterable","FilterPanel","placement","filterPlacement","upDataColumn","value"],"sources":["../../../../../../../packages/components/table/src/table-header/index.ts"],"sourcesContent":["// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  h,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n} from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { useNamespace } from '@element-plus/hooks'\nimport FilterPanel from '../filter-panel.vue'\nimport useLayoutObserver from '../layout-observer'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport useEvent from './event-helper'\nimport useStyle from './style.helper'\nimport useUtils from './utils-helper'\nimport type { ComponentInternalInstance, PropType, Ref } from 'vue'\nimport type { DefaultRow, Sort } from '../table/defaults'\nimport type { Store } from '../store'\nexport interface TableHeader extends ComponentInternalInstance {\n  state: {\n    onColumnsChange\n    onScrollableChange\n  }\n  filterPanels: Ref<unknown>\n}\nexport interface TableHeaderProps<T> {\n  fixed: string\n  store: Store<T>\n  border: boolean\n  defaultSort: Sort\n}\n\nexport default defineComponent({\n  name: 'ElTableHeader',\n  components: {\n    ElCheckbox,\n  },\n  props: {\n    fixed: {\n      type: String,\n      default: '',\n    },\n    store: {\n      required: true,\n      type: Object as PropType<TableHeaderProps<DefaultRow>['store']>,\n    },\n    border: Boolean,\n    defaultSort: {\n      type: Object as PropType<TableHeaderProps<DefaultRow>['defaultSort']>,\n      default: () => {\n        return {\n          prop: '',\n          order: '',\n        }\n      },\n    },\n  },\n  setup(props, { emit }) {\n    const instance = getCurrentInstance() as TableHeader\n    const parent = inject(TABLE_INJECTION_KEY)\n    const ns = useNamespace('table')\n    const filterPanels = ref({})\n    const { onColumnsChange, onScrollableChange } = useLayoutObserver(parent!)\n    onMounted(async () => {\n      // Need double await, because udpateColumns is executed after nextTick for now\n      await nextTick()\n      await nextTick()\n      const { prop, order } = props.defaultSort\n      parent?.store.commit('sort', { prop, order, init: true })\n    })\n    const {\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleMouseOut,\n      handleSortClick,\n      handleFilterClick,\n    } = useEvent(props as TableHeaderProps<unknown>, emit)\n    const {\n      getHeaderRowStyle,\n      getHeaderRowClass,\n      getHeaderCellStyle,\n      getHeaderCellClass,\n    } = useStyle(props as TableHeaderProps<unknown>)\n    const { isGroup, toggleAllSelection, columnRows } = useUtils(\n      props as TableHeaderProps<unknown>\n    )\n\n    instance.state = {\n      onColumnsChange,\n      onScrollableChange,\n    }\n    instance.filterPanels = filterPanels\n\n    return {\n      ns,\n      filterPanels,\n      onColumnsChange,\n      onScrollableChange,\n      columnRows,\n      getHeaderRowClass,\n      getHeaderRowStyle,\n      getHeaderCellClass,\n      getHeaderCellStyle,\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleMouseOut,\n      handleSortClick,\n      handleFilterClick,\n      isGroup,\n      toggleAllSelection,\n    }\n  },\n  render() {\n    const {\n      ns,\n      isGroup,\n      columnRows,\n      getHeaderCellStyle,\n      getHeaderCellClass,\n      getHeaderRowClass,\n      getHeaderRowStyle,\n      handleHeaderClick,\n      handleHeaderContextMenu,\n      handleMouseDown,\n      handleMouseMove,\n      handleSortClick,\n      handleMouseOut,\n      store,\n      $parent,\n    } = this\n    let rowSpan = 1\n    return h(\n      'thead',\n      {\n        class: { [ns.is('group')]: isGroup },\n      },\n      columnRows.map((subColumns, rowIndex) =>\n        h(\n          'tr',\n          {\n            class: getHeaderRowClass(rowIndex),\n            key: rowIndex,\n            style: getHeaderRowStyle(rowIndex),\n          },\n          subColumns.map((column, cellIndex) => {\n            if (column.rowSpan > rowSpan) {\n              rowSpan = column.rowSpan\n            }\n            return h(\n              'th',\n              {\n                class: getHeaderCellClass(\n                  rowIndex,\n                  cellIndex,\n                  subColumns,\n                  column\n                ),\n                colspan: column.colSpan,\n                key: `${column.id}-thead`,\n                rowspan: column.rowSpan,\n                style: getHeaderCellStyle(\n                  rowIndex,\n                  cellIndex,\n                  subColumns,\n                  column\n                ),\n                onClick: ($event) => handleHeaderClick($event, column),\n                onContextmenu: ($event) =>\n                  handleHeaderContextMenu($event, column),\n                onMousedown: ($event) => handleMouseDown($event, column),\n                onMousemove: ($event) => handleMouseMove($event, column),\n                onMouseout: handleMouseOut,\n              },\n              [\n                h(\n                  'div',\n                  {\n                    class: [\n                      'cell',\n                      column.filteredValue && column.filteredValue.length > 0\n                        ? 'highlight'\n                        : '',\n                      column.labelClassName,\n                    ],\n                  },\n                  [\n                    column.renderHeader\n                      ? column.renderHeader({\n                          column,\n                          $index: cellIndex,\n                          store,\n                          _self: $parent,\n                        })\n                      : column.label,\n                    column.sortable &&\n                      h(\n                        'span',\n                        {\n                          onClick: ($event) => handleSortClick($event, column),\n                          class: 'caret-wrapper',\n                        },\n                        [\n                          h('i', {\n                            onClick: ($event) =>\n                              handleSortClick($event, column, 'ascending'),\n                            class: 'sort-caret ascending',\n                          }),\n                          h('i', {\n                            onClick: ($event) =>\n                              handleSortClick($event, column, 'descending'),\n                            class: 'sort-caret descending',\n                          }),\n                        ]\n                      ),\n                    column.filterable &&\n                      h(FilterPanel, {\n                        store,\n                        placement: column.filterPlacement || 'bottom-start',\n                        column,\n                        upDataColumn: (key, value) => {\n                          column[key] = value\n                        },\n                      }),\n                  ]\n                ),\n              ]\n            )\n          })\n        )\n      )\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}