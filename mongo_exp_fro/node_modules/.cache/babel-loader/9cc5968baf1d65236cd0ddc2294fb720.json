{"ast":null,"code":"import { defineComponent, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, normalizeStyle, createElementVNode, toDisplayString } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport { useTree } from './composables/useTree.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { treeProps, treeEmits, ROOT_TREE_INJECTION_KEY } from './virtual-tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport { formItemContextKey } from '../../../tokens/form.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTreeV2\",\n  components: {\n    ElTreeNode,\n    FixedSizeList\n  },\n  props: treeProps,\n  emits: treeEmits,\n\n  setup(props, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance()\n    });\n    provide(formItemContextKey, void 0);\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"tree\");\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    } = useTree(props, ctx.emit);\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData\n    });\n    return {\n      t,\n      ns,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  const _component_fixed_size_list = resolveComponent(\"fixed-size-list\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [_ctx.isNotEmpty ? (openBlock(), createBlock(_component_fixed_size_list, {\n    key: 0,\n    \"class-name\": _ctx.ns.b(\"virtual-list\"),\n    data: _ctx.flattenTree,\n    total: _ctx.flattenTree.length,\n    height: _ctx.height,\n    \"item-size\": _ctx.itemSize,\n    \"perf-mode\": _ctx.perfMode\n  }, {\n    default: withCtx(({\n      data,\n      index,\n      style\n    }) => [(openBlock(), createBlock(_component_el_tree_node, {\n      key: data[index].key,\n      style: normalizeStyle(style),\n      node: data[index],\n      expanded: _ctx.isExpanded(data[index]),\n      \"show-checkbox\": _ctx.showCheckbox,\n      checked: _ctx.isChecked(data[index]),\n      indeterminate: _ctx.isIndeterminate(data[index]),\n      disabled: _ctx.isDisabled(data[index]),\n      current: _ctx.isCurrent(data[index]),\n      \"hidden-expand-icon\": _ctx.isForceHiddenExpandIcon(data[index]),\n      onClick: _ctx.handleNodeClick,\n      onToggle: _ctx.toggleExpand,\n      onCheck: _ctx.handleNodeCheck\n    }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\"]))]),\n    _: 1\n  }, 8, [\"class-name\", \"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2))], 2);\n}\n\nvar TreeV2 = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree-v2/src/tree.vue\"]]);\n\nexport { TreeV2 as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAkDA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM,YADuB;EAE7BC,UAAY;IACVC,UADU;IAEVC;EAFU,CAFiB;EAM7BC,KAAO,WANsB;EAO7BC,KAAO,WAPsB;;EAQ7BC,MAAMF,KAAN,EAAwBG,GAAxB,EAA6B;IAC3BC,QAAQC,uBAAR,EAAiC;MAC/BF,GAD+B;MAE/BH,KAF+B;MAG/BM,UAAUC,kBAAmB;IAHE,CAAjC;IAKAH,QAAQI,kBAAR,EAA4B,KAAS,CAArC;IACM;MAAEC;IAAF,IAAQC,SAAU,EAAlB;IACA,WAAKC,aAAa,MAAb,CAAL;IACA;MACJC,WADI;MAEJC,UAFI;MAGJC,YAHI;MAIJC,UAJI;MAKJC,eALI;MAMJC,SANI;MAOJC,UAPI;MAQJC,SARI;MASJC,uBATI;MAUJC,cAVI;MAWJC,eAXI;MAYJC,eAZI;MAcJC,cAdI;MAeJC,aAfI;MAgBJC,aAhBI;MAiBJC,cAjBI;MAkBJC,eAlBI;MAmBJC,kBAnBI;MAoBJC,mBApBI;MAqBJC,UArBI;MAsBJC,cAtBI;MAuBJC,MAvBI;MAwBJC;IAxBI,IAyBFC,QAAQnC,KAAR,EAAeG,IAAIiC,IAAnB,CAzBE;IA2BNjC,IAAIkC,MAAJ,CAAW;MACTb,cADS;MAETC,aAFS;MAGTC,aAHS;MAITC,cAJS;MAKTC,eALS;MAMTC,kBANS;MAOTC,mBAPS;MAQTC,UARS;MASTC,cATS;MAUTC,MAVS;MAWTC;IAXS,CAAX;IAcO;MACLzB,CADK;MAEL6B,EAFK;MAGL1B,WAHK;MAIL2B,QAAU,IAJL;MAKL1B,UALK;MAMLC,YANK;MAOLO,cAPK;MAQLN,UARK;MASLC,eATK;MAULC,SAVK;MAWLC,UAXK;MAYLC,SAZK;MAaLC,uBAbK;MAcLE,eAdK;MAeLC;IAfK;EAiBT;;AA3E6B,EAA/B;;;;;;;kCAbQ;;EAnCH,8CAAsB;IACvBiB,KAAK;MAAA;IAAA,GADkB;IAClBC;EADkB,CAAtBC,EAIO,CAyBUC;IAxBfC,MAwBe;IAvBf,cAAMD,yBAuBS;IAtBfE,UAAmB,YAsBJ;IArBfC,KAAQ,yBAqBO;IApBfC,MAAW,aAoBI;IAnBf,aAAWJ,aAmBI;IAnBJ;EAmBI,GAjBL;IAA6BK,gBACtC,CAcE;MAAAH;MAAAI;MAAAC;IAAA,QAbCR,aAAiBS;MACjBP,oBADiB;MAEjBM,OAAWE,qBAFM;MAGjBC,UAAU,CAAWJ,KAAX,CAHO;MAIjBK,QAAe,8BAJE;MAKjB,iBAAmBX,iBALF;MAMjBY,wBAA+BV,WAA/B,CANiB;MAOjBW,aAAqB,uBAAUX,WAAV,CAPJ;MAQjBY,UAAmBd,oBAAU,OAAV,CARF;MASjBe,wBAA4Cb,WAA5C,CATiB;MAUjB,sBAAOF,yCAVU;MAWjBgB,OAAQ,sBAXS;MAYjBC,QAAO,mBAZU;MAYVC;IAZU,sKAalB,EAdF,CADS;;EAAA,CAiBK,EAKZ,CALY,EAKZ,mEALY,MAKZnB;IAJOE,GAAK,GAIZ;IAJkBJ;EAIlB,GADK,CAFFsB,kBAAO;IAAItB;EAAJ,GACEuB,iFADF,EACE,CADF,CAEL,CACL,IALY,CAzBV,CAJPrB","names":["_sfc_main","defineComponent","name","components","ElTreeNode","FixedSizeList","props","emits","setup","ctx","provide","ROOT_TREE_INJECTION_KEY","instance","getCurrentInstance","formItemContextKey","t","useLocale","useNamespace","flattenTree","isNotEmpty","toggleExpand","isExpanded","isIndeterminate","isChecked","isDisabled","isCurrent","isForceHiddenExpandIcon","toggleCheckbox","handleNodeClick","handleNodeCheck","getCurrentNode","getCurrentKey","setCurrentKey","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","filter","setData","useTree","emit","expose","ns","itemSize","class","role","_openBlock","_ctx","key","data","total","height","default","index","style","_createBlock","_normalizeStyle","node","expanded","checked","indeterminate","disabled","current","onClick","onToggle","onCheck","_createElementVNode","_toDisplayString"],"sources":["../../../../../../packages/components/tree-v2/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b(), { [ns.m('highlight-current')]: highlightCurrent }]\"\n    role=\"tree\"\n  >\n    <fixed-size-list\n      v-if=\"isNotEmpty\"\n      :class-name=\"ns.b('virtual-list')\"\n      :data=\"flattenTree\"\n      :total=\"flattenTree.length\"\n      :height=\"height\"\n      :item-size=\"itemSize\"\n      :perf-mode=\"perfMode\"\n    >\n      <template #default=\"{ data, index, style }\">\n        <el-tree-node\n          :key=\"data[index].key\"\n          :style=\"style\"\n          :node=\"data[index]\"\n          :expanded=\"isExpanded(data[index])\"\n          :show-checkbox=\"showCheckbox\"\n          :checked=\"isChecked(data[index])\"\n          :indeterminate=\"isIndeterminate(data[index])\"\n          :disabled=\"isDisabled(data[index])\"\n          :current=\"isCurrent(data[index])\"\n          :hidden-expand-icon=\"isForceHiddenExpandIcon(data[index])\"\n          @click=\"handleNodeClick\"\n          @toggle=\"toggleExpand\"\n          @check=\"handleNodeCheck\"\n        />\n      </template>\n    </fixed-size-list>\n    <div v-else :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, provide } from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/tokens'\nimport { FixedSizeList } from '@element-plus/components/virtual-list'\nimport { useTree } from './composables/useTree'\nimport ElTreeNode from './tree-node.vue'\nimport { ROOT_TREE_INJECTION_KEY, treeEmits, treeProps } from './virtual-tree'\nimport type { TreeProps } from './types'\n\nexport default defineComponent({\n  name: 'ElTreeV2',\n  components: {\n    ElTreeNode,\n    FixedSizeList,\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup(props: TreeProps, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance(),\n    })\n    provide(formItemContextKey, undefined)\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      // expose\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    } = useTree(props, ctx.emit)\n\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    })\n\n    return {\n      t,\n      ns,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}