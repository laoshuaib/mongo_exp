{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, createElementVNode, openBlock, createElementBlock, normalizeClass, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElSlPanel\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const ns = useNamespace(\"color-svpanel\");\n    const instance = getCurrentInstance();\n    const cursorTop = ref(0);\n    const cursorLeft = ref(0);\n    const background = ref(\"hsl(0, 100%, 50%)\");\n    const colorValue = computed(() => {\n      const hue = props.color.get(\"hue\");\n      const value = props.color.get(\"value\");\n      return {\n        hue,\n        value\n      };\n    });\n\n    function update() {\n      const saturation = props.color.get(\"saturation\");\n      const value = props.color.get(\"value\");\n      const el = instance.vnode.el;\n      const {\n        clientWidth: width,\n        clientHeight: height\n      } = el;\n      cursorLeft.value = saturation * width / 100;\n      cursorTop.value = (100 - value) * height / 100;\n      background.value = `hsl(${props.color.get(\"hue\")}, 100%, 50%)`;\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el;\n      const rect = el.getBoundingClientRect();\n      const {\n        clientX,\n        clientY\n      } = getClientXY(event);\n      let left = clientX - rect.left;\n      let top = clientY - rect.top;\n      left = Math.max(0, left);\n      left = Math.min(left, rect.width);\n      top = Math.max(0, top);\n      top = Math.min(top, rect.height);\n      cursorLeft.value = left;\n      cursorTop.value = top;\n      props.color.set({\n        saturation: left / rect.width * 100,\n        value: 100 - top / rect.height * 100\n      });\n    }\n\n    watch(() => colorValue.value, () => {\n      update();\n    });\n    onMounted(() => {\n      draggable(instance.vnode.el, {\n        drag: event => {\n          handleDrag(event);\n        },\n        end: event => {\n          handleDrag(event);\n        }\n      });\n      update();\n    });\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update,\n      ns\n    };\n  }\n\n});\n\nconst _hoisted_1 = /* @__PURE__ */createElementVNode(\"div\", null, null, -1);\n\nconst _hoisted_2 = [_hoisted_1];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b()),\n    style: normalizeStyle({\n      backgroundColor: _ctx.background\n    })\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"white\"))\n  }, null, 2), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"black\"))\n  }, null, 2), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"cursor\")),\n    style: normalizeStyle({\n      top: _ctx.cursorTop + \"px\",\n      left: _ctx.cursorLeft + \"px\"\n    })\n  }, _hoisted_2, 6)], 6);\n}\n\nvar SvPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/sv-panel.vue\"]]);\n\nexport { SvPanel as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","setup","useNamespace","instance","getCurrentInstance","ref","computed","hue","get","value","saturation","vnode","el","clientWidth","width","clientHeight","height","cursorLeft","cursorTop","background","event","getBoundingClientRect","clientX","clientY","getClientXY","rect","left","max","Math","top","set","watch","colorValue","update","onMounted","draggable","drag","handleDrag","end","ns","_createElementVNode","_hoisted_1","_createElementBlock","class","_normalizeClass","b","style","backgroundColor","e","_ctx"],"sources":["../../../../../../../packages/components/color-picker/src/components/sv-panel.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"ns.b()\"\n    :style=\"{\n      backgroundColor: background,\n    }\"\n  >\n    <div :class=\"ns.e('white')\" />\n    <div :class=\"ns.e('black')\" />\n    <div\n      :class=\"ns.e('cursor')\"\n      :style=\"{\n        top: cursorTop + 'px',\n        left: cursorLeft + 'px',\n      }\"\n    >\n      <div />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElSlPanel',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('color-svpanel')\n    // instance\n    const instance = getCurrentInstance()\n    // data\n    const cursorTop = ref(0)\n    const cursorLeft = ref(0)\n    const background = ref('hsl(0, 100%, 50%)')\n    const colorValue = computed(() => {\n      const hue = props.color.get('hue')\n      const value = props.color.get('value')\n      return { hue, value }\n    })\n\n    // methods\n    function update() {\n      const saturation = props.color.get('saturation')\n      const value = props.color.get('value')\n\n      const el = instance.vnode.el\n      const { clientWidth: width, clientHeight: height } = el\n\n      cursorLeft.value = (saturation * width) / 100\n      cursorTop.value = ((100 - value) * height) / 100\n\n      background.value = `hsl(${props.color.get('hue')}, 100%, 50%)`\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      let left = clientX - rect.left\n      let top = clientY - rect.top\n      left = Math.max(0, left)\n      left = Math.min(left, rect.width)\n\n      top = Math.max(0, top)\n      top = Math.min(top, rect.height)\n\n      cursorLeft.value = left\n      cursorTop.value = top\n      props.color.set({\n        saturation: (left / rect.width) * 100,\n        value: 100 - (top / rect.height) * 100,\n      })\n    }\n\n    // watch\n    watch(\n      () => colorValue.value,\n      () => {\n        update()\n      }\n    )\n    // mounted\n    onMounted(() => {\n      draggable(instance.vnode.el as HTMLElement, {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      })\n\n      update()\n    })\n    return {\n      cursorTop,\n      cursorLeft,\n      background,\n      colorValue,\n      handleDrag,\n      update,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}