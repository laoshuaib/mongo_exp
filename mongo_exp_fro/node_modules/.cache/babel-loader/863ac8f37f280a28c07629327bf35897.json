{"ast":null,"code":"import { isRef, ref, unref, onMounted, watchEffect } from 'vue';\nimport { isClient, unrefElement } from '@vueuse/core';\nimport { isNil } from 'lodash-unified';\nimport { computePosition, arrow } from '@floating-ui/dom';\nimport '../../utils/index.mjs';\nimport { buildProps } from '../../utils/vue/props/runtime.mjs';\nimport { keysOf } from '../../utils/objects.mjs';\nconst useFloatingProps = buildProps({});\n\nconst unrefReference = elRef => {\n  if (!isClient) return;\n  if (!elRef) return elRef;\n  const unrefEl = unrefElement(elRef);\n  if (unrefEl) return unrefEl;\n  return isRef(elRef) ? unrefEl : elRef;\n};\n\nconst getPositionDataWithUnit = (record, key) => {\n  const value = record == null ? void 0 : record[key];\n  return isNil(value) ? \"\" : `${value}px`;\n};\n\nconst useFloating = ({\n  middleware,\n  placement,\n  strategy\n}) => {\n  const referenceRef = ref();\n  const contentRef = ref();\n  const x = ref();\n  const y = ref();\n  const middlewareData = ref({});\n  const states = {\n    x,\n    y,\n    placement,\n    strategy,\n    middlewareData\n  };\n\n  const update = async () => {\n    if (!isClient) return;\n    const referenceEl = unrefReference(referenceRef);\n    const contentEl = unrefElement(contentRef);\n    if (!referenceEl || !contentEl) return;\n    const data = await computePosition(referenceEl, contentEl, {\n      placement: unref(placement),\n      strategy: unref(strategy),\n      middleware: unref(middleware)\n    });\n    keysOf(states).forEach(key => {\n      states[key].value = data[key];\n    });\n  };\n\n  onMounted(() => {\n    watchEffect(() => {\n      update();\n    });\n  });\n  return { ...states,\n    update,\n    referenceRef,\n    contentRef\n  };\n};\n\nconst arrowMiddleware = ({\n  arrowRef,\n  padding\n}) => {\n  return {\n    name: \"arrow\",\n    options: {\n      element: arrowRef,\n      padding\n    },\n\n    fn(args) {\n      const arrowEl = unref(arrowRef);\n      if (!arrowEl) return {};\n      return arrow({\n        element: arrowEl,\n        padding\n      }).fn(args);\n    }\n\n  };\n};\n\nexport { arrowMiddleware, getPositionDataWithUnit, useFloating, useFloatingProps };","map":{"version":3,"mappings":";;;;;;;AAKY,MAACA,gBAAgB,GAAGC,UAAU,CAAC,EAAD,CAA9B;;AACZ,MAAMC,cAAc,GAAIC,KAAD,IAAW;EAChC,IAAI,CAACC,QAAL,EACE;EACF,IAAI,CAACD,KAAL,EACE,OAAOA,KAAP;EACF,MAAME,OAAO,GAAGC,YAAY,CAACH,KAAD,CAA5B;EACA,IAAIE,OAAJ,EACE,OAAOA,OAAP;EACF,OAAOE,KAAK,CAACJ,KAAD,CAAL,GAAeE,OAAf,GAAyBF,KAAhC;AACD,CATD;;AAUY,MAACK,uBAAuB,GAAG,CAACC,MAAD,EAASC,GAAT,KAAiB;EACtD,MAAMC,KAAK,GAAGF,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACC,GAAD,CAA9C;EACA,OAAOE,KAAK,CAACD,KAAD,CAAL,GAAe,EAAf,GAAqB,GAAEA,KAAM,IAApC;AACF,CAHY;;AAIA,MAACE,WAAW,GAAG,CAAC;EAC1BC,UAD0B;EAE1BC,SAF0B;EAG1BC;AAH0B,CAAD,KAIrB;EACJ,MAAMC,YAAY,GAAGC,GAAG,EAAxB;EACA,MAAMC,UAAU,GAAGD,GAAG,EAAtB;EACA,MAAME,CAAC,GAAGF,GAAG,EAAb;EACA,MAAMG,CAAC,GAAGH,GAAG,EAAb;EACA,MAAMI,cAAc,GAAGJ,GAAG,CAAC,EAAD,CAA1B;EACA,MAAMK,MAAM,GAAG;IACbH,CADa;IAEbC,CAFa;IAGbN,SAHa;IAIbC,QAJa;IAKbM;EALa,CAAf;;EAOA,MAAME,MAAM,GAAG,YAAY;IACzB,IAAI,CAACpB,QAAL,EACE;IACF,MAAMqB,WAAW,GAAGvB,cAAc,CAACe,YAAD,CAAlC;IACA,MAAMS,SAAS,GAAGpB,YAAY,CAACa,UAAD,CAA9B;IACA,IAAI,CAACM,WAAD,IAAgB,CAACC,SAArB,EACE;IACF,MAAMC,IAAI,GAAG,MAAMC,eAAe,CAACH,WAAD,EAAcC,SAAd,EAAyB;MACzDX,SAAS,EAAEc,KAAK,CAACd,SAAD,CADyC;MAEzDC,QAAQ,EAAEa,KAAK,CAACb,QAAD,CAF0C;MAGzDF,UAAU,EAAEe,KAAK,CAACf,UAAD;IAHwC,CAAzB,CAAlC;IAKAgB,MAAM,CAACP,MAAD,CAAN,CAAeQ,OAAf,CAAwBrB,GAAD,IAAS;MAC9Ba,MAAM,CAACb,GAAD,CAAN,CAAYC,KAAZ,GAAoBgB,IAAI,CAACjB,GAAD,CAAxB;IACD,CAFD;EAGD,CAfD;;EAgBAsB,SAAS,CAAC,MAAM;IACdC,WAAW,CAAC,MAAM;MAChBT,MAAM;IACP,CAFU,CAAX;EAGD,CAJQ,CAAT;EAKA,OAAO,EACL,GAAGD,MADE;IAELC,MAFK;IAGLP,YAHK;IAILE;EAJK,CAAP;AAMF,CA5CY;;AA6CA,MAACe,eAAe,GAAG,CAAC;EAC9BC,QAD8B;EAE9BC;AAF8B,CAAD,KAGzB;EACJ,OAAO;IACLC,IAAI,EAAE,OADD;IAELC,OAAO,EAAE;MACPC,OAAO,EAAEJ,QADF;MAEPC;IAFO,CAFJ;;IAMLI,EAAE,CAACC,IAAD,EAAO;MACP,MAAMC,OAAO,GAAGb,KAAK,CAACM,QAAD,CAArB;MACA,IAAI,CAACO,OAAL,EACE,OAAO,EAAP;MACF,OAAOC,KAAS,CAAC;QACfJ,OAAO,EAAEG,OADM;QAEfN;MAFe,CAAD,CAATO,CAGJH,EAHIG,CAGDF,IAHCE,CAAP;IAID;;EAdI,CAAP;AAgBF,CApBY","names":["useFloatingProps","buildProps","unrefReference","elRef","isClient","unrefEl","unrefElement","isRef","getPositionDataWithUnit","record","key","value","isNil","useFloating","middleware","placement","strategy","referenceRef","ref","contentRef","x","y","middlewareData","states","update","referenceEl","contentEl","data","computePosition","unref","keysOf","forEach","onMounted","watchEffect","arrowMiddleware","arrowRef","padding","name","options","element","fn","args","arrowEl","arrowCore"],"sources":["../../../../../packages/hooks/use-floating/index.ts"],"sourcesContent":["import { isRef, onMounted, ref, unref, watchEffect } from 'vue'\nimport { isClient, unrefElement } from '@vueuse/core'\nimport { isNil } from 'lodash-unified'\nimport { arrow as arrowCore, computePosition } from '@floating-ui/dom'\nimport { buildProps, keysOf } from '@element-plus/utils'\n\nimport type { Ref, ToRefs } from 'vue'\nimport type {\n  ComputePositionReturn,\n  Middleware,\n  Placement,\n  SideObject,\n  Strategy,\n  VirtualElement,\n} from '@floating-ui/dom'\n\nexport const useFloatingProps = buildProps({} as const)\n\nexport type UseFloatingProps = ToRefs<{\n  middleware: Array<Middleware>\n  placement: Placement\n  strategy: Strategy\n}>\n\ntype ElementRef = Parameters<typeof unrefElement>['0']\n\nconst unrefReference = (\n  elRef: ElementRef | Ref<VirtualElement | undefined>\n) => {\n  if (!isClient) return\n  if (!elRef) return elRef\n  const unrefEl = unrefElement(elRef as ElementRef)\n  if (unrefEl) return unrefEl\n  return isRef(elRef) ? unrefEl : (elRef as VirtualElement)\n}\n\nexport const getPositionDataWithUnit = <T extends Record<string, number>>(\n  record: T | undefined,\n  key: keyof T\n) => {\n  const value = record?.[key]\n  return isNil(value) ? '' : `${value}px`\n}\n\nexport const useFloating = ({\n  middleware,\n  placement,\n  strategy,\n}: UseFloatingProps) => {\n  const referenceRef = ref<HTMLElement | VirtualElement>()\n  const contentRef = ref<HTMLElement>()\n  const x = ref<number>()\n  const y = ref<number>()\n  const middlewareData = ref<ComputePositionReturn['middlewareData']>({})\n\n  const states = {\n    x,\n    y,\n    placement,\n    strategy,\n    middlewareData,\n  } as const\n\n  const update = async () => {\n    if (!isClient) return\n\n    const referenceEl = unrefReference(referenceRef)\n    const contentEl = unrefElement(contentRef)\n    if (!referenceEl || !contentEl) return\n\n    const data = await computePosition(referenceEl, contentEl, {\n      placement: unref(placement),\n      strategy: unref(strategy),\n      middleware: unref(middleware),\n    })\n\n    keysOf(states).forEach((key) => {\n      states[key].value = data[key]\n    })\n  }\n\n  onMounted(() => {\n    watchEffect(() => {\n      update()\n    })\n  })\n\n  return {\n    ...states,\n    update,\n    referenceRef,\n    contentRef,\n  }\n}\n\nexport type ArrowMiddlewareProps = {\n  arrowRef: Ref<HTMLElement | null | undefined>\n  padding?: number | SideObject\n}\n\nexport const arrowMiddleware = ({\n  arrowRef,\n  padding,\n}: ArrowMiddlewareProps): Middleware => {\n  return {\n    name: 'arrow',\n    options: {\n      element: arrowRef,\n      padding,\n    },\n\n    fn(args) {\n      const arrowEl = unref(arrowRef)\n      if (!arrowEl) return {}\n\n      return arrowCore({\n        element: arrowEl,\n        padding,\n      }).fn(args)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}