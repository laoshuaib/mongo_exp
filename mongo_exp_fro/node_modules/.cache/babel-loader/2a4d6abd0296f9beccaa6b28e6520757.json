{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { getCurrentInstance, ref, unref } from 'vue';\nimport { getRowIdentity } from '../util.mjs';\n\nfunction useCurrent(watcherData) {\n  const instance = getCurrentInstance();\n\n  const _currentRowKey = ref(null);\n\n  const currentRow = ref(null);\n\n  const setCurrentRowKey = key => {\n    instance.store.assertRowKey();\n    _currentRowKey.value = key;\n    setCurrentRowByKey(key);\n  };\n\n  const restoreCurrentRowKey = () => {\n    _currentRowKey.value = null;\n  };\n\n  const setCurrentRowByKey = key => {\n    const {\n      data,\n      rowKey\n    } = watcherData;\n    let _currentRow = null;\n\n    if (rowKey.value) {\n      _currentRow = (unref(data) || []).find(item => getRowIdentity(item, rowKey.value) === key);\n    }\n\n    currentRow.value = _currentRow;\n    instance.emit(\"current-change\", currentRow.value, null);\n  };\n\n  const updateCurrentRow = _currentRow => {\n    const oldCurrentRow = currentRow.value;\n\n    if (_currentRow && _currentRow !== oldCurrentRow) {\n      currentRow.value = _currentRow;\n      instance.emit(\"current-change\", currentRow.value, oldCurrentRow);\n      return;\n    }\n\n    if (!_currentRow && oldCurrentRow) {\n      currentRow.value = null;\n      instance.emit(\"current-change\", null, oldCurrentRow);\n    }\n  };\n\n  const updateCurrentRowData = () => {\n    const rowKey = watcherData.rowKey.value;\n    const data = watcherData.data.value || [];\n    const oldCurrentRow = currentRow.value;\n\n    if (!data.includes(oldCurrentRow) && oldCurrentRow) {\n      if (rowKey) {\n        const currentRowKey = getRowIdentity(oldCurrentRow, rowKey);\n        setCurrentRowByKey(currentRowKey);\n      } else {\n        currentRow.value = null;\n      }\n\n      if (currentRow.value === null) {\n        instance.emit(\"current-change\", null, oldCurrentRow);\n      }\n    } else if (_currentRowKey.value) {\n      setCurrentRowByKey(_currentRowKey.value);\n      restoreCurrentRowKey();\n    }\n  };\n\n  return {\n    setCurrentRowKey,\n    restoreCurrentRowKey,\n    setCurrentRowByKey,\n    updateCurrentRow,\n    updateCurrentRowData,\n    states: {\n      _currentRowKey,\n      currentRow\n    }\n  };\n}\n\nexport { useCurrent as default };","map":{"version":3,"mappings":";;;;AAEA,SAASA,UAAT,CAAoBC,WAApB,EAAiC;EAC/B,MAAMC,QAAQ,GAAGC,kBAAkB,EAAnC;;EACA,MAAMC,cAAc,GAAGC,GAAG,CAAC,IAAD,CAA1B;;EACA,MAAMC,UAAU,GAAGD,GAAG,CAAC,IAAD,CAAtB;;EACA,MAAME,gBAAgB,GAAIC,GAAD,IAAS;IAChCN,QAAQ,CAACO,KAAT,CAAeC,YAAf;IACAN,cAAc,CAACO,KAAf,GAAuBH,GAAvB;IACAI,kBAAkB,CAACJ,GAAD,CAAlB;EACD,CAJD;;EAKA,MAAMK,oBAAoB,GAAG,MAAM;IACjCT,cAAc,CAACO,KAAf,GAAuB,IAAvB;EACD,CAFD;;EAGA,MAAMC,kBAAkB,GAAIJ,GAAD,IAAS;IAClC,MAAM;MAAEM,IAAF;MAAQC;IAAR,IAAmBd,WAAzB;IACA,IAAIe,WAAW,GAAG,IAAlB;;IACA,IAAID,MAAM,CAACJ,KAAX,EAAkB;MAChBK,WAAW,GAAG,CAACC,KAAK,CAACH,IAAD,CAAL,IAAe,EAAhB,EAAoBI,IAApB,CAA0BC,IAAD,IAAUC,cAAc,CAACD,IAAD,EAAOJ,MAAM,CAACJ,KAAd,CAAd,KAAuCH,GAA1E,CAAd;IACD;;IACDF,UAAU,CAACK,KAAX,GAAmBK,WAAnB;IACAd,QAAQ,CAACmB,IAAT,CAAc,gBAAd,EAAgCf,UAAU,CAACK,KAA3C,EAAkD,IAAlD;EACD,CARD;;EASA,MAAMW,gBAAgB,GAAIN,WAAD,IAAiB;IACxC,MAAMO,aAAa,GAAGjB,UAAU,CAACK,KAAjC;;IACA,IAAIK,WAAW,IAAIA,WAAW,KAAKO,aAAnC,EAAkD;MAChDjB,UAAU,CAACK,KAAX,GAAmBK,WAAnB;MACAd,QAAQ,CAACmB,IAAT,CAAc,gBAAd,EAAgCf,UAAU,CAACK,KAA3C,EAAkDY,aAAlD;MACA;IACD;;IACD,IAAI,CAACP,WAAD,IAAgBO,aAApB,EAAmC;MACjCjB,UAAU,CAACK,KAAX,GAAmB,IAAnB;MACAT,QAAQ,CAACmB,IAAT,CAAc,gBAAd,EAAgC,IAAhC,EAAsCE,aAAtC;IACD;EACF,CAXD;;EAYA,MAAMC,oBAAoB,GAAG,MAAM;IACjC,MAAMT,MAAM,GAAGd,WAAW,CAACc,MAAZ,CAAmBJ,KAAlC;IACA,MAAMG,IAAI,GAAGb,WAAW,CAACa,IAAZ,CAAiBH,KAAjB,IAA0B,EAAvC;IACA,MAAMY,aAAa,GAAGjB,UAAU,CAACK,KAAjC;;IACA,IAAI,CAACG,IAAI,CAACW,QAAL,CAAcF,aAAd,CAAD,IAAiCA,aAArC,EAAoD;MAClD,IAAIR,MAAJ,EAAY;QACV,MAAMW,aAAa,GAAGN,cAAc,CAACG,aAAD,EAAgBR,MAAhB,CAApC;QACAH,kBAAkB,CAACc,aAAD,CAAlB;MACD,CAHD,MAGO;QACLpB,UAAU,CAACK,KAAX,GAAmB,IAAnB;MACD;;MACD,IAAIL,UAAU,CAACK,KAAX,KAAqB,IAAzB,EAA+B;QAC7BT,QAAQ,CAACmB,IAAT,CAAc,gBAAd,EAAgC,IAAhC,EAAsCE,aAAtC;MACD;IACF,CAVD,MAUO,IAAInB,cAAc,CAACO,KAAnB,EAA0B;MAC/BC,kBAAkB,CAACR,cAAc,CAACO,KAAhB,CAAlB;MACAE,oBAAoB;IACrB;EACF,CAlBD;;EAmBA,OAAO;IACLN,gBADK;IAELM,oBAFK;IAGLD,kBAHK;IAILU,gBAJK;IAKLE,oBALK;IAMLG,MAAM,EAAE;MACNvB,cADM;MAENE;IAFM;EANH,CAAP;AAWF","names":["useCurrent","watcherData","instance","getCurrentInstance","_currentRowKey","ref","currentRow","setCurrentRowKey","key","store","assertRowKey","value","setCurrentRowByKey","restoreCurrentRowKey","data","rowKey","_currentRow","unref","find","item","getRowIdentity","emit","updateCurrentRow","oldCurrentRow","updateCurrentRowData","includes","currentRowKey","states"],"sources":["../../../../../../../packages/components/table/src/store/current.ts"],"sourcesContent":["// @ts-nocheck\nimport { getCurrentInstance, ref, unref } from 'vue'\nimport { getRowIdentity } from '../util'\n\nimport type { Ref } from 'vue'\nimport type { Table } from '../table/defaults'\nimport type { WatcherPropsData } from '.'\n\nfunction useCurrent<T>(watcherData: WatcherPropsData<T>) {\n  const instance = getCurrentInstance() as Table<T>\n  const _currentRowKey = ref<string>(null)\n  const currentRow: Ref<T> = ref(null)\n\n  const setCurrentRowKey = (key: string) => {\n    instance.store.assertRowKey()\n    _currentRowKey.value = key\n    setCurrentRowByKey(key)\n  }\n\n  const restoreCurrentRowKey = () => {\n    _currentRowKey.value = null\n  }\n\n  const setCurrentRowByKey = (key: string) => {\n    const { data, rowKey } = watcherData\n    let _currentRow = null\n    if (rowKey.value) {\n      _currentRow = (unref(data) || []).find(\n        (item) => getRowIdentity(item, rowKey.value) === key\n      )\n    }\n    currentRow.value = _currentRow\n    instance.emit('current-change', currentRow.value, null)\n  }\n\n  const updateCurrentRow = (_currentRow: T) => {\n    const oldCurrentRow = currentRow.value\n    if (_currentRow && _currentRow !== oldCurrentRow) {\n      currentRow.value = _currentRow\n      instance.emit('current-change', currentRow.value, oldCurrentRow)\n      return\n    }\n    if (!_currentRow && oldCurrentRow) {\n      currentRow.value = null\n      instance.emit('current-change', null, oldCurrentRow)\n    }\n  }\n\n  const updateCurrentRowData = () => {\n    const rowKey = watcherData.rowKey.value\n    // data 为 null 时，解构时的默认值会被忽略\n    const data = watcherData.data.value || []\n    const oldCurrentRow = currentRow.value\n    // 当 currentRow 不在 data 中时尝试更新数据\n    if (!data.includes(oldCurrentRow) && oldCurrentRow) {\n      if (rowKey) {\n        const currentRowKey = getRowIdentity(oldCurrentRow, rowKey)\n        setCurrentRowByKey(currentRowKey)\n      } else {\n        currentRow.value = null\n      }\n      if (currentRow.value === null) {\n        instance.emit('current-change', null, oldCurrentRow)\n      }\n    } else if (_currentRowKey.value) {\n      // 把初始时下设置的 rowKey 转化成 rowData\n      setCurrentRowByKey(_currentRowKey.value)\n      restoreCurrentRowKey()\n    }\n  }\n\n  return {\n    setCurrentRowKey,\n    restoreCurrentRowKey,\n    setCurrentRowByKey,\n    updateCurrentRow,\n    updateCurrentRowData,\n    states: {\n      _currentRowKey,\n      currentRow,\n    },\n  }\n}\n\nexport default useCurrent\n"]},"metadata":{},"sourceType":"module"}