{"ast":null,"code":"import { watch, isRef } from 'vue';\n\nconst useRestoreActive = (toggle, initialFocus) => {\n  let previousActive;\n  watch(() => toggle.value, val => {\n    var _a, _b;\n\n    if (val) {\n      previousActive = document.activeElement;\n\n      if (isRef(initialFocus)) {\n        (_b = (_a = initialFocus.value).focus) == null ? void 0 : _b.call(_a);\n      }\n    } else {\n      if (process.env.NODE_ENV === \"test\") {\n        previousActive.focus.call(previousActive);\n      } else {\n        previousActive.focus();\n      }\n    }\n  });\n};\n\nexport { useRestoreActive };","map":{"version":3,"mappings":";;AACY,MAACA,gBAAgB,GAAG,CAACC,MAAD,EAASC,YAAT,KAA0B;EACxD,IAAIC,cAAJ;EACAC,KAAK,CAAC,MAAMH,MAAM,CAACI,KAAd,EAAsBC,GAAD,IAAS;IACjC,IAAIC,EAAJ,EAAQC,EAAR;;IACA,IAAIF,GAAJ,EAAS;MACPH,cAAc,GAAGM,QAAQ,CAACC,aAA1B;;MACA,IAAIC,KAAK,CAACT,YAAD,CAAT,EAAyB;QACvB,CAACM,EAAE,GAAG,CAACD,EAAE,GAAGL,YAAY,CAACG,KAAnB,EAA0BO,KAAhC,KAA0C,IAA1C,GAAiD,KAAK,CAAtD,GAA0DJ,EAAE,CAACK,IAAH,CAAQN,EAAR,CAA1D;MACD;IACF,CALD,MAKO;MACL,IAAIO,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA7B,EAAqC;QACnCb,cAAc,CAACS,KAAf,CAAqBC,IAArB,CAA0BV,cAA1B;MACD,CAFD,MAEO;QACLA,cAAc,CAACS,KAAf;MACD;IACF;EACF,CAdI,CAAL;AAeF,CAjBY","names":["useRestoreActive","toggle","initialFocus","previousActive","watch","value","val","_a","_b","document","activeElement","isRef","focus","call","process","env","NODE_ENV"],"sources":["../../../../../packages/hooks/use-restore-active/index.ts"],"sourcesContent":["import { isRef, watch } from 'vue'\nimport type { Ref } from 'vue'\n\n/**\n * This method provides dialogable components the ability to restore previously activated element before\n * the dialog gets opened\n */\nexport const useRestoreActive = (\n  toggle: Ref<boolean>,\n  initialFocus?: Ref<HTMLElement>\n) => {\n  let previousActive: HTMLElement\n  watch(\n    () => toggle.value,\n    (val) => {\n      if (val) {\n        previousActive = document.activeElement as HTMLElement\n        if (isRef(initialFocus)) {\n          initialFocus.value.focus?.()\n        }\n      } else {\n        if (process.env.NODE_ENV === 'test') {\n          previousActive.focus.call(previousActive)\n        } else {\n          previousActive.focus()\n        }\n      }\n    }\n  )\n}\n"]},"metadata":{},"sourceType":"module"}