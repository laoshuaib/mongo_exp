{"ast":null,"code":"import { isEqual } from 'lodash-unified';\nimport Node from './node.mjs';\n\nconst flatNodes = (nodes, leafOnly) => {\n  return nodes.reduce((res, node) => {\n    if (node.isLeaf) {\n      res.push(node);\n    } else {\n      !leafOnly && res.push(node);\n      res = res.concat(flatNodes(node.children, leafOnly));\n    }\n\n    return res;\n  }, []);\n};\n\nclass Store {\n  constructor(data, config) {\n    this.config = config;\n    const nodes = (data || []).map(nodeData => new Node(nodeData, this.config));\n    this.nodes = nodes;\n    this.allNodes = flatNodes(nodes, false);\n    this.leafNodes = flatNodes(nodes, true);\n  }\n\n  getNodes() {\n    return this.nodes;\n  }\n\n  getFlattedNodes(leafOnly) {\n    return leafOnly ? this.leafNodes : this.allNodes;\n  }\n\n  appendNode(nodeData, parentNode) {\n    const node = parentNode ? parentNode.appendChild(nodeData) : new Node(nodeData, this.config);\n    if (!parentNode) this.nodes.push(node);\n    this.allNodes.push(node);\n    node.isLeaf && this.leafNodes.push(node);\n  }\n\n  appendNodes(nodeDataList, parentNode) {\n    nodeDataList.forEach(nodeData => this.appendNode(nodeData, parentNode));\n  }\n\n  getNodeByValue(value, leafOnly = false) {\n    if (!value && value !== 0) return null;\n    const node = this.getFlattedNodes(leafOnly).find(node2 => isEqual(node2.value, value) || isEqual(node2.pathValues, value));\n    return node || null;\n  }\n\n  getSameNode(node) {\n    if (!node) return null;\n    const node_ = this.getFlattedNodes(false).find(({\n      value,\n      level\n    }) => isEqual(node.value, value) && node.level === level);\n    return node_ || null;\n  }\n\n}\n\nexport { Store as default };","map":{"version":3,"mappings":";;;AAEA,MAAMA,SAAS,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;EACrC,OAAOD,KAAK,CAACE,MAAN,CAAa,CAACC,GAAD,EAAMC,IAAN,KAAe;IACjC,IAAIA,IAAI,CAACC,MAAT,EAAiB;MACfF,GAAG,CAACG,IAAJ,CAASF,IAAT;IACD,CAFD,MAEO;MACL,CAACH,QAAD,IAAaE,GAAG,CAACG,IAAJ,CAASF,IAAT,CAAb;MACAD,GAAG,GAAGA,GAAG,CAACI,MAAJ,CAAWR,SAAS,CAACK,IAAI,CAACI,QAAN,EAAgBP,QAAhB,CAApB,CAAN;IACD;;IACD,OAAOE,GAAP;EACD,CARM,EAQJ,EARI,CAAP;AASD,CAVD;;AAWe,MAAMM,KAAN,CAAY;EACzBC,WAAW,CAACC,IAAD,EAAOC,MAAP,EAAe;IACxB,KAAKA,MAAL,GAAcA,MAAd;IACA,MAAMZ,KAAK,GAAG,CAACW,IAAI,IAAI,EAAT,EAAaE,GAAb,CAAkBC,QAAD,IAAc,IAAIC,IAAJ,CAASD,QAAT,EAAmB,KAAKF,MAAxB,CAA/B,CAAd;IACA,KAAKZ,KAAL,GAAaA,KAAb;IACA,KAAKgB,QAAL,GAAgBjB,SAAS,CAACC,KAAD,EAAQ,KAAR,CAAzB;IACA,KAAKiB,SAAL,GAAiBlB,SAAS,CAACC,KAAD,EAAQ,IAAR,CAA1B;EACD;;EACDkB,QAAQ,GAAG;IACT,OAAO,KAAKlB,KAAZ;EACD;;EACDmB,eAAe,CAAClB,QAAD,EAAW;IACxB,OAAOA,QAAQ,GAAG,KAAKgB,SAAR,GAAoB,KAAKD,QAAxC;EACD;;EACDI,UAAU,CAACN,QAAD,EAAWO,UAAX,EAAuB;IAC/B,MAAMjB,IAAI,GAAGiB,UAAU,GAAGA,UAAU,CAACC,WAAX,CAAuBR,QAAvB,CAAH,GAAsC,IAAIC,IAAJ,CAASD,QAAT,EAAmB,KAAKF,MAAxB,CAA7D;IACA,IAAI,CAACS,UAAL,EACE,KAAKrB,KAAL,CAAWM,IAAX,CAAgBF,IAAhB;IACF,KAAKY,QAAL,CAAcV,IAAd,CAAmBF,IAAnB;IACAA,IAAI,CAACC,MAAL,IAAe,KAAKY,SAAL,CAAeX,IAAf,CAAoBF,IAApB,CAAf;EACD;;EACDmB,WAAW,CAACC,YAAD,EAAeH,UAAf,EAA2B;IACpCG,YAAY,CAACC,OAAb,CAAsBX,QAAD,IAAc,KAAKM,UAAL,CAAgBN,QAAhB,EAA0BO,UAA1B,CAAnC;EACD;;EACDK,cAAc,CAACC,KAAD,EAAQ1B,QAAQ,GAAG,KAAnB,EAA0B;IACtC,IAAI,CAAC0B,KAAD,IAAUA,KAAK,KAAK,CAAxB,EACE,OAAO,IAAP;IACF,MAAMvB,IAAI,GAAG,KAAKe,eAAL,CAAqBlB,QAArB,EAA+B2B,IAA/B,CAAqCC,KAAD,IAAWC,OAAO,CAACD,KAAK,CAACF,KAAP,EAAcA,KAAd,CAAP,IAA+BG,OAAO,CAACD,KAAK,CAACE,UAAP,EAAmBJ,KAAnB,CAArF,CAAb;IACA,OAAOvB,IAAI,IAAI,IAAf;EACD;;EACD4B,WAAW,CAAC5B,IAAD,EAAO;IAChB,IAAI,CAACA,IAAL,EACE,OAAO,IAAP;IACF,MAAM6B,KAAK,GAAG,KAAKd,eAAL,CAAqB,KAArB,EAA4BS,IAA5B,CAAiC,CAAC;MAAED,KAAF;MAASO;IAAT,CAAD,KAAsBJ,OAAO,CAAC1B,IAAI,CAACuB,KAAN,EAAaA,KAAb,CAAP,IAA8BvB,IAAI,CAAC8B,KAAL,KAAeA,KAApG,CAAd;IACA,OAAOD,KAAK,IAAI,IAAhB;EACD;;AAnCwB","names":["flatNodes","nodes","leafOnly","reduce","res","node","isLeaf","push","concat","children","Store","constructor","data","config","map","nodeData","Node","allNodes","leafNodes","getNodes","getFlattedNodes","appendNode","parentNode","appendChild","appendNodes","nodeDataList","forEach","getNodeByValue","value","find","node2","isEqual","pathValues","getSameNode","node_","level"],"sources":["../../../../../../packages/components/cascader-panel/src/store.ts"],"sourcesContent":["import { isEqual } from 'lodash-unified'\nimport Node from './node'\n\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  CascaderConfig,\n  CascaderNodePathValue,\n  CascaderNodeValue,\n  CascaderOption,\n} from './node'\n\nconst flatNodes = (nodes: Node[], leafOnly: boolean) => {\n  return nodes.reduce((res, node) => {\n    if (node.isLeaf) {\n      res.push(node)\n    } else {\n      !leafOnly && res.push(node)\n      res = res.concat(flatNodes(node.children, leafOnly))\n    }\n    return res\n  }, [] as Node[])\n}\n\nexport default class Store {\n  readonly nodes: Node[]\n  readonly allNodes: Node[]\n  readonly leafNodes: Node[]\n\n  constructor(data: CascaderOption[], readonly config: CascaderConfig) {\n    const nodes = (data || []).map(\n      (nodeData) => new Node(nodeData, this.config)\n    )\n    this.nodes = nodes\n    this.allNodes = flatNodes(nodes, false)\n    this.leafNodes = flatNodes(nodes, true)\n  }\n\n  getNodes() {\n    return this.nodes\n  }\n\n  getFlattedNodes(leafOnly: boolean) {\n    return leafOnly ? this.leafNodes : this.allNodes\n  }\n\n  appendNode(nodeData: CascaderOption, parentNode?: Node) {\n    const node = parentNode\n      ? parentNode.appendChild(nodeData)\n      : new Node(nodeData, this.config)\n\n    if (!parentNode) this.nodes.push(node)\n\n    this.allNodes.push(node)\n    node.isLeaf && this.leafNodes.push(node)\n  }\n\n  appendNodes(nodeDataList: CascaderOption[], parentNode: Node) {\n    nodeDataList.forEach((nodeData) => this.appendNode(nodeData, parentNode))\n  }\n\n  // when checkStrictly, leaf node first\n  getNodeByValue(\n    value: CascaderNodeValue | CascaderNodePathValue,\n    leafOnly = false\n  ): Nullable<Node> {\n    if (!value && value !== 0) return null\n\n    const node = this.getFlattedNodes(leafOnly).find(\n      (node) => isEqual(node.value, value) || isEqual(node.pathValues, value)\n    )\n\n    return node || null\n  }\n\n  getSameNode(node: Node): Nullable<Node> {\n    if (!node) return null\n\n    const node_ = this.getFlattedNodes(false).find(\n      ({ value, level }) => isEqual(node.value, value) && node.level === level\n    )\n\n    return node_ || null\n  }\n}\n"]},"metadata":{},"sourceType":"module"}