{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, inject, ref, computed, openBlock, createBlock, Transition, unref, withCtx, createElementBlock, normalizeClass, createElementVNode, createVNode, toDisplayString, createCommentVNode } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../constants/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { panelTimePickerProps } from '../props/panel-time-picker.mjs';\nimport { useTimePanel } from '../composables/use-time-panel.mjs';\nimport { buildAvailableTimeSlotGetter, useOldValue } from '../composables/use-time-picker.mjs';\nimport TimeSpinner from './basic-time-spinner.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { isUndefined } from '../../../../utils/types.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\n\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"panel-time-pick\",\n  props: panelTimePickerProps,\n  emits: [\"pick\", \"select-range\", \"set-picker-option\"],\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const pickerBase = inject(\"EP_PICKER_BASE\");\n    const {\n      arrowControl,\n      disabledHours,\n      disabledMinutes,\n      disabledSeconds,\n      defaultValue\n    } = pickerBase.props;\n    const {\n      getAvailableHours,\n      getAvailableMinutes,\n      getAvailableSeconds\n    } = buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds);\n    const ns = useNamespace(\"time\");\n    const {\n      t,\n      lang\n    } = useLocale();\n    const selectionRange = ref([0, 2]);\n    const oldValue = useOldValue(props);\n    const transitionName = computed(() => {\n      return isUndefined(props.actualVisible) ? `${ns.namespace.value}-zoom-in-top` : \"\";\n    });\n    const showSeconds = computed(() => {\n      return props.format.includes(\"ss\");\n    });\n    const amPmMode = computed(() => {\n      if (props.format.includes(\"A\")) return \"A\";\n      if (props.format.includes(\"a\")) return \"a\";\n      return \"\";\n    });\n\n    const isValidValue = _date => {\n      const parsedDate = dayjs(_date).locale(lang.value);\n      const result = getRangeAvailableTime(parsedDate);\n      return parsedDate.isSame(result);\n    };\n\n    const handleCancel = () => {\n      emit(\"pick\", oldValue.value, false);\n    };\n\n    const handleConfirm = (visible = false, first = false) => {\n      if (first) return;\n      emit(\"pick\", props.parsedValue, visible);\n    };\n\n    const handleChange = _date => {\n      if (!props.visible) {\n        return;\n      }\n\n      const result = getRangeAvailableTime(_date).millisecond(0);\n      emit(\"pick\", result, true);\n    };\n\n    const setSelectionRange = (start, end) => {\n      emit(\"select-range\", start, end);\n      selectionRange.value = [start, end];\n    };\n\n    const changeSelectionRange = step => {\n      const list = [0, 3].concat(showSeconds.value ? [6] : []);\n      const mapping = [\"hours\", \"minutes\"].concat(showSeconds.value ? [\"seconds\"] : []);\n      const index = list.indexOf(selectionRange.value[0]);\n      const next = (index + step + list.length) % list.length;\n      timePickerOptions[\"start_emitSelectRange\"](mapping[next]);\n    };\n\n    const handleKeydown = event => {\n      const code = event.code;\n      const {\n        left,\n        right,\n        up,\n        down\n      } = EVENT_CODE;\n\n      if ([left, right].includes(code)) {\n        const step = code === left ? -1 : 1;\n        changeSelectionRange(step);\n        event.preventDefault();\n        return;\n      }\n\n      if ([up, down].includes(code)) {\n        const step = code === up ? -1 : 1;\n        timePickerOptions[\"start_scrollDown\"](step);\n        event.preventDefault();\n        return;\n      }\n    };\n\n    const {\n      timePickerOptions,\n      onSetOption,\n      getAvailableTime\n    } = useTimePanel({\n      getAvailableHours,\n      getAvailableMinutes,\n      getAvailableSeconds\n    });\n\n    const getRangeAvailableTime = date => {\n      return getAvailableTime(date, props.datetimeRole || \"\", true);\n    };\n\n    const parseUserInput = value => {\n      if (!value) return null;\n      return dayjs(value, props.format).locale(lang.value);\n    };\n\n    const formatToString = value => {\n      if (!value) return null;\n      return value.format(props.format);\n    };\n\n    const getDefaultValue = () => {\n      return dayjs(defaultValue).locale(lang.value);\n    };\n\n    emit(\"set-picker-option\", [\"isValidValue\", isValidValue]);\n    emit(\"set-picker-option\", [\"formatToString\", formatToString]);\n    emit(\"set-picker-option\", [\"parseUserInput\", parseUserInput]);\n    emit(\"set-picker-option\", [\"handleKeydownInput\", handleKeydown]);\n    emit(\"set-picker-option\", [\"getRangeAvailableTime\", getRangeAvailableTime]);\n    emit(\"set-picker-option\", [\"getDefaultValue\", getDefaultValue]);\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Transition, {\n        name: unref(transitionName)\n      }, {\n        default: withCtx(() => [_ctx.actualVisible || _ctx.visible ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          class: normalizeClass(unref(ns).b(\"panel\"))\n        }, [createElementVNode(\"div\", {\n          class: normalizeClass([unref(ns).be(\"panel\", \"content\"), {\n            \"has-seconds\": unref(showSeconds)\n          }])\n        }, [createVNode(TimeSpinner, {\n          ref: \"spinner\",\n          role: _ctx.datetimeRole || \"start\",\n          \"arrow-control\": unref(arrowControl),\n          \"show-seconds\": unref(showSeconds),\n          \"am-pm-mode\": unref(amPmMode),\n          \"spinner-date\": _ctx.parsedValue,\n          \"disabled-hours\": unref(disabledHours),\n          \"disabled-minutes\": unref(disabledMinutes),\n          \"disabled-seconds\": unref(disabledSeconds),\n          onChange: handleChange,\n          onSetOption: unref(onSetOption),\n          onSelectRange: setSelectionRange\n        }, null, 8, [\"role\", \"arrow-control\", \"show-seconds\", \"am-pm-mode\", \"spinner-date\", \"disabled-hours\", \"disabled-minutes\", \"disabled-seconds\", \"onSetOption\"])], 2), createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).be(\"panel\", \"footer\"))\n        }, [createElementVNode(\"button\", {\n          type: \"button\",\n          class: normalizeClass([unref(ns).be(\"panel\", \"btn\"), \"cancel\"]),\n          onClick: handleCancel\n        }, toDisplayString(unref(t)(\"el.datepicker.cancel\")), 3), createElementVNode(\"button\", {\n          type: \"button\",\n          class: normalizeClass([unref(ns).be(\"panel\", \"btn\"), \"confirm\"]),\n          onClick: _cache[0] || (_cache[0] = $event => handleConfirm())\n        }, toDisplayString(unref(t)(\"el.datepicker.confirm\")), 3)], 2)], 2)) : createCommentVNode(\"v-if\", true)]),\n        _: 1\n      }, 8, [\"name\"]);\n    };\n  }\n\n});\n\nvar TimePickPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/panel-time-pick.vue\"]]);\n\nexport { TimePickPanel as default };","map":{"version":3,"mappings":"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","names":["inject","arrowControl","disabledHours","disabledMinutes","disabledSeconds","defaultValue","pickerBase","getAvailableHours","getAvailableMinutes","getAvailableSeconds","buildAvailableTimeSlotGetter","useNamespace","t","lang","useLocale","selectionRange","useOldValue","props","computed","isUndefined","namespace","value","format","includes","_date","parsedDate","dayjs","locale","getRangeAvailableTime","isSame","result","handleCancel","emit","oldValue","handleConfirm","visible","first","millisecond","start","end","step","list","concat","showSeconds","mapping","index","indexOf","next","length","timePickerOptions","event","code","left","right","up","down","EVENT_CODE","changeSelectionRange","preventDefault","onSetOption","getAvailableTime","useTimePanel","date","getDefaultValue","isValidValue","formatToString","parseUserInput","handleKeydown"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/panel-time-pick.vue"],"sourcesContent":["<template>\n  <transition :name=\"transitionName\">\n    <div v-if=\"actualVisible || visible\" :class=\"ns.b('panel')\">\n      <div :class=\"[ns.be('panel', 'content'), { 'has-seconds': showSeconds }]\">\n        <time-spinner\n          ref=\"spinner\"\n          :role=\"datetimeRole || 'start'\"\n          :arrow-control=\"arrowControl\"\n          :show-seconds=\"showSeconds\"\n          :am-pm-mode=\"amPmMode\"\n          :spinner-date=\"(parsedValue as any)\"\n          :disabled-hours=\"disabledHours\"\n          :disabled-minutes=\"disabledMinutes\"\n          :disabled-seconds=\"disabledSeconds\"\n          @change=\"handleChange\"\n          @set-option=\"onSetOption\"\n          @select-range=\"setSelectionRange\"\n        />\n      </div>\n      <div :class=\"ns.be('panel', 'footer')\">\n        <button\n          type=\"button\"\n          :class=\"[ns.be('panel', 'btn'), 'cancel']\"\n          @click=\"handleCancel\"\n        >\n          {{ t('el.datepicker.cancel') }}\n        </button>\n        <button\n          type=\"button\"\n          :class=\"[ns.be('panel', 'btn'), 'confirm']\"\n          @click=\"handleConfirm()\"\n        >\n          {{ t('el.datepicker.confirm') }}\n        </button>\n      </div>\n    </div>\n  </transition>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { isUndefined } from '@element-plus/utils'\nimport { panelTimePickerProps } from '../props/panel-time-picker'\nimport { useTimePanel } from '../composables/use-time-panel'\nimport {\n  buildAvailableTimeSlotGetter,\n  useOldValue,\n} from '../composables/use-time-picker'\nimport TimeSpinner from './basic-time-spinner.vue'\n\nimport type { Dayjs } from 'dayjs'\n\nconst props = defineProps(panelTimePickerProps)\nconst emit = defineEmits(['pick', 'select-range', 'set-picker-option'])\n\n// Injections\nconst pickerBase = inject('EP_PICKER_BASE') as any\nconst {\n  arrowControl,\n  disabledHours,\n  disabledMinutes,\n  disabledSeconds,\n  defaultValue,\n} = pickerBase.props\nconst { getAvailableHours, getAvailableMinutes, getAvailableSeconds } =\n  buildAvailableTimeSlotGetter(disabledHours, disabledMinutes, disabledSeconds)\n\nconst ns = useNamespace('time')\nconst { t, lang } = useLocale()\n// data\nconst selectionRange = ref([0, 2])\nconst oldValue = useOldValue(props)\n// computed\nconst transitionName = computed(() => {\n  return isUndefined(props.actualVisible)\n    ? `${ns.namespace.value}-zoom-in-top`\n    : ''\n})\nconst showSeconds = computed(() => {\n  return props.format.includes('ss')\n})\nconst amPmMode = computed(() => {\n  if (props.format.includes('A')) return 'A'\n  if (props.format.includes('a')) return 'a'\n  return ''\n})\n// method\nconst isValidValue = (_date: Dayjs) => {\n  const parsedDate = dayjs(_date).locale(lang.value)\n  const result = getRangeAvailableTime(parsedDate)\n  return parsedDate.isSame(result)\n}\nconst handleCancel = () => {\n  emit('pick', oldValue.value, false)\n}\nconst handleConfirm = (visible = false, first = false) => {\n  if (first) return\n  emit('pick', props.parsedValue, visible)\n}\nconst handleChange = (_date: Dayjs) => {\n  // visible avoids edge cases, when use scrolls during panel closing animation\n  if (!props.visible) {\n    return\n  }\n  const result = getRangeAvailableTime(_date).millisecond(0)\n  emit('pick', result, true)\n}\n\nconst setSelectionRange = (start: number, end: number) => {\n  emit('select-range', start, end)\n  selectionRange.value = [start, end]\n}\n\nconst changeSelectionRange = (step: number) => {\n  const list = [0, 3].concat(showSeconds.value ? [6] : [])\n  const mapping = ['hours', 'minutes'].concat(\n    showSeconds.value ? ['seconds'] : []\n  )\n  const index = list.indexOf(selectionRange.value[0])\n  const next = (index + step + list.length) % list.length\n  timePickerOptions['start_emitSelectRange'](mapping[next])\n}\n\nconst handleKeydown = (event: KeyboardEvent) => {\n  const code = event.code\n\n  const { left, right, up, down } = EVENT_CODE\n\n  if ([left, right].includes(code)) {\n    const step = code === left ? -1 : 1\n    changeSelectionRange(step)\n    event.preventDefault()\n    return\n  }\n\n  if ([up, down].includes(code)) {\n    const step = code === up ? -1 : 1\n    timePickerOptions['start_scrollDown'](step)\n    event.preventDefault()\n    return\n  }\n}\n\nconst { timePickerOptions, onSetOption, getAvailableTime } = useTimePanel({\n  getAvailableHours,\n  getAvailableMinutes,\n  getAvailableSeconds,\n})\n\nconst getRangeAvailableTime = (date: Dayjs) => {\n  return getAvailableTime(date, props.datetimeRole || '', true)\n}\n\nconst parseUserInput = (value: Dayjs) => {\n  if (!value) return null\n  return dayjs(value, props.format).locale(lang.value)\n}\n\nconst formatToString = (value: Dayjs) => {\n  if (!value) return null\n  return value.format(props.format)\n}\n\nconst getDefaultValue = () => {\n  return dayjs(defaultValue).locale(lang.value)\n}\n\nemit('set-picker-option', ['isValidValue', isValidValue])\nemit('set-picker-option', ['formatToString', formatToString])\nemit('set-picker-option', ['parseUserInput', parseUserInput])\nemit('set-picker-option', ['handleKeydownInput', handleKeydown])\nemit('set-picker-option', ['getRangeAvailableTime', getRangeAvailableTime])\nemit('set-picker-option', ['getDefaultValue', getDefaultValue])\n</script>\n"]},"metadata":{},"sourceType":"module"}