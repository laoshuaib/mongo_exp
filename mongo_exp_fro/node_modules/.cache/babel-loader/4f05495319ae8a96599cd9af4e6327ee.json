{"ast":null,"code":"import { getCurrentInstance, ref, watchEffect, computed, unref, h, Comment } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { cellForced, getDefaultClassName, defaultRenderCell, treeCellPrefix } from '../config.mjs';\nimport { parseWidth, parseMinWidth } from '../util.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../../utils/error.mjs';\n\nfunction useRender(props, slots, owner) {\n  const instance = getCurrentInstance();\n  const columnId = ref(\"\");\n  const isSubColumn = ref(false);\n  const realAlign = ref();\n  const realHeaderAlign = ref();\n  const ns = useNamespace(\"table\");\n  watchEffect(() => {\n    realAlign.value = props.align ? `is-${props.align}` : null;\n    realAlign.value;\n  });\n  watchEffect(() => {\n    realHeaderAlign.value = props.headerAlign ? `is-${props.headerAlign}` : realAlign.value;\n    realHeaderAlign.value;\n  });\n  const columnOrTableParent = computed(() => {\n    let parent = instance.vnode.vParent || instance.parent;\n\n    while (parent && !parent.tableId && !parent.columnId) {\n      parent = parent.vnode.vParent || parent.parent;\n    }\n\n    return parent;\n  });\n  const hasTreeColumn = computed(() => {\n    const {\n      store\n    } = instance.parent;\n    if (!store) return false;\n    const {\n      treeData\n    } = store.states;\n    const treeDataValue = treeData.value;\n    return treeDataValue && Object.keys(treeDataValue).length > 0;\n  });\n  const realWidth = ref(parseWidth(props.width));\n  const realMinWidth = ref(parseMinWidth(props.minWidth));\n\n  const setColumnWidth = column => {\n    if (realWidth.value) column.width = realWidth.value;\n\n    if (realMinWidth.value) {\n      column.minWidth = realMinWidth.value;\n    }\n\n    if (!column.minWidth) {\n      column.minWidth = 80;\n    }\n\n    column.realWidth = Number(column.width === void 0 ? column.minWidth : column.width);\n    return column;\n  };\n\n  const setColumnForcedProps = column => {\n    const type = column.type;\n    const source = cellForced[type] || {};\n    Object.keys(source).forEach(prop => {\n      const value = source[prop];\n\n      if (prop !== \"className\" && value !== void 0) {\n        column[prop] = value;\n      }\n    });\n    const className = getDefaultClassName(type);\n\n    if (className) {\n      const forceClass = `${unref(ns.namespace)}-${className}`;\n      column.className = column.className ? `${column.className} ${forceClass}` : forceClass;\n    }\n\n    return column;\n  };\n\n  const checkSubColumn = children => {\n    if (Array.isArray(children)) {\n      children.forEach(child => check(child));\n    } else {\n      check(children);\n    }\n\n    function check(item) {\n      var _a;\n\n      if (((_a = item == null ? void 0 : item.type) == null ? void 0 : _a.name) === \"ElTableColumn\") {\n        item.vParent = instance;\n      }\n    }\n  };\n\n  const setColumnRenders = column => {\n    if (props.renderHeader) {\n      debugWarn(\"TableColumn\", \"Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.\");\n    } else if (column.type !== \"selection\") {\n      column.renderHeader = scope => {\n        instance.columnConfig.value[\"label\"];\n        const renderHeader = slots.header;\n        return renderHeader ? renderHeader(scope) : column.label;\n      };\n    }\n\n    let originRenderCell = column.renderCell;\n    const hasTreeColumnValue = hasTreeColumn.value;\n\n    if (column.type === \"expand\") {\n      column.renderCell = data => h(\"div\", {\n        class: \"cell\"\n      }, [originRenderCell(data)]);\n\n      owner.value.renderExpanded = data => {\n        return slots.default ? slots.default(data) : slots.default;\n      };\n    } else {\n      originRenderCell = originRenderCell || defaultRenderCell;\n\n      column.renderCell = data => {\n        let children = null;\n\n        if (slots.default) {\n          const vnodes = slots.default(data);\n          children = vnodes.some(v => v.type !== Comment) ? vnodes : originRenderCell(data);\n        } else {\n          children = originRenderCell(data);\n        }\n\n        const shouldCreatePlaceholder = hasTreeColumnValue && data.cellIndex === 0;\n        const prefix = treeCellPrefix(data, shouldCreatePlaceholder);\n        const props2 = {\n          class: \"cell\",\n          style: {}\n        };\n\n        if (column.showOverflowTooltip) {\n          props2.class = `${props2.class} ${unref(ns.namespace)}-tooltip`;\n          props2.style = {\n            width: `${(data.column.realWidth || Number(data.column.width)) - 1}px`\n          };\n        }\n\n        checkSubColumn(children);\n        return h(\"div\", props2, [prefix, children]);\n      };\n    }\n\n    return column;\n  };\n\n  const getPropsData = (...propsKey) => {\n    return propsKey.reduce((prev, cur) => {\n      if (Array.isArray(cur)) {\n        cur.forEach(key => {\n          prev[key] = props[key];\n        });\n      }\n\n      return prev;\n    }, {});\n  };\n\n  const getColumnElIndex = (children, child) => {\n    return Array.prototype.indexOf.call(children, child);\n  };\n\n  return {\n    columnId,\n    realAlign,\n    isSubColumn,\n    realHeaderAlign,\n    columnOrTableParent,\n    setColumnWidth,\n    setColumnForcedProps,\n    setColumnRenders,\n    getPropsData,\n    getColumnElIndex\n  };\n}\n\nexport { useRender as default };","map":{"version":3,"mappings":"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","names":["useRender","props","slots","owner","instance","getCurrentInstance","columnId","ref","isSubColumn","realAlign","realHeaderAlign","ns","useNamespace","watchEffect","value","align","headerAlign","columnOrTableParent","computed","parent","vnode","vParent","tableId","hasTreeColumn","store","treeData","states","treeDataValue","Object","keys","length","realWidth","parseWidth","width","realMinWidth","parseMinWidth","minWidth","setColumnWidth","column","Number","setColumnForcedProps","type","source","cellForced","forEach","prop","className","getDefaultClassName","forceClass","unref","namespace","checkSubColumn","children","Array","isArray","child","check","item","_a","name","setColumnRenders","renderHeader","debugWarn","scope","columnConfig","header","label","originRenderCell","renderCell","hasTreeColumnValue","data","h","class","renderExpanded","default","defaultRenderCell","vnodes","some","v","Comment","shouldCreatePlaceholder","cellIndex","prefix","treeCellPrefix","props2","style","showOverflowTooltip","getPropsData","propsKey","reduce","prev","cur","key","getColumnElIndex","prototype","indexOf","call"],"sources":["../../../../../../../packages/components/table/src/table-column/render-helper.ts"],"sourcesContent":["// @ts-nocheck\nimport {\n  Comment,\n  computed,\n  getCurrentInstance,\n  h,\n  ref,\n  unref,\n  watchEffect,\n} from 'vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport {\n  cellForced,\n  defaultRenderCell,\n  getDefaultClassName,\n  treeCellPrefix,\n} from '../config'\nimport { parseMinWidth, parseWidth } from '../util'\nimport type { ComputedRef } from 'vue'\nimport type { TableColumn, TableColumnCtx } from './defaults'\n\nfunction useRender<T>(\n  props: TableColumnCtx<T>,\n  slots,\n  owner: ComputedRef<any>\n) {\n  const instance = getCurrentInstance() as TableColumn<T>\n  const columnId = ref('')\n  const isSubColumn = ref(false)\n  const realAlign = ref<string>()\n  const realHeaderAlign = ref<string>()\n  const ns = useNamespace('table')\n  watchEffect(() => {\n    realAlign.value = props.align ? `is-${props.align}` : null\n    // nextline help render\n    realAlign.value\n  })\n  watchEffect(() => {\n    realHeaderAlign.value = props.headerAlign\n      ? `is-${props.headerAlign}`\n      : realAlign.value\n    // nextline help render\n    realHeaderAlign.value\n  })\n  const columnOrTableParent = computed(() => {\n    let parent: any = instance.vnode.vParent || instance.parent\n    while (parent && !parent.tableId && !parent.columnId) {\n      parent = parent.vnode.vParent || parent.parent\n    }\n    return parent\n  })\n  const hasTreeColumn = computed<boolean>(() => {\n    const { store } = instance.parent\n    if (!store) return false\n    const { treeData } = store.states\n    const treeDataValue = treeData.value\n    return treeDataValue && Object.keys(treeDataValue).length > 0\n  })\n\n  const realWidth = ref(parseWidth(props.width))\n  const realMinWidth = ref(parseMinWidth(props.minWidth))\n  const setColumnWidth = (column: TableColumnCtx<T>) => {\n    if (realWidth.value) column.width = realWidth.value\n    if (realMinWidth.value) {\n      column.minWidth = realMinWidth.value\n    }\n    if (!column.minWidth) {\n      column.minWidth = 80\n    }\n    column.realWidth = Number(\n      column.width === undefined ? column.minWidth : column.width\n    )\n    return column\n  }\n  const setColumnForcedProps = (column: TableColumnCtx<T>) => {\n    // 对于特定类型的 column，某些属性不允许设置\n    const type = column.type\n    const source = cellForced[type] || {}\n    Object.keys(source).forEach((prop) => {\n      const value = source[prop]\n      if (prop !== 'className' && value !== undefined) {\n        column[prop] = value\n      }\n    })\n    const className = getDefaultClassName(type)\n    if (className) {\n      const forceClass = `${unref(ns.namespace)}-${className}`\n      column.className = column.className\n        ? `${column.className} ${forceClass}`\n        : forceClass\n    }\n    return column\n  }\n\n  const checkSubColumn = (children: TableColumn<T> | TableColumn<T>[]) => {\n    if (Array.isArray(children)) {\n      children.forEach((child) => check(child))\n    } else {\n      check(children)\n    }\n    function check(item: TableColumn<T>) {\n      if (item?.type?.name === 'ElTableColumn') {\n        item.vParent = instance\n      }\n    }\n  }\n  const setColumnRenders = (column: TableColumnCtx<T>) => {\n    // renderHeader 属性不推荐使用。\n    if (props.renderHeader) {\n      debugWarn(\n        'TableColumn',\n        'Comparing to render-header, scoped-slot header is easier to use. We recommend users to use scoped-slot header.'\n      )\n    } else if (column.type !== 'selection') {\n      column.renderHeader = (scope) => {\n        // help render\n        instance.columnConfig.value['label']\n        const renderHeader = slots.header\n        return renderHeader ? renderHeader(scope) : column.label\n      }\n    }\n\n    let originRenderCell = column.renderCell\n    const hasTreeColumnValue = hasTreeColumn.value\n    // TODO: 这里的实现调整\n    if (column.type === 'expand') {\n      // 对于展开行，renderCell 不允许配置的。在上一步中已经设置过，这里需要简单封装一下。\n      column.renderCell = (data) =>\n        h(\n          'div',\n          {\n            class: 'cell',\n          },\n          [originRenderCell(data)]\n        )\n      owner.value.renderExpanded = (data) => {\n        return slots.default ? slots.default(data) : slots.default\n      }\n    } else {\n      originRenderCell = originRenderCell || defaultRenderCell\n      // 对 renderCell 进行包装\n      column.renderCell = (data) => {\n        let children = null\n        if (slots.default) {\n          const vnodes = slots.default(data)\n          children = vnodes.some((v) => v.type !== Comment)\n            ? vnodes\n            : originRenderCell(data)\n        } else {\n          children = originRenderCell(data)\n        }\n        const shouldCreatePlaceholder =\n          hasTreeColumnValue && data.cellIndex === 0\n        const prefix = treeCellPrefix(data, shouldCreatePlaceholder)\n        const props = {\n          class: 'cell',\n          style: {},\n        }\n        if (column.showOverflowTooltip) {\n          props.class = `${props.class} ${unref(ns.namespace)}-tooltip`\n          props.style = {\n            width: `${\n              (data.column.realWidth || Number(data.column.width)) - 1\n            }px`,\n          }\n        }\n        checkSubColumn(children)\n        return h('div', props, [prefix, children])\n      }\n    }\n    return column\n  }\n  const getPropsData = (...propsKey: unknown[]) => {\n    return propsKey.reduce((prev, cur) => {\n      if (Array.isArray(cur)) {\n        cur.forEach((key) => {\n          prev[key] = props[key]\n        })\n      }\n      return prev\n    }, {})\n  }\n  const getColumnElIndex = (children, child) => {\n    return Array.prototype.indexOf.call(children, child)\n  }\n\n  return {\n    columnId,\n    realAlign,\n    isSubColumn,\n    realHeaderAlign,\n    columnOrTableParent,\n    setColumnWidth,\n    setColumnForcedProps,\n    setColumnRenders,\n    getPropsData,\n    getColumnElIndex,\n  }\n}\n\nexport default useRender\n"]},"metadata":{},"sourceType":"module"}