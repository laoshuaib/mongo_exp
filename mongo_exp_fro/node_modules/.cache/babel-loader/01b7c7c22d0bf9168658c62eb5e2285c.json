{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { isNil } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { isArray } from '@vue/shared';\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nconst LEFT_CHECK_CHANGE_EVENT = \"left-check-change\";\nconst RIGHT_CHECK_CHANGE_EVENT = \"right-check-change\";\nconst transferProps = buildProps({\n  data: {\n    type: definePropType(Array),\n    default: () => []\n  },\n  titles: {\n    type: definePropType(Array),\n    default: () => []\n  },\n  buttonTexts: {\n    type: definePropType(Array),\n    default: () => []\n  },\n  filterPlaceholder: String,\n  filterMethod: {\n    type: definePropType(Function)\n  },\n  leftDefaultChecked: {\n    type: definePropType(Array),\n    default: () => []\n  },\n  rightDefaultChecked: {\n    type: definePropType(Array),\n    default: () => []\n  },\n  renderContent: {\n    type: definePropType(Function)\n  },\n  modelValue: {\n    type: definePropType(Array),\n    default: () => []\n  },\n  format: {\n    type: definePropType(Object),\n    default: () => ({})\n  },\n  filterable: Boolean,\n  props: {\n    type: definePropType(Object),\n    default: () => mutable({\n      label: \"label\",\n      key: \"key\",\n      disabled: \"disabled\"\n    })\n  },\n  targetOrder: {\n    type: String,\n    values: [\"original\", \"push\", \"unshift\"],\n    default: \"original\"\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  }\n});\n\nconst transferCheckedChangeFn = (value, movedKeys) => [value, movedKeys].every(isArray) || isArray(value) && isNil(movedKeys);\n\nconst transferEmits = {\n  [CHANGE_EVENT]: (value, direction, movedKeys) => [value, movedKeys].every(isArray) && [\"left\", \"right\"].includes(direction),\n  [UPDATE_MODEL_EVENT]: value => isArray(value),\n  [LEFT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn,\n  [RIGHT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn\n};\nexport { LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT, transferCheckedChangeFn, transferEmits, transferProps };","map":{"version":3,"mappings":";;;;;;;;AAQY,MAACA,uBAAuB,GAAG,mBAA3B;AACA,MAACC,wBAAwB,GAAG,oBAA5B;AACA,MAACC,aAAa,GAAGC,UAAU,CAAC;EACtCC,IAAI,EAAE;IACJC,IAAI,EAAEC,cAAc,CAACC,KAAD,CADhB;IAEJC,OAAO,EAAE,MAAM;EAFX,CADgC;EAKtCC,MAAM,EAAE;IACNJ,IAAI,EAAEC,cAAc,CAACC,KAAD,CADd;IAENC,OAAO,EAAE,MAAM;EAFT,CAL8B;EAStCE,WAAW,EAAE;IACXL,IAAI,EAAEC,cAAc,CAACC,KAAD,CADT;IAEXC,OAAO,EAAE,MAAM;EAFJ,CATyB;EAatCG,iBAAiB,EAAEC,MAbmB;EActCC,YAAY,EAAE;IACZR,IAAI,EAAEC,cAAc,CAACQ,QAAD;EADR,CAdwB;EAiBtCC,kBAAkB,EAAE;IAClBV,IAAI,EAAEC,cAAc,CAACC,KAAD,CADF;IAElBC,OAAO,EAAE,MAAM;EAFG,CAjBkB;EAqBtCQ,mBAAmB,EAAE;IACnBX,IAAI,EAAEC,cAAc,CAACC,KAAD,CADD;IAEnBC,OAAO,EAAE,MAAM;EAFI,CArBiB;EAyBtCS,aAAa,EAAE;IACbZ,IAAI,EAAEC,cAAc,CAACQ,QAAD;EADP,CAzBuB;EA4BtCI,UAAU,EAAE;IACVb,IAAI,EAAEC,cAAc,CAACC,KAAD,CADV;IAEVC,OAAO,EAAE,MAAM;EAFL,CA5B0B;EAgCtCW,MAAM,EAAE;IACNd,IAAI,EAAEC,cAAc,CAACc,MAAD,CADd;IAENZ,OAAO,EAAE,OAAO,EAAP;EAFH,CAhC8B;EAoCtCa,UAAU,EAAEC,OApC0B;EAqCtCC,KAAK,EAAE;IACLlB,IAAI,EAAEC,cAAc,CAACc,MAAD,CADf;IAELZ,OAAO,EAAE,MAAMgB,OAAO,CAAC;MACrBC,KAAK,EAAE,OADc;MAErBC,GAAG,EAAE,KAFgB;MAGrBC,QAAQ,EAAE;IAHW,CAAD;EAFjB,CArC+B;EA6CtCC,WAAW,EAAE;IACXvB,IAAI,EAAEO,MADK;IAEXiB,MAAM,EAAE,CAAC,UAAD,EAAa,MAAb,EAAqB,SAArB,CAFG;IAGXrB,OAAO,EAAE;EAHE,CA7CyB;EAkDtCsB,aAAa,EAAE;IACbzB,IAAI,EAAEiB,OADO;IAEbd,OAAO,EAAE;EAFI;AAlDuB,CAAD,CAA3B;;AAuDA,MAACuB,uBAAuB,GAAG,CAACC,KAAD,EAAQC,SAAR,KAAsB,CAACD,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,CAAyBC,OAAzB,KAAqCA,OAAO,CAACH,KAAD,CAAP,IAAkBI,KAAK,CAACH,SAAD,CAA7G;;AACA,MAACI,aAAa,GAAG;EAC3B,CAACC,YAAD,GAAgB,CAACN,KAAD,EAAQO,SAAR,EAAmBN,SAAnB,KAAiC,CAACD,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,CAAyBC,OAAzB,KAAqC,CAAC,MAAD,EAAS,OAAT,EAAkBK,QAAlB,CAA2BD,SAA3B,CAD3D;EAE3B,CAACE,kBAAD,GAAuBT,KAAD,IAAWG,OAAO,CAACH,KAAD,CAFb;EAG3B,CAAChC,uBAAD,GAA2B+B,uBAHA;EAI3B,CAAC9B,wBAAD,GAA4B8B;AAJD,CAAjB","names":["LEFT_CHECK_CHANGE_EVENT","RIGHT_CHECK_CHANGE_EVENT","transferProps","buildProps","data","type","definePropType","Array","default","titles","buttonTexts","filterPlaceholder","String","filterMethod","Function","leftDefaultChecked","rightDefaultChecked","renderContent","modelValue","format","Object","filterable","Boolean","props","mutable","label","key","disabled","targetOrder","values","validateEvent","transferCheckedChangeFn","value","movedKeys","every","isArray","isNil","transferEmits","CHANGE_EVENT","direction","includes","UPDATE_MODEL_EVENT"],"sources":["../../../../../../packages/components/transfer/src/transfer.ts"],"sourcesContent":["import { isNil } from 'lodash-unified'\nimport {\n  buildProps,\n  definePropType,\n  isArray,\n  mutable,\n} from '@element-plus/utils'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\n\nimport type { ExtractPropTypes, h as H, VNode } from 'vue'\nimport type Transfer from './transfer.vue'\n\nexport type TransferKey = string | number\nexport type TransferDirection = 'left' | 'right'\n\nexport type TransferDataItem = Record<string, any>\n\nexport type renderContent = (\n  h: typeof H,\n  option: TransferDataItem\n) => VNode | VNode[]\n\nexport interface TransferFormat {\n  noChecked?: string\n  hasChecked?: string\n}\n\nexport interface TransferPropsAlias {\n  label?: string\n  key?: string\n  disabled?: string\n}\n\nexport interface TransferCheckedState {\n  leftChecked: TransferKey[]\n  rightChecked: TransferKey[]\n}\n\nexport const LEFT_CHECK_CHANGE_EVENT = 'left-check-change'\nexport const RIGHT_CHECK_CHANGE_EVENT = 'right-check-change'\n\nexport const transferProps = buildProps({\n  data: {\n    type: definePropType<TransferDataItem[]>(Array),\n    default: () => [],\n  },\n  titles: {\n    type: definePropType<[string, string]>(Array),\n    default: () => [],\n  },\n  buttonTexts: {\n    type: definePropType<[string, string]>(Array),\n    default: () => [],\n  },\n  filterPlaceholder: String,\n  filterMethod: {\n    type: definePropType<(query: string, item: TransferDataItem) => boolean>(\n      Function\n    ),\n  },\n  leftDefaultChecked: {\n    type: definePropType<TransferKey[]>(Array),\n    default: () => [],\n  },\n  rightDefaultChecked: {\n    type: definePropType<TransferKey[]>(Array),\n    default: () => [],\n  },\n  renderContent: {\n    type: definePropType<renderContent>(Function),\n  },\n  modelValue: {\n    type: definePropType<TransferKey[]>(Array),\n    default: () => [],\n  },\n  format: {\n    type: definePropType<TransferFormat>(Object),\n    default: () => ({}),\n  },\n  filterable: Boolean,\n  props: {\n    type: definePropType<TransferPropsAlias>(Object),\n    default: () =>\n      mutable({\n        label: 'label',\n        key: 'key',\n        disabled: 'disabled',\n      } as const),\n  },\n  targetOrder: {\n    type: String,\n    values: ['original', 'push', 'unshift'],\n    default: 'original',\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n} as const)\nexport type TransferProps = ExtractPropTypes<typeof transferProps>\n\nexport const transferCheckedChangeFn = (\n  value: TransferKey[],\n  movedKeys?: TransferKey[]\n) => [value, movedKeys].every(isArray) || (isArray(value) && isNil(movedKeys))\n\nexport const transferEmits = {\n  [CHANGE_EVENT]: (\n    value: TransferKey[],\n    direction: TransferDirection,\n    movedKeys: TransferKey[]\n  ) =>\n    [value, movedKeys].every(isArray) && ['left', 'right'].includes(direction),\n  [UPDATE_MODEL_EVENT]: (value: TransferKey[]) => isArray(value),\n  [LEFT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn,\n  [RIGHT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn,\n}\nexport type TransferEmits = typeof transferEmits\n\nexport type TransferInstance = InstanceType<typeof Transfer>\n"]},"metadata":{},"sourceType":"module"}