{"ast":null,"code":"import { NOOP, isString, isObject } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../tooltip/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { useTooltipContentProps } from '../../tooltip/src/tooltip.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nconst autocompleteProps = buildProps({\n  valueKey: {\n    type: String,\n    default: \"value\"\n  },\n  modelValue: {\n    type: [String, Number],\n    default: \"\"\n  },\n  debounce: {\n    type: Number,\n    default: 300\n  },\n  placement: {\n    type: definePropType(String),\n    values: [\"top\", \"top-start\", \"top-end\", \"bottom\", \"bottom-start\", \"bottom-end\"],\n    default: \"bottom-start\"\n  },\n  fetchSuggestions: {\n    type: definePropType([Function, Array]),\n    default: NOOP\n  },\n  popperClass: {\n    type: String,\n    default: \"\"\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    default: true\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    default: false\n  },\n  hideLoading: {\n    type: Boolean,\n    default: false\n  },\n  label: {\n    type: String\n  },\n  teleported: useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    default: false\n  },\n  fitInputWidth: {\n    type: Boolean,\n    default: false\n  }\n});\nconst autocompleteEmits = {\n  [UPDATE_MODEL_EVENT]: value => isString(value),\n  [INPUT_EVENT]: value => isString(value),\n  [CHANGE_EVENT]: value => isString(value),\n  focus: evt => evt instanceof FocusEvent,\n  blur: evt => evt instanceof FocusEvent,\n  clear: () => true,\n  select: item => isObject(item)\n};\nexport { autocompleteEmits, autocompleteProps };","map":{"version":3,"mappings":";;;;;;;AAaY,MAACA,iBAAiB,GAAGC,UAAU,CAAC;EAC1CC,QAAQ,EAAE;IACRC,IAAI,EAAEC,MADE;IAERC,OAAO,EAAE;EAFD,CADgC;EAK1CC,UAAU,EAAE;IACVH,IAAI,EAAE,CAACC,MAAD,EAASG,MAAT,CADI;IAEVF,OAAO,EAAE;EAFC,CAL8B;EAS1CG,QAAQ,EAAE;IACRL,IAAI,EAAEI,MADE;IAERF,OAAO,EAAE;EAFD,CATgC;EAa1CI,SAAS,EAAE;IACTN,IAAI,EAAEO,cAAc,CAACN,MAAD,CADX;IAETO,MAAM,EAAE,CACN,KADM,EAEN,WAFM,EAGN,SAHM,EAIN,QAJM,EAKN,cALM,EAMN,YANM,CAFC;IAUTN,OAAO,EAAE;EAVA,CAb+B;EAyB1CO,gBAAgB,EAAE;IAChBT,IAAI,EAAEO,cAAc,CAAC,CAACG,QAAD,EAAWC,KAAX,CAAD,CADJ;IAEhBT,OAAO,EAAEU;EAFO,CAzBwB;EA6B1CC,WAAW,EAAE;IACXb,IAAI,EAAEC,MADK;IAEXC,OAAO,EAAE;EAFE,CA7B6B;EAiC1CY,cAAc,EAAE;IACdd,IAAI,EAAEe,OADQ;IAEdb,OAAO,EAAE;EAFK,CAjC0B;EAqC1Cc,mBAAmB,EAAE;IACnBhB,IAAI,EAAEe,OADa;IAEnBb,OAAO,EAAE;EAFU,CArCqB;EAyC1Ce,WAAW,EAAE;IACXjB,IAAI,EAAEe,OADK;IAEXb,OAAO,EAAE;EAFE,CAzC6B;EA6C1CgB,KAAK,EAAE;IACLlB,IAAI,EAAEC;EADD,CA7CmC;EAgD1CkB,UAAU,EAAEC,sBAAsB,CAACD,UAhDO;EAiD1CE,kBAAkB,EAAE;IAClBrB,IAAI,EAAEe,OADY;IAElBb,OAAO,EAAE;EAFS,CAjDsB;EAqD1CoB,aAAa,EAAE;IACbtB,IAAI,EAAEe,OADO;IAEbb,OAAO,EAAE;EAFI;AArD2B,CAAD,CAA/B;AA0DA,MAACqB,iBAAiB,GAAG;EAC/B,CAACC,kBAAD,GAAuBC,KAAD,IAAWC,QAAQ,CAACD,KAAD,CADV;EAE/B,CAACE,WAAD,GAAgBF,KAAD,IAAWC,QAAQ,CAACD,KAAD,CAFH;EAG/B,CAACG,YAAD,GAAiBH,KAAD,IAAWC,QAAQ,CAACD,KAAD,CAHJ;EAI/BI,KAAK,EAAGC,GAAD,IAASA,GAAG,YAAYC,UAJA;EAK/BC,IAAI,EAAGF,GAAD,IAASA,GAAG,YAAYC,UALC;EAM/BE,KAAK,EAAE,MAAM,IANkB;EAO/BC,MAAM,EAAGC,IAAD,IAAUC,QAAQ,CAACD,IAAD;AAPK,CAArB","names":["autocompleteProps","buildProps","valueKey","type","String","default","modelValue","Number","debounce","placement","definePropType","values","fetchSuggestions","Function","Array","NOOP","popperClass","triggerOnFocus","Boolean","selectWhenUnmatched","hideLoading","label","teleported","useTooltipContentProps","highlightFirstItem","fitInputWidth","autocompleteEmits","UPDATE_MODEL_EVENT","value","isString","INPUT_EVENT","CHANGE_EVENT","focus","evt","FocusEvent","blur","clear","select","item","isObject"],"sources":["../../../../../../packages/components/autocomplete/src/autocomplete.ts"],"sourcesContent":["import { NOOP } from '@vue/shared'\nimport {\n  buildProps,\n  definePropType,\n  isObject,\n  isString,\n} from '@element-plus/utils'\nimport { useTooltipContentProps } from '@element-plus/components/tooltip'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type Autocomplete from './autocomplete.vue'\nimport type { Placement } from '@element-plus/components/popper'\nimport type { Awaitable } from '@element-plus/utils'\n\nexport type AutocompleteData = Record<string, any>[]\nexport type AutocompleteFetchSuggestionsCallback = (\n  data: AutocompleteData\n) => void\nexport type AutocompleteFetchSuggestions =\n  | ((\n      queryString: string,\n      cb: AutocompleteFetchSuggestionsCallback\n    ) => Awaitable<AutocompleteData> | void)\n  | AutocompleteData\n\nexport const autocompleteProps = buildProps({\n  valueKey: {\n    type: String,\n    default: 'value',\n  },\n  modelValue: {\n    type: [String, Number],\n    default: '',\n  },\n  debounce: {\n    type: Number,\n    default: 300,\n  },\n  placement: {\n    type: definePropType<Placement>(String),\n    values: [\n      'top',\n      'top-start',\n      'top-end',\n      'bottom',\n      'bottom-start',\n      'bottom-end',\n    ],\n    default: 'bottom-start',\n  },\n  fetchSuggestions: {\n    type: definePropType<AutocompleteFetchSuggestions>([Function, Array]),\n    default: NOOP,\n  },\n  popperClass: {\n    type: String,\n    default: '',\n  },\n  triggerOnFocus: {\n    type: Boolean,\n    default: true,\n  },\n  selectWhenUnmatched: {\n    type: Boolean,\n    default: false,\n  },\n  hideLoading: {\n    type: Boolean,\n    default: false,\n  },\n  label: {\n    type: String,\n  },\n  teleported: useTooltipContentProps.teleported,\n  highlightFirstItem: {\n    type: Boolean,\n    default: false,\n  },\n  fitInputWidth: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\nexport type AutocompleteProps = ExtractPropTypes<typeof autocompleteProps>\n\nexport const autocompleteEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  [INPUT_EVENT]: (value: string) => isString(value),\n  [CHANGE_EVENT]: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  select: (item: { value: any }) => isObject(item),\n}\nexport type AutocompleteEmits = typeof autocompleteEmits\n\nexport type AutocompleteInstance = InstanceType<typeof Autocomplete>\n"]},"metadata":{},"sourceType":"module"}