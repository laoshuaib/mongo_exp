{"ast":null,"code":"import { defineComponent, inject, ref, nextTick, onMounted, onBeforeUnmount, onUpdated, watch, computed, createVNode, Fragment } from 'vue';\nimport { useResizeObserver } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst COMPONENT_NAME = \"ElLabelWrap\";\nvar FormLabelWrap = defineComponent({\n  name: COMPONENT_NAME,\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean\n  },\n\n  setup(props, {\n    slots\n  }) {\n    const formContext = inject(formContextKey, void 0);\n    const formItemContext = inject(formItemContextKey);\n    if (!formItemContext) throwError(COMPONENT_NAME, \"usage: <el-form-item><label-wrap /></el-form-item>\");\n    const ns = useNamespace(\"form\");\n    const el = ref();\n    const computedWidth = ref(0);\n\n    const getLabelWidth = () => {\n      var _a;\n\n      if ((_a = el.value) == null ? void 0 : _a.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width;\n        return Math.ceil(Number.parseFloat(width));\n      } else {\n        return 0;\n      }\n    };\n\n    const updateLabelWidth = (action = \"update\") => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === \"update\") {\n            computedWidth.value = getLabelWidth();\n          } else if (action === \"remove\") {\n            formContext == null ? void 0 : formContext.deregisterLabelWidth(computedWidth.value);\n          }\n        }\n      });\n    };\n\n    const updateLabelWidthFn = () => updateLabelWidth(\"update\");\n\n    onMounted(() => {\n      updateLabelWidthFn();\n    });\n    onBeforeUnmount(() => {\n      updateLabelWidth(\"remove\");\n    });\n    onUpdated(() => updateLabelWidthFn());\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        formContext == null ? void 0 : formContext.registerLabelWidth(val, oldVal);\n      }\n    });\n    useResizeObserver(computed(() => {\n      var _a, _b;\n\n      return (_b = (_a = el.value) == null ? void 0 : _a.firstElementChild) != null ? _b : null;\n    }), updateLabelWidthFn);\n    return () => {\n      var _a, _b;\n\n      if (!slots) return null;\n      const {\n        isAutoWidth\n      } = props;\n\n      if (isAutoWidth) {\n        const autoLabelWidth = formContext == null ? void 0 : formContext.autoLabelWidth;\n        const style = {};\n\n        if (autoLabelWidth && autoLabelWidth !== \"auto\") {\n          const marginWidth = Math.max(0, Number.parseInt(autoLabelWidth, 10) - computedWidth.value);\n          const marginPosition = formContext.labelPosition === \"left\" ? \"marginRight\" : \"marginLeft\";\n\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`;\n          }\n        }\n\n        return createVNode(\"div\", {\n          \"ref\": el,\n          \"class\": [ns.be(\"item\", \"label-wrap\")],\n          \"style\": style\n        }, [(_a = slots.default) == null ? void 0 : _a.call(slots)]);\n      } else {\n        return createVNode(Fragment, {\n          \"ref\": el\n        }, [(_b = slots.default) == null ? void 0 : _b.call(slots)]);\n      }\n    };\n  }\n\n});\nexport { FormLabelWrap as default };","map":{"version":3,"mappings":";;;;;;;;AAmBA,MAAMA,cAAc,GAAG,aAAvB;AACA,oBAAeC,eAAe,CAAC;EAC7BC,IAAI,EAAEF,cADuB;EAE7BG,KAAK,EAAE;IACLC,WAAW,EAAEC,OADR;IAELC,SAAS,EAAED;EAFN,CAFsB;;;IAOxBE;KAAUA;IAAS;IACtB,MAAMC,eAAcC,SAAM,oBAA1B;IACA,sBACIC,2BACFA,oDADE;IAMJ,MAAMC,EAAE,GAAGC,YAAY,CAAC,MAAD,CAAvB;IAEA,MAAMC,EAAE,GAAGC,GAAG,EAAd;IACA,MAAMC,aAAa,GAAGD,GAAG,CAAC,CAAD,CAAzB;;;MAEME;;MACJ,IAAIH,CAAEI,EAACC,GAAHL,yBAA6B,CAA7BA,GAA6BI,oBAAjC,EAAiC;QAC/B,MAAME,KAAK,GAAGC,MAAM,CAACC,gBAAPD,CAAwBP,EAAE,CAACK,KAAHL,CAASS,iBAAjCF,EAAoDD,KAAlE;QACA,OAAOI,IAAI,CAACC,IAALD,CAAUE,MAAM,CAACC,UAAPD,CAAkBN,KAAlBM,CAAVF,CAAP;MAFF,OAGO;QACL,OAAO,CAAP;MACD;IANH;;;MASAI;QACEA,SAAe,QAAfA,IAAexB,iBAAfwB,EAAe;UACb,UAAUC,KAAN,QAAJ,EAA2BxB;YACrByB,aAAW,MAAXA,GAAqBb,eAArBa;UACFd,CAFJ,MAEIA,UAAcG,KAAQF,QAAtBD,EAAsBC;YACjBR,WAAU,QAAV,GAAU,MAAV,GAAyBA,qDAAzB;UACLA;QACD;MACF,CARL;IASG;;IACF,MAVDsB,qDAUC;;;MACDA;;IAEAC,eAAgB;MACdD,gBAAkB,UAAlBA;IADO,CAAO,CAAhBC;IAGAC,gBAAgBF,kBAAM,EAAtBE;SACkB,gBAAC,MAADC,MAAC,KAAjB;MADF;QAGAC,WAAU,IAAwB,IAAlCA,GAAkC,MAAlCA,GAAkC1B,WAAlC,mBAAkC,CAAlC2B,GAAkC,EAAlCF,MAAkC,CAAlCC;MAEAE;KAJkB;IAMd5B,iBAAa6B;MACd;;MAHH;IAMAC,CAJiBD,GAIjBC,kBAJiBD,CAAb7B;IAWJ,OAAO,MAAM;MACX,IAAIS,EAAJ,EAAKV,EAAL;;MAEA,IAAM,MAAN,EAAQH;MAAF,MAAN;;MAAA,IACIA,KADE;;MAEJ,iBAAoB;QACpB,MAAMmC,cAAN;;;QACA,IAAIC,cAAc,IAAIA,cAAc,KAAK,MAAzC,EAAiD;UAC/C,MAAMC,WAAW,GAAGlB,IAAI,CAACmB,GAALnB,CAClB,CADkBA,EAElBE,MAAM,CAACkB,QAAPlB,CAAgBe,cAAhBf,EAAgC,EAAhCA,IAAsCV,aAAa,CAACG,KAFlCK,CAApB;UAIA,MAAMqB,cAAc,GAClBpC,WAAW,CAACqC,aAAZrC,KAA8B,MAA9BA,GAAuC,aAAvCA,GAAuD,YADzD;;;YAEA+B,wBAAiB,kBAAjB;UACEA;QACD;;QACF;mBAAA;UACD,sCADC;UACD;QADC,GAEsB,YAAIO,QAAJ,KAAC,IAAD,GAAC,KADxB,CACuB,GADvB7B,cACuB,CAFtB;OAZD,MAc6DsB;QAD7D,OAEKhC,WAFL;UAKK;QALL,GAMA,wDANA;;KAlBJ;EAyBG;;AAzFwB,CAAD,CAA9B","names":["COMPONENT_NAME","defineComponent","name","props","isAutoWidth","Boolean","updateAll","slots","formContext","inject","throwError","ns","useNamespace","el","ref","computedWidth","getLabelWidth","_a","value","width","window","getComputedStyle","firstElementChild","Math","ceil","Number","parseFloat","nextTick","default","action","updateLabelWidthFn","onMounted","onBeforeUnmount","oldVal","onUpdated","val","watch","registerLabelWidth","useResizeObserver","style","autoLabelWidth","marginWidth","max","parseInt","marginPosition","labelPosition","be"],"sources":["../../../../../../packages/components/form/src/form-label-wrap.tsx"],"sourcesContent":["import {\n  Fragment,\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\nimport { throwError } from '@element-plus/utils'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElLabelWrap'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: {\n    isAutoWidth: Boolean,\n    updateAll: Boolean,\n  },\n\n  setup(props, { slots }) {\n    const formContext = inject(formContextKey, undefined)\n    const formItemContext = inject(formItemContextKey)\n    if (!formItemContext)\n      throwError(\n        COMPONENT_NAME,\n        'usage: <el-form-item><label-wrap /></el-form-item>'\n      )\n\n    const ns = useNamespace('form')\n\n    const el = ref<HTMLElement>()\n    const computedWidth = ref(0)\n\n    const getLabelWidth = () => {\n      if (el.value?.firstElementChild) {\n        const width = window.getComputedStyle(el.value.firstElementChild).width\n        return Math.ceil(Number.parseFloat(width))\n      } else {\n        return 0\n      }\n    }\n\n    const updateLabelWidth = (action: 'update' | 'remove' = 'update') => {\n      nextTick(() => {\n        if (slots.default && props.isAutoWidth) {\n          if (action === 'update') {\n            computedWidth.value = getLabelWidth()\n          } else if (action === 'remove') {\n            formContext?.deregisterLabelWidth(computedWidth.value)\n          }\n        }\n      })\n    }\n    const updateLabelWidthFn = () => updateLabelWidth('update')\n\n    onMounted(() => {\n      updateLabelWidthFn()\n    })\n    onBeforeUnmount(() => {\n      updateLabelWidth('remove')\n    })\n    onUpdated(() => updateLabelWidthFn())\n\n    watch(computedWidth, (val, oldVal) => {\n      if (props.updateAll) {\n        formContext?.registerLabelWidth(val, oldVal)\n      }\n    })\n\n    useResizeObserver(\n      computed(\n        () => (el.value?.firstElementChild ?? null) as HTMLElement | null\n      ),\n      updateLabelWidthFn\n    )\n\n    return () => {\n      if (!slots) return null\n\n      const { isAutoWidth } = props\n      if (isAutoWidth) {\n        const autoLabelWidth = formContext?.autoLabelWidth\n        const style: CSSProperties = {}\n        if (autoLabelWidth && autoLabelWidth !== 'auto') {\n          const marginWidth = Math.max(\n            0,\n            Number.parseInt(autoLabelWidth, 10) - computedWidth.value\n          )\n          const marginPosition =\n            formContext.labelPosition === 'left' ? 'marginRight' : 'marginLeft'\n          if (marginWidth) {\n            style[marginPosition] = `${marginWidth}px`\n          }\n        }\n        return (\n          <div ref={el} class={[ns.be('item', 'label-wrap')]} style={style}>\n            {slots.default?.()}\n          </div>\n        )\n      } else {\n        return <Fragment ref={el}>{slots.default?.()}</Fragment>\n      }\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}