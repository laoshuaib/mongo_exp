{"ast":null,"code":"var defaultProps = {\n  data: {\n    type: Array,\n    default: () => []\n  },\n  size: String,\n  width: [String, Number],\n  height: [String, Number],\n  maxHeight: [String, Number],\n  fit: {\n    type: Boolean,\n    default: true\n  },\n  stripe: Boolean,\n  border: Boolean,\n  rowKey: [String, Function],\n  showHeader: {\n    type: Boolean,\n    default: true\n  },\n  showSummary: Boolean,\n  sumText: String,\n  summaryMethod: Function,\n  rowClassName: [String, Function],\n  rowStyle: [Object, Function],\n  cellClassName: [String, Function],\n  cellStyle: [Object, Function],\n  headerRowClassName: [String, Function],\n  headerRowStyle: [Object, Function],\n  headerCellClassName: [String, Function],\n  headerCellStyle: [Object, Function],\n  highlightCurrentRow: Boolean,\n  currentRowKey: [String, Number],\n  emptyText: String,\n  expandRowKeys: Array,\n  defaultExpandAll: Boolean,\n  defaultSort: Object,\n  tooltipEffect: String,\n  spanMethod: Function,\n  selectOnIndeterminate: {\n    type: Boolean,\n    default: true\n  },\n  indent: {\n    type: Number,\n    default: 16\n  },\n  treeProps: {\n    type: Object,\n    default: () => {\n      return {\n        hasChildren: \"hasChildren\",\n        children: \"children\"\n      };\n    }\n  },\n  lazy: Boolean,\n  load: Function,\n  style: {\n    type: Object,\n    default: () => ({})\n  },\n  className: {\n    type: String,\n    default: \"\"\n  },\n  tableLayout: {\n    type: String,\n    default: \"fixed\"\n  },\n  scrollbarAlwaysOn: {\n    type: Boolean,\n    default: false\n  },\n  flexible: Boolean\n};\nexport { defaultProps as default };","map":{"version":3,"mappings":"AAAA,mBAAe;EACbA,IAAI,EAAE;IACJC,IAAI,EAAEC,KADF;IAEJC,OAAO,EAAE,MAAM;EAFX,CADO;EAKbC,IAAI,EAAEC,MALO;EAMbC,KAAK,EAAE,CAACD,MAAD,EAASE,MAAT,CANM;EAObC,MAAM,EAAE,CAACH,MAAD,EAASE,MAAT,CAPK;EAQbE,SAAS,EAAE,CAACJ,MAAD,EAASE,MAAT,CARE;EASbG,GAAG,EAAE;IACHT,IAAI,EAAEU,OADH;IAEHR,OAAO,EAAE;EAFN,CATQ;EAabS,MAAM,EAAED,OAbK;EAcbE,MAAM,EAAEF,OAdK;EAebG,MAAM,EAAE,CAACT,MAAD,EAASU,QAAT,CAfK;EAgBbC,UAAU,EAAE;IACVf,IAAI,EAAEU,OADI;IAEVR,OAAO,EAAE;EAFC,CAhBC;EAoBbc,WAAW,EAAEN,OApBA;EAqBbO,OAAO,EAAEb,MArBI;EAsBbc,aAAa,EAAEJ,QAtBF;EAuBbK,YAAY,EAAE,CAACf,MAAD,EAASU,QAAT,CAvBD;EAwBbM,QAAQ,EAAE,CAACC,MAAD,EAASP,QAAT,CAxBG;EAyBbQ,aAAa,EAAE,CAAClB,MAAD,EAASU,QAAT,CAzBF;EA0BbS,SAAS,EAAE,CAACF,MAAD,EAASP,QAAT,CA1BE;EA2BbU,kBAAkB,EAAE,CAACpB,MAAD,EAASU,QAAT,CA3BP;EA4BbW,cAAc,EAAE,CAACJ,MAAD,EAASP,QAAT,CA5BH;EA6BbY,mBAAmB,EAAE,CAACtB,MAAD,EAASU,QAAT,CA7BR;EA8Bba,eAAe,EAAE,CAACN,MAAD,EAASP,QAAT,CA9BJ;EA+Bbc,mBAAmB,EAAElB,OA/BR;EAgCbmB,aAAa,EAAE,CAACzB,MAAD,EAASE,MAAT,CAhCF;EAiCbwB,SAAS,EAAE1B,MAjCE;EAkCb2B,aAAa,EAAE9B,KAlCF;EAmCb+B,gBAAgB,EAAEtB,OAnCL;EAoCbuB,WAAW,EAAEZ,MApCA;EAqCba,aAAa,EAAE9B,MArCF;EAsCb+B,UAAU,EAAErB,QAtCC;EAuCbsB,qBAAqB,EAAE;IACrBpC,IAAI,EAAEU,OADe;IAErBR,OAAO,EAAE;EAFY,CAvCV;EA2CbmC,MAAM,EAAE;IACNrC,IAAI,EAAEM,MADA;IAENJ,OAAO,EAAE;EAFH,CA3CK;EA+CboC,SAAS,EAAE;IACTtC,IAAI,EAAEqB,MADG;IAETnB,OAAO,EAAE,MAAM;MACb,OAAO;QACLqC,WAAW,EAAE,aADR;QAELC,QAAQ,EAAE;MAFL,CAAP;IAID;EAPQ,CA/CE;EAwDbC,IAAI,EAAE/B,OAxDO;EAyDbgC,IAAI,EAAE5B,QAzDO;EA0Db6B,KAAK,EAAE;IACL3C,IAAI,EAAEqB,MADD;IAELnB,OAAO,EAAE,OAAO,EAAP;EAFJ,CA1DM;EA8Db0C,SAAS,EAAE;IACT5C,IAAI,EAAEI,MADG;IAETF,OAAO,EAAE;EAFA,CA9DE;EAkEb2C,WAAW,EAAE;IACX7C,IAAI,EAAEI,MADK;IAEXF,OAAO,EAAE;EAFE,CAlEA;EAsEb4C,iBAAiB,EAAE;IACjB9C,IAAI,EAAEU,OADW;IAEjBR,OAAO,EAAE;EAFQ,CAtEN;EA0Eb6C,QAAQ,EAAErC;AA1EG,CAAf","names":["data","type","Array","default","size","String","width","Number","height","maxHeight","fit","Boolean","stripe","border","rowKey","Function","showHeader","showSummary","sumText","summaryMethod","rowClassName","rowStyle","Object","cellClassName","cellStyle","headerRowClassName","headerRowStyle","headerCellClassName","headerCellStyle","highlightCurrentRow","currentRowKey","emptyText","expandRowKeys","defaultExpandAll","defaultSort","tooltipEffect","spanMethod","selectOnIndeterminate","indent","treeProps","hasChildren","children","lazy","load","style","className","tableLayout","scrollbarAlwaysOn","flexible"],"sources":["../../../../../../../packages/components/table/src/table/defaults.ts"],"sourcesContent":["// @ts-nocheck\nimport type {\n  CSSProperties,\n  ComponentInternalInstance,\n  PropType,\n  Ref,\n  VNode,\n} from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { Store } from '../store'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type TableLayout from '../table-layout'\n\nexport type DefaultRow = any\n\ninterface TableRefs {\n  tableWrapper: HTMLElement\n  headerWrapper: HTMLElement\n  footerWrapper: HTMLElement\n  fixedBodyWrapper: HTMLElement\n  rightFixedBodyWrapper: HTMLElement\n  bodyWrapper: HTMLElement\n  [key: string]: any\n}\n\ninterface TableState {\n  isGroup: Ref<boolean>\n  resizeState: Ref<{\n    width: any\n    height: any\n  }>\n  doLayout: () => void\n  debouncedUpdateLayout: () => void\n}\n\ntype HoverState<T> = Nullable<{\n  cell: HTMLElement\n  column: TableColumnCtx<T>\n  row: T\n}>\n\ntype RIS<T> = { row: T; $index: number; store: Store<T>; expanded: boolean }\n\ntype RenderExpanded<T> = ({\n  row,\n  $index,\n  store,\n  expanded: boolean,\n}: RIS<T>) => VNode\n\ntype SummaryMethod<T> = (data: {\n  columns: TableColumnCtx<T>[]\n  data: T[]\n}) => string[]\n\ninterface Table<T> extends ComponentInternalInstance {\n  $ready: boolean\n  hoverState?: HoverState<T>\n  renderExpanded: RenderExpanded<T>\n  store: Store<T>\n  layout: TableLayout<T>\n  refs: TableRefs\n  tableId: string\n  state: TableState\n}\n\ntype ColumnCls<T> = string | ((data: { row: T; rowIndex: number }) => string)\ntype ColumnStyle<T> =\n  | CSSProperties\n  | ((data: { row: T; rowIndex: number }) => CSSProperties)\ntype CellCls<T> =\n  | string\n  | ((data: {\n      row: T\n      rowIndex: number\n      column: TableColumnCtx<T>\n      columnIndex: number\n    }) => string)\ntype CellStyle<T> =\n  | CSSProperties\n  | ((data: {\n      row: T\n      rowIndex: number\n      column: TableColumnCtx<T>\n      columnIndex: number\n    }) => CSSProperties)\ntype Layout = 'fixed' | 'auto'\ninterface TableProps<T> {\n  data: T[]\n  size?: string\n  width?: string | number\n  height?: string | number\n  maxHeight?: string | number\n  fit?: boolean\n  stripe?: boolean\n  border?: boolean\n  rowKey?: string | ((row: T) => string)\n  context?: Table<T>\n  showHeader?: boolean\n  showSummary?: boolean\n  sumText?: string\n  summaryMethod?: SummaryMethod<T>\n  rowClassName?: ColumnCls<T>\n  rowStyle?: ColumnStyle<T>\n  cellClassName?: CellCls<T>\n  cellStyle?: CellStyle<T>\n  headerRowClassName?: ColumnCls<T>\n  headerRowStyle?: ColumnStyle<T>\n  headerCellClassName?: CellCls<T>\n  headerCellStyle?: CellStyle<T>\n  highlightCurrentRow?: boolean\n  currentRowKey?: string | number\n  emptyText?: string\n  expandRowKeys?: any[]\n  defaultExpandAll?: boolean\n  defaultSort?: Sort\n  tooltipEffect?: string\n  spanMethod?: (data: {\n    row: T\n    rowIndex: number\n    column: TableColumnCtx<T>\n    columnIndex: number\n  }) =>\n    | number[]\n    | {\n        rowspan: number\n        colspan: number\n      }\n    | undefined\n  selectOnIndeterminate?: boolean\n  indent?: number\n  treeProps?: {\n    hasChildren?: string\n    children?: string\n  }\n  lazy?: boolean\n  load?: (row: T, treeNode: TreeNode, resolve: (data: T[]) => void) => void\n  className?: string\n  style?: CSSProperties\n  tableLayout: Layout\n  flexible: boolean\n}\n\ninterface Sort {\n  prop: string\n  order: 'ascending' | 'descending'\n  init?: any\n  silent?: any\n}\n\ninterface Filter<T> {\n  column: TableColumnCtx<T>\n  values: string[]\n  silent: any\n}\n\ninterface TreeNode {\n  expanded?: boolean\n  loading?: boolean\n  noLazyChildren?: boolean\n  indent?: number\n  level?: number\n  display?: boolean\n}\n\ninterface RenderRowData<T> {\n  store: Store<T>\n  _self: Table<T>\n  column: TableColumnCtx<T>\n  row: T\n  $index: number\n  treeNode?: TreeNode\n  expanded: boolean\n}\n\nexport default {\n  data: {\n    type: Array as PropType<DefaultRow[]>,\n    default: () => [],\n  },\n  size: String,\n  width: [String, Number],\n  height: [String, Number],\n  maxHeight: [String, Number],\n  fit: {\n    type: Boolean,\n    default: true,\n  },\n  stripe: Boolean,\n  border: Boolean,\n  rowKey: [String, Function] as PropType<TableProps<DefaultRow>['rowKey']>,\n  showHeader: {\n    type: Boolean,\n    default: true,\n  },\n  showSummary: Boolean,\n  sumText: String,\n  summaryMethod: Function as PropType<TableProps<DefaultRow>['summaryMethod']>,\n  rowClassName: [String, Function] as PropType<\n    TableProps<DefaultRow>['rowClassName']\n  >,\n  rowStyle: [Object, Function] as PropType<TableProps<DefaultRow>['rowStyle']>,\n  cellClassName: [String, Function] as PropType<\n    TableProps<DefaultRow>['cellClassName']\n  >,\n  cellStyle: [Object, Function] as PropType<\n    TableProps<DefaultRow>['cellStyle']\n  >,\n  headerRowClassName: [String, Function] as PropType<\n    TableProps<DefaultRow>['headerRowClassName']\n  >,\n  headerRowStyle: [Object, Function] as PropType<\n    TableProps<DefaultRow>['headerRowStyle']\n  >,\n  headerCellClassName: [String, Function] as PropType<\n    TableProps<DefaultRow>['headerCellClassName']\n  >,\n  headerCellStyle: [Object, Function] as PropType<\n    TableProps<DefaultRow>['headerCellStyle']\n  >,\n  highlightCurrentRow: Boolean,\n  currentRowKey: [String, Number],\n  emptyText: String,\n  expandRowKeys: Array as PropType<TableProps<DefaultRow>['expandRowKeys']>,\n  defaultExpandAll: Boolean,\n  defaultSort: Object as PropType<TableProps<DefaultRow>['defaultSort']>,\n  tooltipEffect: String,\n  spanMethod: Function as PropType<TableProps<DefaultRow>['spanMethod']>,\n  selectOnIndeterminate: {\n    type: Boolean,\n    default: true,\n  },\n  indent: {\n    type: Number,\n    default: 16,\n  },\n  treeProps: {\n    type: Object as PropType<TableProps<DefaultRow>['treeProps']>,\n    default: () => {\n      return {\n        hasChildren: 'hasChildren',\n        children: 'children',\n      }\n    },\n  },\n  lazy: Boolean,\n  load: Function as PropType<TableProps<DefaultRow>['load']>,\n  style: {\n    type: Object as PropType<CSSProperties>,\n    default: () => ({}),\n  },\n  className: {\n    type: String,\n    default: '',\n  },\n  tableLayout: {\n    type: String as PropType<Layout>,\n    default: 'fixed',\n  },\n  scrollbarAlwaysOn: {\n    type: Boolean,\n    default: false,\n  },\n  flexible: Boolean,\n}\nexport type {\n  SummaryMethod,\n  Table,\n  TableProps,\n  TableRefs,\n  ColumnCls,\n  ColumnStyle,\n  TreeNode,\n  RenderRowData,\n  Sort,\n  Filter,\n}\n"]},"metadata":{},"sourceType":"module"}