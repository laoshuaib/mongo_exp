{"ast":null,"code":"import { defineComponent, watch, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { useSizeProp } from '../../../hooks/use-common-props/index.mjs';\nimport { provideGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nconst messageConfig = {};\nconst configProviderProps = buildProps({\n  a11y: {\n    type: Boolean,\n    default: true\n  },\n  locale: {\n    type: definePropType(Object)\n  },\n  size: useSizeProp,\n  button: {\n    type: definePropType(Object)\n  },\n  experimentalFeatures: {\n    type: definePropType(Object)\n  },\n  keyboardNavigation: {\n    type: Boolean,\n    default: true\n  },\n  message: {\n    type: definePropType(Object)\n  },\n  zIndex: Number,\n  namespace: {\n    type: String,\n    default: \"el\"\n  }\n});\nconst ConfigProvider = defineComponent({\n  name: \"ElConfigProvider\",\n  props: configProviderProps,\n\n  setup(props, {\n    slots\n  }) {\n    watch(() => props.message, val => {\n      Object.assign(messageConfig, val != null ? val : {});\n    }, {\n      immediate: true,\n      deep: true\n    });\n    const config = provideGlobalConfig(props);\n    return () => renderSlot(slots, \"default\", {\n      config: config == null ? void 0 : config.value\n    });\n  }\n\n});\nexport { configProviderProps, ConfigProvider as default, messageConfig };","map":{"version":3,"mappings":";;;;;;AAGY,MAACA,aAAa,GAAG,EAAjB;AACA,MAACC,mBAAmB,GAAGC,UAAU,CAAC;EAC5CC,IAAI,EAAE;IACJC,IAAI,EAAEC,OADF;IAEJC,OAAO,EAAE;EAFL,CADsC;EAK5CC,MAAM,EAAE;IACNH,IAAI,EAAEI,cAAc,CAACC,MAAD;EADd,CALoC;EAQ5CC,IAAI,EAAEC,WARsC;EAS5CC,MAAM,EAAE;IACNR,IAAI,EAAEI,cAAc,CAACC,MAAD;EADd,CAToC;EAY5CI,oBAAoB,EAAE;IACpBT,IAAI,EAAEI,cAAc,CAACC,MAAD;EADA,CAZsB;EAe5CK,kBAAkB,EAAE;IAClBV,IAAI,EAAEC,OADY;IAElBC,OAAO,EAAE;EAFS,CAfwB;EAmB5CS,OAAO,EAAE;IACPX,IAAI,EAAEI,cAAc,CAACC,MAAD;EADb,CAnBmC;EAsB5CO,MAAM,EAAEC,MAtBoC;EAuB5CC,SAAS,EAAE;IACTd,IAAI,EAAEe,MADG;IAETb,OAAO,EAAE;EAFA;AAvBiC,CAAD,CAAjC;AA4BP,MAACc,cAAc,GAAGC,eAAe,CAAC;EACrCC,IAAI,EAAE,kBAD+B;EAErCC,KAAK,EAAEtB,mBAF8B;;EAGrCuB,KAAK,CAACD,KAAD,EAAQ;IAAEE;EAAF,CAAR,EAAmB;IACtBC,KAAK,CAAC,MAAMH,KAAK,CAACR,OAAb,EAAuBY,GAAD,IAAS;MAClClB,MAAM,CAACmB,MAAP,CAAc5B,aAAd,EAA6B2B,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,EAAjD;IACD,CAFI,EAEF;MAAEE,SAAS,EAAE,IAAb;MAAmBC,IAAI,EAAE;IAAzB,CAFE,CAAL;IAGA,MAAMC,MAAM,GAAGC,mBAAmB,CAACT,KAAD,CAAlC;IACA,OAAO,MAAMU,UAAU,CAACR,KAAD,EAAQ,SAAR,EAAmB;MAAEM,MAAM,EAAEA,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACG;IAA3C,CAAnB,CAAvB;EACD;;AAToC,CAAD,CAAjC","names":["messageConfig","configProviderProps","buildProps","a11y","type","Boolean","default","locale","definePropType","Object","size","useSizeProp","button","experimentalFeatures","keyboardNavigation","message","zIndex","Number","namespace","String","ConfigProvider","defineComponent","name","props","setup","slots","watch","val","assign","immediate","deep","config","provideGlobalConfig","renderSlot","value"],"sources":["../../../../../../packages/components/config-provider/src/config-provider.ts"],"sourcesContent":["import { defineComponent, renderSlot, watch } from 'vue'\nimport { buildProps, definePropType } from '@element-plus/utils'\nimport { provideGlobalConfig, useSizeProp } from '@element-plus/hooks'\n\nimport type { ExtractPropTypes } from 'vue'\nimport type { ExperimentalFeatures } from '@element-plus/tokens'\nimport type { Language } from '@element-plus/locale'\nimport type { ButtonConfigContext } from '@element-plus/components/button'\nimport type { MessageConfigContext } from '@element-plus/components/message'\n\nexport const messageConfig: MessageConfigContext = {}\n\nexport const configProviderProps = buildProps({\n  // Controlling if the users want a11y features.\n  a11y: {\n    type: Boolean,\n    default: true,\n  },\n\n  locale: {\n    type: definePropType<Language>(Object),\n  },\n\n  size: useSizeProp,\n\n  button: {\n    type: definePropType<ButtonConfigContext>(Object),\n  },\n\n  experimentalFeatures: {\n    type: definePropType<ExperimentalFeatures>(Object),\n  },\n\n  // Controls if we should handle keyboard navigation\n  keyboardNavigation: {\n    type: Boolean,\n    default: true,\n  },\n\n  message: {\n    type: definePropType<MessageConfigContext>(Object),\n  },\n\n  zIndex: Number,\n\n  namespace: {\n    type: String,\n    default: 'el',\n  },\n} as const)\nexport type ConfigProviderProps = ExtractPropTypes<typeof configProviderProps>\n\nconst ConfigProvider = defineComponent({\n  name: 'ElConfigProvider',\n  props: configProviderProps,\n\n  setup(props, { slots }) {\n    watch(\n      () => props.message,\n      (val) => {\n        Object.assign(messageConfig, val ?? {})\n      },\n      { immediate: true, deep: true }\n    )\n    const config = provideGlobalConfig(props)\n    return () => renderSlot(slots, 'default', { config: config?.value })\n  },\n})\nexport type ConfigProviderInstance = InstanceType<typeof ConfigProvider>\n\nexport default ConfigProvider\n"]},"metadata":{},"sourceType":"module"}