{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { warn } from 'vue';\nimport { fromPairs } from 'lodash-unified';\nimport '../../types.mjs';\nimport '../../objects.mjs';\nimport { isObject, hasOwn } from '@vue/shared';\nconst epPropKey = \"__epPropKey\";\n\nconst definePropType = val => val;\n\nconst isEpProp = val => isObject(val) && !!val[epPropKey];\n\nconst buildProp = (prop, key) => {\n  if (!isObject(prop) || isEpProp(prop)) return prop;\n  const {\n    values,\n    required,\n    default: defaultValue,\n    type,\n    validator\n  } = prop;\n\n  const _validator = values || validator ? val => {\n    let valid = false;\n    let allowedValues = [];\n\n    if (values) {\n      allowedValues = Array.from(values);\n\n      if (hasOwn(prop, \"default\")) {\n        allowedValues.push(defaultValue);\n      }\n\n      valid || (valid = allowedValues.includes(val));\n    }\n\n    if (validator) valid || (valid = validator(val));\n\n    if (!valid && allowedValues.length > 0) {\n      const allowValuesText = [...new Set(allowedValues)].map(value => JSON.stringify(value)).join(\", \");\n      warn(`Invalid prop: validation failed${key ? ` for prop \"${key}\"` : \"\"}. Expected one of [${allowValuesText}], got value ${JSON.stringify(val)}.`);\n    }\n\n    return valid;\n  } : void 0;\n\n  const epProp = {\n    type,\n    required: !!required,\n    validator: _validator,\n    [epPropKey]: true\n  };\n  if (hasOwn(prop, \"default\")) epProp.default = defaultValue;\n  return epProp;\n};\n\nconst buildProps = props => fromPairs(Object.entries(props).map(([key, option]) => [key, buildProp(option, key)]));\n\nexport { buildProp, buildProps, definePropType, epPropKey, isEpProp };","map":{"version":3,"mappings":";;;;;;AAIY,MAACA,SAAS,GAAG,aAAb;;AACA,MAACC,cAAc,GAAIC,GAAD,IAASA,GAA3B;;AACA,MAACC,QAAQ,GAAID,GAAD,IAASE,QAAQ,CAACF,GAAD,CAAR,IAAiB,CAAC,CAACA,GAAG,CAACF,SAAD,CAA3C;;AACA,MAACK,SAAS,GAAG,CAACC,IAAD,EAAOC,GAAP,KAAe;EACtC,IAAI,CAACH,QAAQ,CAACE,IAAD,CAAT,IAAmBH,QAAQ,CAACG,IAAD,CAA/B,EACE,OAAOA,IAAP;EACF,MAAM;IAAEE,MAAF;IAAUC,QAAV;IAAoBC,OAAO,EAAEC,YAA7B;IAA2CC,IAA3C;IAAiDC;EAAjD,IAA+DP,IAArE;;EACA,MAAMQ,UAAU,GAAGN,MAAM,IAAIK,SAAV,GAAuBX,GAAD,IAAS;IAChD,IAAIa,KAAK,GAAG,KAAZ;IACA,IAAIC,aAAa,GAAG,EAApB;;IACA,IAAIR,MAAJ,EAAY;MACVQ,aAAa,GAAGC,KAAK,CAACC,IAAN,CAAWV,MAAX,CAAhB;;MACA,IAAIW,MAAM,CAACb,IAAD,EAAO,SAAP,CAAV,EAA6B;QAC3BU,aAAa,CAACI,IAAd,CAAmBT,YAAnB;MACD;;MACDI,KAAK,KAAKA,KAAK,GAAGC,aAAa,CAACK,QAAd,CAAuBnB,GAAvB,CAAb,CAAL;IACD;;IACD,IAAIW,SAAJ,EACEE,KAAK,KAAKA,KAAK,GAAGF,SAAS,CAACX,GAAD,CAAtB,CAAL;;IACF,IAAI,CAACa,KAAD,IAAUC,aAAa,CAACM,MAAd,GAAuB,CAArC,EAAwC;MACtC,MAAMC,eAAe,GAAG,CAAC,GAAG,IAAIC,GAAJ,CAAQR,aAAR,CAAJ,EAA4BS,GAA5B,CAAiCC,KAAD,IAAWC,IAAI,CAACC,SAAL,CAAeF,KAAf,CAA3C,EAAkEG,IAAlE,CAAuE,IAAvE,CAAxB;MACAC,IAAI,CAAE,kCAAiCvB,GAAG,GAAI,cAAaA,GAAI,GAArB,GAA0B,EAAG,sBAAqBgB,eAAgB,gBAAeI,IAAI,CAACC,SAAL,CAAe1B,GAAf,CAAoB,GAA3I,CAAJ;IACD;;IACD,OAAOa,KAAP;EACD,CAjBkB,GAiBf,KAAK,CAjBT;;EAkBA,MAAMgB,MAAM,GAAG;IACbnB,IADa;IAEbH,QAAQ,EAAE,CAAC,CAACA,QAFC;IAGbI,SAAS,EAAEC,UAHE;IAIb,CAACd,SAAD,GAAa;EAJA,CAAf;EAMA,IAAImB,MAAM,CAACb,IAAD,EAAO,SAAP,CAAV,EACEyB,MAAM,CAACrB,OAAP,GAAiBC,YAAjB;EACF,OAAOoB,MAAP;AACF,CA/BY;;AAgCA,MAACC,UAAU,GAAIC,KAAD,IAAWC,SAAS,CAACC,MAAM,CAACC,OAAP,CAAeH,KAAf,EAAsBR,GAAtB,CAA0B,CAAC,CAAClB,GAAD,EAAM8B,MAAN,CAAD,KAAmB,CAC1F9B,GAD0F,EAE1FF,SAAS,CAACgC,MAAD,EAAS9B,GAAT,CAFiF,CAA7C,CAAD,CAAlC","names":["epPropKey","definePropType","val","isEpProp","isObject","buildProp","prop","key","values","required","default","defaultValue","type","validator","_validator","valid","allowedValues","Array","from","hasOwn","push","includes","length","allowValuesText","Set","map","value","JSON","stringify","join","warn","epProp","buildProps","props","fromPairs","Object","entries","option"],"sources":["../../../../../../packages/utils/vue/props/runtime.ts"],"sourcesContent":["import { warn } from 'vue'\nimport { fromPairs } from 'lodash-unified'\nimport { isObject } from '../../types'\nimport { hasOwn } from '../../objects'\n\nimport type { PropType } from 'vue'\nimport type {\n  EpProp,\n  EpPropConvert,\n  EpPropFinalized,\n  EpPropInput,\n  EpPropMergeType,\n  IfEpProp,\n  IfNativePropType,\n  NativePropType,\n} from './types'\n\nexport const epPropKey = '__epPropKey'\n\nexport const definePropType = <T>(val: any): PropType<T> => val\n\nexport const isEpProp = (val: unknown): val is EpProp<any, any, any> =>\n  isObject(val) && !!(val as any)[epPropKey]\n\n/**\n * @description Build prop. It can better optimize prop types\n * @description 生成 prop，能更好地优化类型\n * @example\n  // limited options\n  // the type will be PropType<'light' | 'dark'>\n  buildProp({\n    type: String,\n    values: ['light', 'dark'],\n  } as const)\n  * @example\n  // limited options and other types\n  // the type will be PropType<'small' | 'large' | number>\n  buildProp({\n    type: [String, Number],\n    values: ['small', 'large'],\n    validator: (val: unknown): val is number => typeof val === 'number',\n  } as const)\n  @link see more: https://github.com/element-plus/element-plus/pull/3341\n */\nexport const buildProp = <\n  Type = never,\n  Value = never,\n  Validator = never,\n  Default extends EpPropMergeType<Type, Value, Validator> = never,\n  Required extends boolean = false\n>(\n  prop: EpPropInput<Type, Value, Validator, Default, Required>,\n  key?: string\n): EpPropFinalized<Type, Value, Validator, Default, Required> => {\n  // filter native prop type and nested prop, e.g `null`, `undefined` (from `buildProps`)\n  if (!isObject(prop) || isEpProp(prop)) return prop as any\n\n  const { values, required, default: defaultValue, type, validator } = prop\n\n  const _validator =\n    values || validator\n      ? (val: unknown) => {\n          let valid = false\n          let allowedValues: unknown[] = []\n\n          if (values) {\n            allowedValues = Array.from(values)\n            if (hasOwn(prop, 'default')) {\n              allowedValues.push(defaultValue)\n            }\n            valid ||= allowedValues.includes(val)\n          }\n          if (validator) valid ||= validator(val)\n\n          if (!valid && allowedValues.length > 0) {\n            const allowValuesText = [...new Set(allowedValues)]\n              .map((value) => JSON.stringify(value))\n              .join(', ')\n            warn(\n              `Invalid prop: validation failed${\n                key ? ` for prop \"${key}\"` : ''\n              }. Expected one of [${allowValuesText}], got value ${JSON.stringify(\n                val\n              )}.`\n            )\n          }\n          return valid\n        }\n      : undefined\n\n  const epProp: any = {\n    type,\n    required: !!required,\n    validator: _validator,\n    [epPropKey]: true,\n  }\n  if (hasOwn(prop, 'default')) epProp.default = defaultValue\n  return epProp\n}\n\nexport const buildProps = <\n  Props extends Record<\n    string,\n    | { [epPropKey]: true }\n    | NativePropType\n    | EpPropInput<any, any, any, any, any>\n  >\n>(\n  props: Props\n): {\n  [K in keyof Props]: IfEpProp<\n    Props[K],\n    Props[K],\n    IfNativePropType<Props[K], Props[K], EpPropConvert<Props[K]>>\n  >\n} =>\n  fromPairs(\n    Object.entries(props).map(([key, option]) => [\n      key,\n      buildProp(option as any, key),\n    ])\n  ) as any\n"]},"metadata":{},"sourceType":"module"}