{"ast":null,"code":"import baseSortedIndexBy from './_baseSortedIndexBy.js';\nimport identity from './identity.js';\nimport isSymbol from './isSymbol.js';\n/** Used as references for the maximum length and index of an array. */\n\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\n\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array == null ? low : array.length;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = low + high >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n\n    return high;\n  }\n\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nexport default baseSortedIndex;","map":{"version":3,"names":["baseSortedIndexBy","identity","isSymbol","MAX_ARRAY_LENGTH","HALF_MAX_ARRAY_LENGTH","baseSortedIndex","array","value","retHighest","low","high","length","mid","computed"],"sources":["C:/Users/laoshuaib/Desktop/restaurant/node_modules/lodash-es/_baseSortedIndex.js"],"sourcesContent":["import baseSortedIndexBy from './_baseSortedIndexBy.js';\nimport identity from './identity.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for the maximum length and index of an array. */\nvar MAX_ARRAY_LENGTH = 4294967295,\n    HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;\n\n/**\n * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\n * performs a binary search of `array` to determine the index at which `value`\n * should be inserted into `array` in order to maintain its sort order.\n *\n * @private\n * @param {Array} array The sorted array to inspect.\n * @param {*} value The value to evaluate.\n * @param {boolean} [retHighest] Specify returning the highest qualified index.\n * @returns {number} Returns the index at which `value` should be inserted\n *  into `array`.\n */\nfunction baseSortedIndex(array, value, retHighest) {\n  var low = 0,\n      high = array == null ? low : array.length;\n\n  if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\n    while (low < high) {\n      var mid = (low + high) >>> 1,\n          computed = array[mid];\n\n      if (computed !== null && !isSymbol(computed) &&\n          (retHighest ? (computed <= value) : (computed < value))) {\n        low = mid + 1;\n      } else {\n        high = mid;\n      }\n    }\n    return high;\n  }\n  return baseSortedIndexBy(array, value, identity, retHighest);\n}\n\nexport default baseSortedIndex;\n"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,yBAA9B;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;;AACA,IAAIC,gBAAgB,GAAG,UAAvB;AAAA,IACIC,qBAAqB,GAAGD,gBAAgB,KAAK,CADjD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASE,eAAT,CAAyBC,KAAzB,EAAgCC,KAAhC,EAAuCC,UAAvC,EAAmD;EACjD,IAAIC,GAAG,GAAG,CAAV;EAAA,IACIC,IAAI,GAAGJ,KAAK,IAAI,IAAT,GAAgBG,GAAhB,GAAsBH,KAAK,CAACK,MADvC;;EAGA,IAAI,OAAOJ,KAAP,IAAgB,QAAhB,IAA4BA,KAAK,KAAKA,KAAtC,IAA+CG,IAAI,IAAIN,qBAA3D,EAAkF;IAChF,OAAOK,GAAG,GAAGC,IAAb,EAAmB;MACjB,IAAIE,GAAG,GAAIH,GAAG,GAAGC,IAAP,KAAiB,CAA3B;MAAA,IACIG,QAAQ,GAAGP,KAAK,CAACM,GAAD,CADpB;;MAGA,IAAIC,QAAQ,KAAK,IAAb,IAAqB,CAACX,QAAQ,CAACW,QAAD,CAA9B,KACCL,UAAU,GAAIK,QAAQ,IAAIN,KAAhB,GAA0BM,QAAQ,GAAGN,KADhD,CAAJ,EAC6D;QAC3DE,GAAG,GAAGG,GAAG,GAAG,CAAZ;MACD,CAHD,MAGO;QACLF,IAAI,GAAGE,GAAP;MACD;IACF;;IACD,OAAOF,IAAP;EACD;;EACD,OAAOV,iBAAiB,CAACM,KAAD,EAAQC,KAAR,EAAeN,QAAf,EAAyBO,UAAzB,CAAxB;AACD;;AAED,eAAeH,eAAf"},"metadata":{},"sourceType":"module"}