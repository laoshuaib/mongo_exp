{"ast":null,"code":"import { defineComponent, ref, computed, openBlock, createElementBlock, normalizeClass, unref, createTextVNode, toDisplayString, createVNode } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { ElInput } from '../../../input/index.mjs';\nimport { usePagination } from '../usePagination.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nconst _hoisted_1 = [\"disabled\"];\nconst __default__ = {\n  name: \"ElPaginationJumper\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n\n  setup(__props) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"pagination\");\n    const {\n      pageCount,\n      disabled,\n      currentPage,\n      changeEvent\n    } = usePagination();\n    const userInput = ref();\n    const innerValue = computed(() => {\n      var _a;\n\n      return (_a = userInput.value) != null ? _a : currentPage == null ? void 0 : currentPage.value;\n    });\n\n    function handleInput(val) {\n      userInput.value = +val;\n    }\n\n    function handleChange(val) {\n      val = Math.trunc(+val);\n      changeEvent == null ? void 0 : changeEvent(+val);\n      userInput.value = void 0;\n    }\n\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"span\", {\n        class: normalizeClass(unref(ns).e(\"jump\")),\n        disabled: unref(disabled)\n      }, [createTextVNode(toDisplayString(unref(t)(\"el.pagination.goto\")) + \" \", 1), createVNode(unref(ElInput), {\n        size: \"small\",\n        class: normalizeClass([unref(ns).e(\"editor\"), unref(ns).is(\"in-pagination\")]),\n        min: 1,\n        max: unref(pageCount),\n        disabled: unref(disabled),\n        \"model-value\": unref(innerValue),\n        type: \"number\",\n        \"onUpdate:modelValue\": handleInput,\n        onChange: handleChange\n      }, null, 8, [\"class\", \"max\", \"disabled\", \"model-value\"]), createTextVNode(\" \" + toDisplayString(unref(t)(\"el.pagination.pageClassifier\")), 1)], 10, _hoisted_1);\n    };\n  }\n\n});\n\nvar Jumper = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/pagination/src/components/jumper.vue\"]]);\n\nexport { Jumper as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;IA4BA;MAAAA;IAAA;IACA;IACA;MAAAC;MAAAC;MAAAC;MAAAC;IAAA;IACA;IACA;MAEA;;MACA;IACA,CAJA;;IAMA;MACAC;IACA;;IACA;MACAC","names":["t","pageCount","disabled","currentPage","changeEvent","userInput","val"],"sources":["../../../../../../../packages/components/pagination/src/components/jumper.vue"],"sourcesContent":["<template>\n  <span :class=\"ns.e('jump')\" :disabled=\"disabled\">\n    {{ t('el.pagination.goto') }}\n    <el-input\n      size=\"small\"\n      :class=\"[ns.e('editor'), ns.is('in-pagination')]\"\n      :min=\"1\"\n      :max=\"pageCount\"\n      :disabled=\"disabled\"\n      :model-value=\"innerValue\"\n      type=\"number\"\n      @update:model-value=\"handleInput\"\n      @change=\"handleChange\"\n    />\n    {{ t('el.pagination.pageClassifier') }}\n  </span>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref } from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { usePagination } from '../usePagination'\n\ndefineOptions({\n  name: 'ElPaginationJumper',\n})\n\nconst { t } = useLocale()\nconst ns = useNamespace('pagination')\nconst { pageCount, disabled, currentPage, changeEvent } = usePagination()\nconst userInput = ref<number>()\nconst innerValue = computed(() => userInput.value ?? currentPage?.value)\n\nfunction handleInput(val: number | string) {\n  userInput.value = +val\n}\n\nfunction handleChange(val: number | string) {\n  val = Math.trunc(+val)\n  changeEvent?.(+val)\n  userInput.value = undefined\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}