{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { isClient } from '@vueuse/core';\nimport { getStyle } from './style.mjs';\n\nconst isScroll = (el, isVertical) => {\n  if (!isClient) return false;\n  const key = {\n    undefined: \"overflow\",\n    true: \"overflow-y\",\n    false: \"overflow-x\"\n  }[String(isVertical)];\n  const overflow = getStyle(el, key);\n  return [\"scroll\", \"auto\", \"overlay\"].some(s => overflow.includes(s));\n};\n\nconst getScrollContainer = (el, isVertical) => {\n  if (!isClient) return;\n  let parent = el;\n\n  while (parent) {\n    if ([window, document, document.documentElement].includes(parent)) return window;\n    if (isScroll(parent, isVertical)) return parent;\n    parent = parent.parentNode;\n  }\n\n  return parent;\n};\n\nlet scrollBarWidth;\n\nconst getScrollBarWidth = namespace => {\n  var _a;\n\n  if (!isClient) return 0;\n  if (scrollBarWidth !== void 0) return scrollBarWidth;\n  const outer = document.createElement(\"div\");\n  outer.className = `${namespace}-scrollbar__wrap`;\n  outer.style.visibility = \"hidden\";\n  outer.style.width = \"100px\";\n  outer.style.position = \"absolute\";\n  outer.style.top = \"-9999px\";\n  document.body.appendChild(outer);\n  const widthNoScroll = outer.offsetWidth;\n  outer.style.overflow = \"scroll\";\n  const inner = document.createElement(\"div\");\n  inner.style.width = \"100%\";\n  outer.appendChild(inner);\n  const widthWithScroll = inner.offsetWidth;\n  (_a = outer.parentNode) == null ? void 0 : _a.removeChild(outer);\n  scrollBarWidth = widthNoScroll - widthWithScroll;\n  return scrollBarWidth;\n};\n\nfunction scrollIntoView(container, selected) {\n  if (!isClient) return;\n\n  if (!selected) {\n    container.scrollTop = 0;\n    return;\n  }\n\n  const offsetParents = [];\n  let pointer = selected.offsetParent;\n\n  while (pointer !== null && container !== pointer && container.contains(pointer)) {\n    offsetParents.push(pointer);\n    pointer = pointer.offsetParent;\n  }\n\n  const top = selected.offsetTop + offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0);\n  const bottom = top + selected.offsetHeight;\n  const viewRectTop = container.scrollTop;\n  const viewRectBottom = viewRectTop + container.clientHeight;\n\n  if (top < viewRectTop) {\n    container.scrollTop = top;\n  } else if (bottom > viewRectBottom) {\n    container.scrollTop = bottom - container.clientHeight;\n  }\n}\n\nexport { getScrollBarWidth, getScrollContainer, isScroll, scrollIntoView };","map":{"version":3,"mappings":"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","names":["isScroll","el","isVertical","isClient","key","undefined","true","false","String","overflow","getStyle","some","s","includes","getScrollContainer","parent","window","document","documentElement","parentNode","scrollBarWidth","getScrollBarWidth","namespace","_a","outer","createElement","className","style","visibility","width","position","top","body","appendChild","widthNoScroll","offsetWidth","inner","widthWithScroll","removeChild","scrollIntoView","container","selected","scrollTop","offsetParents","pointer","offsetParent","contains","push","offsetTop","reduce","prev","curr","bottom","offsetHeight","viewRectTop","viewRectBottom","clientHeight"],"sources":["../../../../../packages/utils/dom/scroll.ts"],"sourcesContent":["import { isClient } from '@vueuse/core'\nimport { getStyle } from './style'\n\nexport const isScroll = (el: HTMLElement, isVertical?: boolean): boolean => {\n  if (!isClient) return false\n\n  const key = (\n    {\n      undefined: 'overflow',\n      true: 'overflow-y',\n      false: 'overflow-x',\n    } as const\n  )[String(isVertical)]!\n  const overflow = getStyle(el, key)\n  return ['scroll', 'auto', 'overlay'].some((s) => overflow.includes(s))\n}\n\nexport const getScrollContainer = (\n  el: HTMLElement,\n  isVertical?: boolean\n): Window | HTMLElement | undefined => {\n  if (!isClient) return\n\n  let parent: HTMLElement = el\n  while (parent) {\n    if ([window, document, document.documentElement].includes(parent))\n      return window\n\n    if (isScroll(parent, isVertical)) return parent\n\n    parent = parent.parentNode as HTMLElement\n  }\n\n  return parent\n}\n\nlet scrollBarWidth: number\nexport const getScrollBarWidth = (namespace: string): number => {\n  if (!isClient) return 0\n  if (scrollBarWidth !== undefined) return scrollBarWidth\n\n  const outer = document.createElement('div')\n  outer.className = `${namespace}-scrollbar__wrap`\n  outer.style.visibility = 'hidden'\n  outer.style.width = '100px'\n  outer.style.position = 'absolute'\n  outer.style.top = '-9999px'\n  document.body.appendChild(outer)\n\n  const widthNoScroll = outer.offsetWidth\n  outer.style.overflow = 'scroll'\n\n  const inner = document.createElement('div')\n  inner.style.width = '100%'\n  outer.appendChild(inner)\n\n  const widthWithScroll = inner.offsetWidth\n  outer.parentNode?.removeChild(outer)\n  scrollBarWidth = widthNoScroll - widthWithScroll\n\n  return scrollBarWidth\n}\n\n/**\n * Scroll with in the container element, positioning the **selected** element at the top\n * of the container\n */\nexport function scrollIntoView(\n  container: HTMLElement,\n  selected: HTMLElement\n): void {\n  if (!isClient) return\n\n  if (!selected) {\n    container.scrollTop = 0\n    return\n  }\n\n  const offsetParents: HTMLElement[] = []\n  let pointer = selected.offsetParent\n  while (\n    pointer !== null &&\n    container !== pointer &&\n    container.contains(pointer)\n  ) {\n    offsetParents.push(pointer as HTMLElement)\n    pointer = (pointer as HTMLElement).offsetParent\n  }\n  const top =\n    selected.offsetTop +\n    offsetParents.reduce((prev, curr) => prev + curr.offsetTop, 0)\n  const bottom = top + selected.offsetHeight\n  const viewRectTop = container.scrollTop\n  const viewRectBottom = viewRectTop + container.clientHeight\n\n  if (top < viewRectTop) {\n    container.scrollTop = top\n  } else if (bottom > viewRectBottom) {\n    container.scrollTop = bottom - container.clientHeight\n  }\n}\n"]},"metadata":{},"sourceType":"module"}