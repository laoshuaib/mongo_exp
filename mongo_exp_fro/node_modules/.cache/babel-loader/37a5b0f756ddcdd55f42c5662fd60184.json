{"ast":null,"code":"import { defineComponent, computed, watch, provide, reactive, toRefs, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { formProps, formEmits } from './form.mjs';\nimport { filterFields, useFormLabelWidth } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isFunction } from '@vue/shared';\nimport { formContextKey } from '../../../tokens/form.mjs';\nconst __default__ = {\n  name: \"ElForm\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: formProps,\n  emits: formEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const COMPONENT_NAME = \"ElForm\";\n    const fields = [];\n    const formSize = useSize();\n    const ns = useNamespace(\"form\");\n    const formClasses = computed(() => {\n      const {\n        labelPosition,\n        inline\n      } = props;\n      return [ns.b(), ns.m(formSize.value || \"default\"), {\n        [ns.m(`label-${labelPosition}`)]: labelPosition,\n        [ns.m(\"inline\")]: inline\n      }];\n    });\n\n    const addField = field => {\n      fields.push(field);\n    };\n\n    const removeField = field => {\n      if (field.prop) {\n        fields.splice(fields.indexOf(field), 1);\n      }\n    };\n\n    const resetFields = (properties = []) => {\n      if (!props.model) {\n        debugWarn(COMPONENT_NAME, \"model is required for resetFields to work.\");\n        return;\n      }\n\n      filterFields(fields, properties).forEach(field => field.resetField());\n    };\n\n    const clearValidate = (props2 = []) => {\n      filterFields(fields, props2).forEach(field => field.clearValidate());\n    };\n\n    const isValidatable = computed(() => {\n      const hasModel = !!props.model;\n\n      if (!hasModel) {\n        debugWarn(COMPONENT_NAME, \"model is required for validate to work.\");\n      }\n\n      return hasModel;\n    });\n\n    const obtainValidateFields = props2 => {\n      if (fields.length === 0) return [];\n      const filteredFields = filterFields(fields, props2);\n\n      if (!filteredFields.length) {\n        debugWarn(COMPONENT_NAME, \"please pass correct props!\");\n        return [];\n      }\n\n      return filteredFields;\n    };\n\n    const validate = async callback => validateField(void 0, callback);\n\n    const doValidateField = async (props2 = []) => {\n      if (!isValidatable.value) return false;\n      const fields2 = obtainValidateFields(props2);\n      if (fields2.length === 0) return true;\n      let validationErrors = {};\n\n      for (const field of fields2) {\n        try {\n          await field.validate(\"\");\n        } catch (fields3) {\n          validationErrors = { ...validationErrors,\n            ...fields3\n          };\n        }\n      }\n\n      if (Object.keys(validationErrors).length === 0) return true;\n      return Promise.reject(validationErrors);\n    };\n\n    const validateField = async (modelProps = [], callback) => {\n      const shouldThrow = !isFunction(callback);\n\n      try {\n        const result = await doValidateField(modelProps);\n\n        if (result === true) {\n          callback == null ? void 0 : callback(result);\n        }\n\n        return result;\n      } catch (e) {\n        const invalidFields = e;\n\n        if (props.scrollToError) {\n          scrollToField(Object.keys(invalidFields)[0]);\n        }\n\n        callback == null ? void 0 : callback(false, invalidFields);\n        return shouldThrow && Promise.reject(invalidFields);\n      }\n    };\n\n    const scrollToField = prop => {\n      var _a;\n\n      const field = filterFields(fields, prop)[0];\n\n      if (field) {\n        (_a = field.$el) == null ? void 0 : _a.scrollIntoView();\n      }\n    };\n\n    watch(() => props.rules, () => {\n      if (props.validateOnRuleChange) {\n        validate().catch(err => debugWarn(err));\n      }\n    }, {\n      deep: true\n    });\n    provide(formContextKey, reactive({ ...toRefs(props),\n      emit,\n      resetFields,\n      clearValidate,\n      validateField,\n      addField,\n      removeField,\n      ...useFormLabelWidth()\n    }));\n    expose({\n      validate,\n      validateField,\n      resetFields,\n      clearValidate,\n      scrollToField\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"form\", {\n        class: normalizeClass(unref(formClasses))\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n\n});\n\nvar Form = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/form/src/form.vue\"]]);\n\nexport { Form as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;IAwBA;IAOA;IAEA;IACA;IACA;MACA;QAAAA;QAAAC;MAAA;MACA,QACAC,MADA,EAIAA,iCAJA,EAKA;QACA,+CADA;QAEA;MAFA,CALA;IAUA,CAZA;;IAcA;MACAC;IACA,CAFA;;IAIA;MACA;QACAA;MACA;IACA,CAJA;;IAMA;MACA;QACAC;QACA;MACA;;MACAC;IACA,CANA;;IAQA;MACAA;IACA,CAFA;;IAIA;MACA;;MACA;QACAD;MACA;;MACA;IACA,CANA;;IAQA;MACA;MAEA;;MACA;QACAA;QACA;MACA;;MACA;IACA,CATA;;IAWA,uBACAE,QADA,IAEAC,+BAFA;;IAIA,+BACAC,WADA,KAEA;MACA;MAEA;MACA;MAEA;;MACA;QACA;UACA;QAAA,CADA,CACA,OACAC,OADA,EACA;UACAC,qBACA,mBADA;YAEA;UAFA;QAIA;MACA;;MAEA;MACA;IACA,CAtBA;;IAwBA,6BACAC,eADA,EAEAL,QAFA,KAGA;MACA;;MACA;QACA;;QAEA;UACAA;QACA;;QACA;MAAA,CANA,CAMA,OACAM,CADA,EACA;QACA;;QAEA;UACAC;QACA;;QACAP;QACA;MACA;IACA,CArBA;;IAuBA;MACA;;MACA;;MACA;QACA;MACA;IAGA,CARA;;IAUAQ;MACA;QACAC;MAEA;IAGA,CAPA,EAOA;MAAAC;IAAA,CAPA;IAUAC,mCACA,gBADA;MAGAC,IAHA;MAIAC,WAJA;MAKAC,aALA;MAMAb,aANA;MAOAc,QAPA;MASAC,WATA;MAWA;IAXA;IAeAC;MAEAR,QAFA;MAIAR,aAJA;MAMAY,WANA;MAQAC,aARA;MASAP;IATA","names":["labelPosition","inline","ns","fields","debugWarn","filterFields","callback","validateField","props2","fields3","validationErrors","modelProps","e","scrollToField","watch","validate","deep","provide","emit","resetFields","clearValidate","addField","removeField","expose"],"sources":["../../../../../../packages/components/form/src/form.vue"],"sourcesContent":["<template>\n  <form :class=\"formClasses\">\n    <slot />\n  </form>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, reactive, toRefs, watch } from 'vue'\nimport { debugWarn, isFunction } from '@element-plus/utils'\nimport { formContextKey } from '@element-plus/tokens'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport { formEmits, formProps } from './form'\nimport { filterFields, useFormLabelWidth } from './utils'\n\nimport type { ValidateFieldsError } from 'async-validator'\nimport type { Arrayable } from '@element-plus/utils'\nimport type {\n  FormContext,\n  FormItemContext,\n  FormValidateCallback,\n  FormValidationResult,\n} from '@element-plus/tokens'\nimport type { FormItemProp } from './form-item'\n\nconst COMPONENT_NAME = 'ElForm'\ndefineOptions({\n  name: 'ElForm',\n})\nconst props = defineProps(formProps)\nconst emit = defineEmits(formEmits)\n\nconst fields: FormItemContext[] = []\n\nconst formSize = useSize()\nconst ns = useNamespace('form')\nconst formClasses = computed(() => {\n  const { labelPosition, inline } = props\n  return [\n    ns.b(),\n    // todo: in v2.2.0, we can remove default\n    // in fact, remove it doesn't affect the final style\n    ns.m(formSize.value || 'default'),\n    {\n      [ns.m(`label-${labelPosition}`)]: labelPosition,\n      [ns.m('inline')]: inline,\n    },\n  ]\n})\n\nconst addField: FormContext['addField'] = (field) => {\n  fields.push(field)\n}\n\nconst removeField: FormContext['removeField'] = (field) => {\n  if (field.prop) {\n    fields.splice(fields.indexOf(field), 1)\n  }\n}\n\nconst resetFields: FormContext['resetFields'] = (properties = []) => {\n  if (!props.model) {\n    debugWarn(COMPONENT_NAME, 'model is required for resetFields to work.')\n    return\n  }\n  filterFields(fields, properties).forEach((field) => field.resetField())\n}\n\nconst clearValidate: FormContext['clearValidate'] = (props = []) => {\n  filterFields(fields, props).forEach((field) => field.clearValidate())\n}\n\nconst isValidatable = computed(() => {\n  const hasModel = !!props.model\n  if (!hasModel) {\n    debugWarn(COMPONENT_NAME, 'model is required for validate to work.')\n  }\n  return hasModel\n})\n\nconst obtainValidateFields = (props: Arrayable<FormItemProp>) => {\n  if (fields.length === 0) return []\n\n  const filteredFields = filterFields(fields, props)\n  if (!filteredFields.length) {\n    debugWarn(COMPONENT_NAME, 'please pass correct props!')\n    return []\n  }\n  return filteredFields\n}\n\nconst validate = async (\n  callback?: FormValidateCallback\n): FormValidationResult => validateField(undefined, callback)\n\nconst doValidateField = async (\n  props: Arrayable<FormItemProp> = []\n): Promise<boolean> => {\n  if (!isValidatable.value) return false\n\n  const fields = obtainValidateFields(props)\n  if (fields.length === 0) return true\n\n  let validationErrors: ValidateFieldsError = {}\n  for (const field of fields) {\n    try {\n      await field.validate('')\n    } catch (fields) {\n      validationErrors = {\n        ...validationErrors,\n        ...(fields as ValidateFieldsError),\n      }\n    }\n  }\n\n  if (Object.keys(validationErrors).length === 0) return true\n  return Promise.reject(validationErrors)\n}\n\nconst validateField: FormContext['validateField'] = async (\n  modelProps = [],\n  callback\n) => {\n  const shouldThrow = !isFunction(callback)\n  try {\n    const result = await doValidateField(modelProps)\n    // When result is false meaning that the fields are not validatable\n    if (result === true) {\n      callback?.(result)\n    }\n    return result\n  } catch (e) {\n    const invalidFields = e as ValidateFieldsError\n\n    if (props.scrollToError) {\n      scrollToField(Object.keys(invalidFields)[0])\n    }\n    callback?.(false, invalidFields)\n    return shouldThrow && Promise.reject(invalidFields)\n  }\n}\n\nconst scrollToField = (prop: FormItemProp) => {\n  const field = filterFields(fields, prop)[0]\n  if (field) {\n    field.$el?.scrollIntoView()\n  }\n}\n\nwatch(\n  () => props.rules,\n  () => {\n    if (props.validateOnRuleChange) {\n      validate().catch((err) => debugWarn(err))\n    }\n  },\n  { deep: true }\n)\n\nprovide(\n  formContextKey,\n  reactive({\n    ...toRefs(props),\n    emit,\n\n    resetFields,\n    clearValidate,\n    validateField,\n    addField,\n    removeField,\n\n    ...useFormLabelWidth(),\n  })\n)\n\ndefineExpose({\n  /** @description validate form */\n  validate,\n  /** @description validate form field */\n  validateField,\n  /** @description reset fields */\n  resetFields,\n  /** @description clear validation status */\n  clearValidate,\n  /** @description scroll to field */\n  scrollToField,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}