{"ast":null,"code":"import { defineComponent, nextTick, computed, provide, toRefs, watch, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckboxGroupProps, checkboxGroupEmits, useCheckboxGroup, useCheckboxGroupId } from './checkbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nconst __default__ = {\n  name: \"ElCheckboxGroup\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: useCheckboxGroupProps,\n  emits: checkboxGroupEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const {\n      elFormItem\n    } = useCheckboxGroup();\n    const {\n      groupId,\n      isLabeledByFormItem\n    } = useCheckboxGroupId(props, {\n      elFormItem\n    });\n    const checkboxGroupSize = useSize();\n    const ns = useNamespace(\"checkbox\");\n\n    const changeEvent = value => {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(() => {\n        emit(\"change\", value);\n      });\n    };\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue;\n      },\n\n      set(val) {\n        changeEvent(val);\n      }\n\n    });\n    provide(\"CheckboxGroup\", {\n      name: \"ElCheckboxGroup\",\n      ...toRefs(props),\n      modelValue,\n      checkboxGroupSize,\n      changeEvent\n    });\n    watch(() => props.modelValue, () => {\n      var _a;\n\n      if (props.validateEvent) {\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\").catch(err => debugWarn(err));\n      }\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n        id: unref(groupId),\n        class: normalizeClass(unref(ns).b(\"group\")),\n        role: \"group\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.label || \"checkbox-group\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? unref(elFormItem).labelId : void 0\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"id\", \"class\", \"aria-label\", \"aria-labelledby\"]);\n    };\n  }\n\n});\n\nvar CheckboxGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue\"]]);\n\nexport { CheckboxGroup as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;IAiCA;MAAAA;IAAA;IACA;MAAAC;MAAAC;IAAA;MACAF;IADA;IAGA;IACA;;IAEA;MACAG;MACAC;QACAD;MACA,CAFA;IAGA,CALA;;IAOA;MACAE;QACA;MACA,CAHA;;MAIAC;QACAC;MACA;;IANA;IASAC;MACAC,uBADA;MAEA,gBAFA;MAGAC,UAHA;MAIAC,iBAJA;MAKAJ;IALA;IASAK,8BACA;MACA;;MACA;QACA;MAEA;KANA","names":["elFormItem","groupId","isLabeledByFormItem","emit","nextTick","get","set","changeEvent","provide","name","modelValue","checkboxGroupSize","watch"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"tag\"\n    :id=\"groupId\"\n    :class=\"ns.b('group')\"\n    role=\"group\"\n    :aria-label=\"!isLabeledByFormItem ? label || 'checkbox-group' : undefined\"\n    :aria-labelledby=\"isLabeledByFormItem ? elFormItem.labelId : undefined\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, toRefs, watch } from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport {\n  checkboxGroupEmits,\n  useCheckboxGroup,\n  useCheckboxGroupId,\n  useCheckboxGroupProps,\n} from './checkbox'\nimport type { CheckboxValueType } from './checkbox'\n\ndefineOptions({\n  name: 'ElCheckboxGroup',\n})\n\nconst props = defineProps(useCheckboxGroupProps)\nconst emit = defineEmits(checkboxGroupEmits)\n\nconst { elFormItem } = useCheckboxGroup()\nconst { groupId, isLabeledByFormItem } = useCheckboxGroupId(props, {\n  elFormItem,\n})\nconst checkboxGroupSize = useSize()\nconst ns = useNamespace('checkbox')\n\nconst changeEvent = (value: CheckboxValueType[]) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  nextTick(() => {\n    emit('change', value)\n  })\n}\n\nconst modelValue = computed({\n  get() {\n    return props.modelValue\n  },\n  set(val: CheckboxValueType[]) {\n    changeEvent(val)\n  },\n})\n\nprovide('CheckboxGroup', {\n  name: 'ElCheckboxGroup',\n  ...toRefs(props),\n  modelValue,\n  checkboxGroupSize,\n  changeEvent,\n})\n\nwatch(\n  () => props.modelValue,\n  () => {\n    if (props.validateEvent) {\n      elFormItem.validate?.('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n"]},"metadata":{},"sourceType":"module"}