{"ast":null,"code":"import { defineComponent, inject, ref, provide, computed, unref, onMounted, watch, toRefs, onBeforeUnmount, openBlock, createElementBlock, normalizeStyle, normalizeClass, createVNode, withCtx, renderSlot } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport { isNil } from 'lodash-unified';\nimport { createPopper } from '@popperjs/core';\nimport '../../focus-trap/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport { usePopperContentProps, usePopperContentEmits } from './content.mjs';\nimport { unwrapMeasurableEl, buildPopperOptions } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { POPPER_INJECTION_KEY, POPPER_CONTENT_INJECTION_KEY } from '../../../tokens/popper.mjs';\nimport { formItemContextKey } from '../../../tokens/form.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isElement } from '../../../utils/types.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nconst __default__ = {\n  name: \"ElPopperContent\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: usePopperContentProps,\n  emits: usePopperContentEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    const {\n      popperInstanceRef,\n      contentRef,\n      triggerRef,\n      role\n    } = inject(POPPER_INJECTION_KEY, void 0);\n    const formItemContext = inject(formItemContextKey, void 0);\n    const {\n      nextZIndex\n    } = useZIndex();\n    const ns = useNamespace(\"popper\");\n    const popperContentRef = ref();\n    const focusStartRef = ref(\"first\");\n    const arrowRef = ref();\n    const arrowOffset = ref();\n    provide(POPPER_CONTENT_INJECTION_KEY, {\n      arrowRef,\n      arrowOffset\n    });\n\n    if (formItemContext && (formItemContext.addInputId || formItemContext.removeInputId)) {\n      provide(formItemContextKey, { ...formItemContext,\n        addInputId: NOOP,\n        removeInputId: NOOP\n      });\n    }\n\n    const contentZIndex = ref(props.zIndex || nextZIndex());\n    const trapped = ref(false);\n    let triggerTargetAriaStopWatch = void 0;\n    const computedReference = computed(() => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef));\n    const contentStyle = computed(() => [{\n      zIndex: unref(contentZIndex)\n    }, props.popperStyle]);\n    const contentClass = computed(() => [ns.b(), ns.is(\"pure\", props.pure), ns.is(props.effect), props.popperClass]);\n    const ariaModal = computed(() => {\n      return role && role.value === \"dialog\" ? \"false\" : void 0;\n    });\n\n    const createPopperInstance = ({\n      referenceEl,\n      popperContentEl,\n      arrowEl\n    }) => {\n      const options = buildPopperOptions(props, {\n        arrowEl,\n        arrowOffset: unref(arrowOffset)\n      });\n      return createPopper(referenceEl, popperContentEl, options);\n    };\n\n    const updatePopper = (shouldUpdateZIndex = true) => {\n      var _a;\n\n      (_a = unref(popperInstanceRef)) == null ? void 0 : _a.update();\n      shouldUpdateZIndex && (contentZIndex.value = props.zIndex || nextZIndex());\n    };\n\n    const togglePopperAlive = () => {\n      var _a, _b;\n\n      const monitorable = {\n        name: \"eventListeners\",\n        enabled: props.visible\n      };\n      (_b = (_a = unref(popperInstanceRef)) == null ? void 0 : _a.setOptions) == null ? void 0 : _b.call(_a, options => ({ ...options,\n        modifiers: [...(options.modifiers || []), monitorable]\n      }));\n      updatePopper(false);\n\n      if (props.visible && props.focusOnShow) {\n        trapped.value = true;\n      } else if (props.visible === false) {\n        trapped.value = false;\n      }\n    };\n\n    const onFocusAfterTrapped = () => {\n      emit(\"focus\");\n    };\n\n    const onFocusAfterReleased = () => {\n      focusStartRef.value = \"first\";\n      emit(\"blur\");\n    };\n\n    const onFocusInTrap = event => {\n      var _a;\n\n      if (props.visible && !trapped.value) {\n        if (event.target) {\n          focusStartRef.value = event.target;\n        }\n\n        trapped.value = true;\n\n        if (event.relatedTarget) {\n          ;\n          (_a = event.relatedTarget) == null ? void 0 : _a.focus();\n        }\n      }\n    };\n\n    const onFocusoutPrevented = () => {\n      if (!props.trapping) {\n        trapped.value = false;\n      }\n    };\n\n    const onReleaseRequested = () => {\n      trapped.value = false;\n      emit(\"close\");\n    };\n\n    onMounted(() => {\n      let updateHandle;\n      watch(computedReference, referenceEl => {\n        var _a;\n\n        updateHandle == null ? void 0 : updateHandle();\n        const popperInstance = unref(popperInstanceRef);\n        (_a = popperInstance == null ? void 0 : popperInstance.destroy) == null ? void 0 : _a.call(popperInstance);\n\n        if (referenceEl) {\n          const popperContentEl = unref(popperContentRef);\n          contentRef.value = popperContentEl;\n          popperInstanceRef.value = createPopperInstance({\n            referenceEl,\n            popperContentEl,\n            arrowEl: unref(arrowRef)\n          });\n          updateHandle = watch(() => referenceEl.getBoundingClientRect(), () => updatePopper(), {\n            immediate: true\n          });\n        } else {\n          popperInstanceRef.value = void 0;\n        }\n      }, {\n        immediate: true\n      });\n      watch(() => props.triggerTargetEl, (triggerTargetEl, prevTriggerTargetEl) => {\n        triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n        triggerTargetAriaStopWatch = void 0;\n        const el = unref(triggerTargetEl || popperContentRef.value);\n        const prevEl = unref(prevTriggerTargetEl || popperContentRef.value);\n\n        if (isElement(el)) {\n          const {\n            ariaLabel,\n            id\n          } = toRefs(props);\n          triggerTargetAriaStopWatch = watch([role, ariaLabel, ariaModal, id], watches => {\n            ;\n            [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach((key, idx) => {\n              isNil(watches[idx]) ? el.removeAttribute(key) : el.setAttribute(key, watches[idx]);\n            });\n          }, {\n            immediate: true\n          });\n        }\n\n        if (isElement(prevEl)) {\n          ;\n          [\"role\", \"aria-label\", \"aria-modal\", \"id\"].forEach(key => {\n            prevEl.removeAttribute(key);\n          });\n        }\n      }, {\n        immediate: true\n      });\n      watch(() => props.visible, togglePopperAlive, {\n        immediate: true\n      });\n      watch(() => buildPopperOptions(props, {\n        arrowEl: unref(arrowRef),\n        arrowOffset: unref(arrowOffset)\n      }), option => {\n        var _a;\n\n        return (_a = popperInstanceRef.value) == null ? void 0 : _a.setOptions(option);\n      });\n    });\n    onBeforeUnmount(() => {\n      triggerTargetAriaStopWatch == null ? void 0 : triggerTargetAriaStopWatch();\n      triggerTargetAriaStopWatch = void 0;\n    });\n    expose({\n      popperContentRef,\n      popperInstanceRef,\n      updatePopper,\n      contentStyle\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"popperContentRef\",\n        ref: popperContentRef,\n        style: normalizeStyle(unref(contentStyle)),\n        class: normalizeClass(unref(contentClass)),\n        tabindex: \"-1\",\n        onMouseenter: _cache[0] || (_cache[0] = e => _ctx.$emit(\"mouseenter\", e)),\n        onMouseleave: _cache[1] || (_cache[1] = e => _ctx.$emit(\"mouseleave\", e))\n      }, [createVNode(unref(ElFocusTrap), {\n        trapped: trapped.value,\n        \"trap-on-focus-in\": true,\n        \"focus-trap-el\": popperContentRef.value,\n        \"focus-start-el\": focusStartRef.value,\n        onFocusAfterTrapped,\n        onFocusAfterReleased,\n        onFocusin: onFocusInTrap,\n        onFocusoutPrevented,\n        onReleaseRequested\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"trapped\", \"focus-trap-el\", \"focus-start-el\"])], 38);\n    };\n  }\n\n});\n\nvar ElPopperContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/content.vue\"]]);\n\nexport { ElPopperContent as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA8DA;MAAAA;MAAAC;MAAAC;MAAAC;IAAA,WACAC,oBADA,EAEA,KACA,CAHA;IAIA;IACA;MAAAC;IAAA;IACA;IACA;IACA;IACA;IACA;IACAC;MACAC,QADA;MAEAC;IAFA;;IAKA,IACAC,eACA,iEAFA,EAGA;MAEAH,8BACA,kBADA;QAEAI,gBAFA;QAGAC;MAHA;IAKA;;IAEA;IACA;IAEA;IAEA,mCACA,gEADA;IAIA,8BACA;MAAAC;IAAA,qBADA;IAIA,qCACAC,MADA,EAEAA,yBAFA,EAGAA,mBAHA,EAIAC,iBAJA;IAOA;MACA;IACA,CAFA;;IAIA;MAAAC;MAAAC;MAAAC;IAAA;MACA;QACAA,OADA;QAEAT;MAFA;MAKA;IACA,CAPA;;IASA;MACA;;MACA;MACAU;IAEA,CALA;;IAMA;MACA;;MAAA,MACAC;QAAAC;QAAAC;MAAA,CADA;MACA,iBACA,mBADA,KACA,IADA,GACA,MADA,GACAC,aADA,KACA,IADA,GACA,MADA,GACAC,0BACA,UADA;QAEAC;MAFA,GADA;MAKAC;;MACA;QACAC;MACA,CAFA,MAEA;QACAA;MAEA;IACA,CAdA;;IAeA;MAEAC;IACA,CAHA;;IAIA;MACAC;MAEAD;IACA,CAJA;;IAKA;MACA;;MACA;QACA;UACAC;QACA;;QAAAF;;QACA;UACA;UACA;QAEA;MACA;IACA,CAZA;;IAaA;MACA;QAEAA;MACA;IACA,CALA;;IAMA;MAEAA;MACAC;IAEA,CALA;;IAOAE;MACA;MACAC;QACA;;QACAC;QACA;QAEA;;QACA;UACA;UACA9B;UACAD;YAEAe,WAFA;YAMAC,eANA;YAQAC;UARA;UAUAc;YACAC;UADA;QAIA,CAjBA,MAiBA;UAEAhC;QAEA;MAGA,CA9BA,EA8BA;QACAgC;MADA,CA9BA;MAkCAF;QAEAG;QACAA;QACA,oDACA,MADA;QAGA;;QAAA;UACA;YAAAC;YAAAC;UAAA,IACAC,aADA;UAEAH,0BACA;YAEA;YAEA;cACAI;YACA,CAFA;UAEA,CANA,EAMA;YAAAL;UAAA,CANA,CADA;QAQA;;QAAA,IACAM,iBADA,EACA;UACA;UAEA,uBACA,YADA,EACA,IADA,EACAC,OADA,CACAC;YAEAC;UAGA,CANA;QAQA;MACA,CA/BA,EA+BA;QAAAT;MAAA,CA/BA;MAgCAF,KACA;QAAAE,WACA;MADA,EADA;MAGAF;QAEAb,wBAFA;QAGAT;MAHA,IAIAkC;QACA;;QAEA;MAIA,CAXA;IAeA,CAtFA;IA0FAC;MAKAV;MACAA;KANA","names":["popperInstanceRef","contentRef","triggerRef","role","POPPER_INJECTION_KEY","nextZIndex","provide","arrowRef","arrowOffset","formItemContext","addInputId","removeInputId","zIndex","ns","props","referenceEl","popperContentEl","arrowEl","shouldUpdateZIndex","monitorable","name","enabled","_a","_b","modifiers","updatePopper","trapped","emit","focusStartRef","onMounted","watch","updateHandle","immediate","triggerTargetAriaStopWatch","ariaLabel","id","toRefs","isNil","isElement","forEach","key","prevEl","option","onBeforeUnmount"],"sources":["../../../../../../packages/components/popper/src/content.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"popperContentRef\"\n    :style=\"contentStyle\"\n    :class=\"contentClass\"\n    tabindex=\"-1\"\n    @mouseenter=\"(e) => $emit('mouseenter', e)\"\n    @mouseleave=\"(e) => $emit('mouseleave', e)\"\n  >\n    <el-focus-trap\n      :trapped=\"trapped\"\n      :trap-on-focus-in=\"true\"\n      :focus-trap-el=\"popperContentRef\"\n      :focus-start-el=\"focusStartRef\"\n      @focus-after-trapped=\"onFocusAfterTrapped\"\n      @focus-after-released=\"onFocusAfterReleased\"\n      @focusin=\"onFocusInTrap\"\n      @focusout-prevented=\"onFocusoutPrevented\"\n      @release-requested=\"onReleaseRequested\"\n    >\n      <slot />\n    </el-focus-trap>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n// @ts-nocheck\nimport {\n  computed,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  toRefs,\n  unref,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport { isNil } from 'lodash-unified'\nimport { createPopper } from '@popperjs/core'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport { useNamespace, useZIndex } from '@element-plus/hooks'\nimport {\n  POPPER_CONTENT_INJECTION_KEY,\n  POPPER_INJECTION_KEY,\n  formItemContextKey,\n} from '@element-plus/tokens'\nimport { isElement } from '@element-plus/utils'\nimport { usePopperContentEmits, usePopperContentProps } from './content'\nimport { buildPopperOptions, unwrapMeasurableEl } from './utils'\n\nimport type { WatchStopHandle } from 'vue'\n\ndefineOptions({\n  name: 'ElPopperContent',\n})\n\nconst emit = defineEmits(usePopperContentEmits)\n\nconst props = defineProps(usePopperContentProps)\n\nconst { popperInstanceRef, contentRef, triggerRef, role } = inject(\n  POPPER_INJECTION_KEY,\n  undefined\n)!\nconst formItemContext = inject(formItemContextKey, undefined)\nconst { nextZIndex } = useZIndex()\nconst ns = useNamespace('popper')\nconst popperContentRef = ref<HTMLElement>()\nconst focusStartRef = ref<string | HTMLElement>('first')\nconst arrowRef = ref<HTMLElement>()\nconst arrowOffset = ref<number>()\nprovide(POPPER_CONTENT_INJECTION_KEY, {\n  arrowRef,\n  arrowOffset,\n})\n\nif (\n  formItemContext &&\n  (formItemContext.addInputId || formItemContext.removeInputId)\n) {\n  // disallow auto-id from inside popper content\n  provide(formItemContextKey, {\n    ...formItemContext,\n    addInputId: NOOP,\n    removeInputId: NOOP,\n  })\n}\n\nconst contentZIndex = ref<number>(props.zIndex || nextZIndex())\nconst trapped = ref<boolean>(false)\n\nlet triggerTargetAriaStopWatch: WatchStopHandle | undefined = undefined\n\nconst computedReference = computed(\n  () => unwrapMeasurableEl(props.referenceEl) || unref(triggerRef)\n)\n\nconst contentStyle = computed(\n  () => [{ zIndex: unref(contentZIndex) }, props.popperStyle] as any\n)\n\nconst contentClass = computed(() => [\n  ns.b(),\n  ns.is('pure', props.pure),\n  ns.is(props.effect),\n  props.popperClass,\n])\n\nconst ariaModal = computed<string | undefined>(() => {\n  return role && role.value === 'dialog' ? 'false' : undefined\n})\n\nconst createPopperInstance = ({ referenceEl, popperContentEl, arrowEl }) => {\n  const options = buildPopperOptions(props, {\n    arrowEl,\n    arrowOffset: unref(arrowOffset),\n  })\n\n  return createPopper(referenceEl, popperContentEl, options)\n}\n\nconst updatePopper = (shouldUpdateZIndex = true) => {\n  unref(popperInstanceRef)?.update()\n  shouldUpdateZIndex && (contentZIndex.value = props.zIndex || nextZIndex())\n}\n\nconst togglePopperAlive = () => {\n  const monitorable = { name: 'eventListeners', enabled: props.visible }\n  unref(popperInstanceRef)?.setOptions?.((options) => ({\n    ...options,\n    modifiers: [...(options.modifiers || []), monitorable],\n  }))\n  updatePopper(false)\n  if (props.visible && props.focusOnShow) {\n    trapped.value = true\n  } else if (props.visible === false) {\n    trapped.value = false\n  }\n}\n\nconst onFocusAfterTrapped = () => {\n  emit('focus')\n}\n\nconst onFocusAfterReleased = () => {\n  focusStartRef.value = 'first'\n  emit('blur')\n}\n\nconst onFocusInTrap = (event: FocusEvent) => {\n  if (props.visible && !trapped.value) {\n    if (event.target) {\n      focusStartRef.value = event.target as typeof focusStartRef.value\n    }\n    trapped.value = true\n    if (event.relatedTarget) {\n      ;(event.relatedTarget as HTMLElement)?.focus()\n    }\n  }\n}\n\nconst onFocusoutPrevented = () => {\n  if (!props.trapping) {\n    trapped.value = false\n  }\n}\n\nconst onReleaseRequested = () => {\n  trapped.value = false\n  emit('close')\n}\n\nonMounted(() => {\n  let updateHandle: WatchStopHandle\n  watch(\n    computedReference,\n    (referenceEl) => {\n      updateHandle?.()\n      const popperInstance = unref(popperInstanceRef)\n      popperInstance?.destroy?.()\n      if (referenceEl) {\n        const popperContentEl = unref(popperContentRef)!\n        contentRef.value = popperContentEl\n\n        popperInstanceRef.value = createPopperInstance({\n          referenceEl,\n          popperContentEl,\n          arrowEl: unref(arrowRef),\n        })\n\n        updateHandle = watch(\n          () => referenceEl.getBoundingClientRect(),\n          () => updatePopper(),\n          {\n            immediate: true,\n          }\n        )\n      } else {\n        popperInstanceRef.value = undefined\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  watch(\n    () => props.triggerTargetEl,\n    (triggerTargetEl, prevTriggerTargetEl) => {\n      triggerTargetAriaStopWatch?.()\n      triggerTargetAriaStopWatch = undefined\n\n      const el = unref(triggerTargetEl || popperContentRef.value)\n      const prevEl = unref(prevTriggerTargetEl || popperContentRef.value)\n\n      if (isElement(el)) {\n        const { ariaLabel, id } = toRefs(props)\n        triggerTargetAriaStopWatch = watch(\n          [role, ariaLabel, ariaModal, id],\n          (watches) => {\n            ;['role', 'aria-label', 'aria-modal', 'id'].forEach((key, idx) => {\n              isNil(watches[idx])\n                ? el.removeAttribute(key)\n                : el.setAttribute(key, watches[idx])\n            })\n          },\n          { immediate: true }\n        )\n      }\n      if (isElement(prevEl)) {\n        ;['role', 'aria-label', 'aria-modal', 'id'].forEach((key) => {\n          prevEl.removeAttribute(key)\n        })\n      }\n    },\n    { immediate: true }\n  )\n\n  watch(() => props.visible, togglePopperAlive, { immediate: true })\n\n  watch(\n    () =>\n      buildPopperOptions(props, {\n        arrowEl: unref(arrowRef),\n        arrowOffset: unref(arrowOffset),\n      }),\n    (option) => popperInstanceRef.value?.setOptions(option)\n  )\n})\n\nonBeforeUnmount(() => {\n  triggerTargetAriaStopWatch?.()\n  triggerTargetAriaStopWatch = undefined\n})\n\ndefineExpose({\n  /**\n   * @description popper content element\n   */\n  popperContentRef,\n  /**\n   * @description popperjs instance\n   */\n  popperInstanceRef,\n  /**\n   * @description method for updating popper\n   */\n  updatePopper,\n\n  /**\n   * @description content style\n   */\n  contentStyle,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}