{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { getCurrentInstance, ref } from 'vue';\nimport { getKeysMap, getRowIdentity, toggleRowStatus } from '../util.mjs';\n\nfunction useExpand(watcherData) {\n  const instance = getCurrentInstance();\n  const defaultExpandAll = ref(false);\n  const expandRows = ref([]);\n\n  const updateExpandRows = () => {\n    const data = watcherData.data.value || [];\n    const rowKey = watcherData.rowKey.value;\n\n    if (defaultExpandAll.value) {\n      expandRows.value = data.slice();\n    } else if (rowKey) {\n      const expandRowsMap = getKeysMap(expandRows.value, rowKey);\n      expandRows.value = data.reduce((prev, row) => {\n        const rowId = getRowIdentity(row, rowKey);\n        const rowInfo = expandRowsMap[rowId];\n\n        if (rowInfo) {\n          prev.push(row);\n        }\n\n        return prev;\n      }, []);\n    } else {\n      expandRows.value = [];\n    }\n  };\n\n  const toggleRowExpansion = (row, expanded) => {\n    const changed = toggleRowStatus(expandRows.value, row, expanded);\n\n    if (changed) {\n      instance.emit(\"expand-change\", row, expandRows.value.slice());\n    }\n  };\n\n  const setExpandRowKeys = rowKeys => {\n    instance.store.assertRowKey();\n    const data = watcherData.data.value || [];\n    const rowKey = watcherData.rowKey.value;\n    const keysMap = getKeysMap(data, rowKey);\n    expandRows.value = rowKeys.reduce((prev, cur) => {\n      const info = keysMap[cur];\n\n      if (info) {\n        prev.push(info.row);\n      }\n\n      return prev;\n    }, []);\n  };\n\n  const isRowExpanded = row => {\n    const rowKey = watcherData.rowKey.value;\n\n    if (rowKey) {\n      const expandMap = getKeysMap(expandRows.value, rowKey);\n      return !!expandMap[getRowIdentity(row, rowKey)];\n    }\n\n    return expandRows.value.includes(row);\n  };\n\n  return {\n    updateExpandRows,\n    toggleRowExpansion,\n    setExpandRowKeys,\n    isRowExpanded,\n    states: {\n      expandRows,\n      defaultExpandAll\n    }\n  };\n}\n\nexport { useExpand as default };","map":{"version":3,"mappings":"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","names":["useExpand","watcherData","instance","getCurrentInstance","defaultExpandAll","ref","expandRows","updateExpandRows","data","value","rowKey","slice","expandRowsMap","getKeysMap","reduce","prev","row","rowId","getRowIdentity","rowInfo","push","toggleRowExpansion","expanded","changed","toggleRowStatus","emit","setExpandRowKeys","rowKeys","store","assertRowKey","keysMap","cur","info","isRowExpanded","expandMap","includes","states"],"sources":["../../../../../../../packages/components/table/src/store/expand.ts"],"sourcesContent":["// @ts-nocheck\nimport { getCurrentInstance, ref } from 'vue'\nimport { getKeysMap, getRowIdentity, toggleRowStatus } from '../util'\n\nimport type { Ref } from 'vue'\nimport type { WatcherPropsData } from '.'\nimport type { Table } from '../table/defaults'\n\nfunction useExpand<T>(watcherData: WatcherPropsData<T>) {\n  const instance = getCurrentInstance() as Table<T>\n  const defaultExpandAll = ref(false)\n  const expandRows: Ref<T[]> = ref([])\n  const updateExpandRows = () => {\n    const data = watcherData.data.value || []\n    const rowKey = watcherData.rowKey.value\n    if (defaultExpandAll.value) {\n      expandRows.value = data.slice()\n    } else if (rowKey) {\n      // TODO：这里的代码可以优化\n      const expandRowsMap = getKeysMap(expandRows.value, rowKey)\n      expandRows.value = data.reduce((prev: T[], row: T) => {\n        const rowId = getRowIdentity(row, rowKey)\n        const rowInfo = expandRowsMap[rowId]\n        if (rowInfo) {\n          prev.push(row)\n        }\n        return prev\n      }, [])\n    } else {\n      expandRows.value = []\n    }\n  }\n\n  const toggleRowExpansion = (row: T, expanded?: boolean) => {\n    const changed = toggleRowStatus(expandRows.value, row, expanded)\n    if (changed) {\n      instance.emit('expand-change', row, expandRows.value.slice())\n    }\n  }\n\n  const setExpandRowKeys = (rowKeys: string[]) => {\n    instance.store.assertRowKey()\n    // TODO：这里的代码可以优化\n    const data = watcherData.data.value || []\n    const rowKey = watcherData.rowKey.value\n    const keysMap = getKeysMap(data, rowKey)\n    expandRows.value = rowKeys.reduce((prev: T[], cur: string) => {\n      const info = keysMap[cur]\n      if (info) {\n        prev.push(info.row)\n      }\n      return prev\n    }, [])\n  }\n\n  const isRowExpanded = (row: T): boolean => {\n    const rowKey = watcherData.rowKey.value\n    if (rowKey) {\n      const expandMap = getKeysMap(expandRows.value, rowKey)\n      return !!expandMap[getRowIdentity(row, rowKey)]\n    }\n    return expandRows.value.includes(row)\n  }\n  return {\n    updateExpandRows,\n    toggleRowExpansion,\n    setExpandRowKeys,\n    isRowExpanded,\n    states: {\n      expandRows,\n      defaultExpandAll,\n    },\n  }\n}\n\nexport default useExpand\n"]},"metadata":{},"sourceType":"module"}