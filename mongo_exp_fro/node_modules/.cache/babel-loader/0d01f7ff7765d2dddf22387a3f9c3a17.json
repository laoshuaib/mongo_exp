{"ast":null,"code":"import { ref, onMounted, onBeforeUnmount, watch } from 'vue';\nimport { useResizeObserver } from '@vueuse/core';\n\nconst useAutoResize = props => {\n  const sizer = ref();\n  const width$ = ref(0);\n  const height$ = ref(0);\n  let resizerStopper;\n  onMounted(() => {\n    resizerStopper = useResizeObserver(sizer, ([entry]) => {\n      const {\n        width,\n        height\n      } = entry.contentRect;\n      const {\n        paddingLeft,\n        paddingRight,\n        paddingTop,\n        paddingBottom\n      } = getComputedStyle(entry.target);\n      const left = Number.parseInt(paddingLeft) || 0;\n      const right = Number.parseInt(paddingRight) || 0;\n      const top = Number.parseInt(paddingTop) || 0;\n      const bottom = Number.parseInt(paddingBottom) || 0;\n      width$.value = width - left - right;\n      height$.value = height - top - bottom;\n    }).stop;\n  });\n  onBeforeUnmount(() => {\n    resizerStopper == null ? void 0 : resizerStopper();\n  });\n  watch([width$, height$], ([width, height]) => {\n    var _a;\n\n    (_a = props.onResize) == null ? void 0 : _a.call(props, {\n      width,\n      height\n    });\n  });\n  return {\n    sizer,\n    width: width$,\n    height: height$\n  };\n};\n\nexport { useAutoResize };","map":{"version":3,"mappings":";;;AAEK,MAACA,aAAa,GAAIC,KAAD,IAAW;EAC/B,MAAMC,KAAK,GAAGC,GAAG,EAAjB;EACA,MAAMC,MAAM,GAAGD,GAAG,CAAC,CAAD,CAAlB;EACA,MAAME,OAAO,GAAGF,GAAG,CAAC,CAAD,CAAnB;EACA,IAAIG,cAAJ;EACAC,SAAS,CAAC,MAAM;IACdD,cAAc,GAAGE,iBAAiB,CAACN,KAAD,EAAQ,CAAC,CAACO,KAAD,CAAD,KAAa;MACrD,MAAM;QAAEC,KAAF;QAASC;MAAT,IAAoBF,KAAK,CAACG,WAAhC;MACA,MAAM;QAAEC,WAAF;QAAeC,YAAf;QAA6BC,UAA7B;QAAyCC;MAAzC,IAA2DC,gBAAgB,CAACR,KAAK,CAACS,MAAP,CAAjF;MACA,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAP,CAAgBR,WAAhB,KAAgC,CAA7C;MACA,MAAMS,KAAK,GAAGF,MAAM,CAACC,QAAP,CAAgBP,YAAhB,KAAiC,CAA/C;MACA,MAAMS,GAAG,GAAGH,MAAM,CAACC,QAAP,CAAgBN,UAAhB,KAA+B,CAA3C;MACA,MAAMS,MAAM,GAAGJ,MAAM,CAACC,QAAP,CAAgBL,aAAhB,KAAkC,CAAjD;MACAZ,MAAM,CAACqB,KAAP,GAAef,KAAK,GAAGS,IAAR,GAAeG,KAA9B;MACAjB,OAAO,CAACoB,KAAR,GAAgBd,MAAM,GAAGY,GAAT,GAAeC,MAA/B;IACD,CATiC,CAAjB,CASdE,IATH;EAUD,CAXQ,CAAT;EAYAC,eAAe,CAAC,MAAM;IACpBrB,cAAc,IAAI,IAAlB,GAAyB,KAAK,CAA9B,GAAkCA,cAAc,EAAhD;EACD,CAFc,CAAf;EAGAsB,KAAK,CAAC,CAACxB,MAAD,EAASC,OAAT,CAAD,EAAoB,CAAC,CAACK,KAAD,EAAQC,MAAR,CAAD,KAAqB;IAC5C,IAAIkB,EAAJ;;IACA,CAACA,EAAE,GAAG5B,KAAK,CAAC6B,QAAZ,KAAyB,IAAzB,GAAgC,KAAK,CAArC,GAAyCD,EAAE,CAACE,IAAH,CAAQ9B,KAAR,EAAe;MACtDS,KADsD;MAEtDC;IAFsD,CAAf,CAAzC;EAID,CANI,CAAL;EAOA,OAAO;IACLT,KADK;IAELQ,KAAK,EAAEN,MAFF;IAGLO,MAAM,EAAEN;EAHH,CAAP;AAKF,CAhCK","names":["useAutoResize","props","sizer","ref","width$","height$","resizerStopper","onMounted","useResizeObserver","entry","width","height","contentRect","paddingLeft","paddingRight","paddingTop","paddingBottom","getComputedStyle","target","left","Number","parseInt","right","top","bottom","value","stop","onBeforeUnmount","watch","_a","onResize","call"],"sources":["../../../../../../../packages/components/table-v2/src/composables/use-auto-resize.ts"],"sourcesContent":["import { onBeforeUnmount, onMounted, ref, watch } from 'vue'\nimport { useResizeObserver } from '@vueuse/core'\n\nimport type { AutoResizerProps } from '../auto-resizer'\n\nconst useAutoResize = (props: AutoResizerProps) => {\n  const sizer = ref<HTMLElement>()\n  const width$ = ref(0)\n  const height$ = ref(0)\n\n  let resizerStopper: ReturnType<typeof useResizeObserver>['stop']\n  onMounted(() => {\n    resizerStopper = useResizeObserver(sizer, ([entry]) => {\n      const { width, height } = entry.contentRect\n      const { paddingLeft, paddingRight, paddingTop, paddingBottom } =\n        getComputedStyle(entry.target)\n\n      const left = Number.parseInt(paddingLeft) || 0\n      const right = Number.parseInt(paddingRight) || 0\n      const top = Number.parseInt(paddingTop) || 0\n      const bottom = Number.parseInt(paddingBottom) || 0\n\n      width$.value = width - left - right\n      height$.value = height - top - bottom\n    }).stop\n  })\n\n  onBeforeUnmount(() => {\n    resizerStopper?.()\n  })\n\n  watch([width$, height$], ([width, height]) => {\n    props.onResize?.({\n      width,\n      height,\n    })\n  })\n\n  return {\n    sizer,\n    width: width$,\n    height: height$,\n  }\n}\n\nexport { useAutoResize }\n"]},"metadata":{},"sourceType":"module"}