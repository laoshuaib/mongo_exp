{"ast":null,"code":"import { StarFilled, Star } from '@element-plus/icons-vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isNumber } from '@vueuse/core';\nconst rateProps = buildProps({\n  modelValue: {\n    type: Number,\n    default: 0\n  },\n  id: {\n    type: String,\n    default: void 0\n  },\n  lowThreshold: {\n    type: Number,\n    default: 2\n  },\n  highThreshold: {\n    type: Number,\n    default: 4\n  },\n  max: {\n    type: Number,\n    default: 5\n  },\n  colors: {\n    type: definePropType([Array, Object]),\n    default: () => mutable([\"\", \"\", \"\"])\n  },\n  voidColor: {\n    type: String,\n    default: \"\"\n  },\n  disabledVoidColor: {\n    type: String,\n    default: \"\"\n  },\n  icons: {\n    type: definePropType([Array, Object]),\n    default: () => [StarFilled, StarFilled, StarFilled]\n  },\n  voidIcon: {\n    type: iconPropType,\n    default: () => Star\n  },\n  disabledVoidIcon: {\n    type: iconPropType,\n    default: () => StarFilled\n  },\n  disabled: {\n    type: Boolean\n  },\n  allowHalf: {\n    type: Boolean\n  },\n  showText: {\n    type: Boolean\n  },\n  showScore: {\n    type: Boolean\n  },\n  textColor: {\n    type: String,\n    default: \"\"\n  },\n  texts: {\n    type: definePropType(Array),\n    default: () => mutable([\"Extremely bad\", \"Disappointed\", \"Fair\", \"Satisfied\", \"Surprise\"])\n  },\n  scoreTemplate: {\n    type: String,\n    default: \"{value}\"\n  },\n  size: {\n    type: String,\n    validator: isValidComponentSize\n  },\n  label: {\n    type: String,\n    default: void 0\n  }\n});\nconst rateEmits = {\n  [CHANGE_EVENT]: value => isNumber(value),\n  [UPDATE_MODEL_EVENT]: value => isNumber(value)\n};\nexport { rateEmits, rateProps };","map":{"version":3,"mappings":";;;;;;;;;AAUY,MAACA,SAAS,GAAGC,UAAU,CAAC;EAClCC,UAAU,EAAE;IACVC,IAAI,EAAEC,MADI;IAEVC,OAAO,EAAE;EAFC,CADsB;EAKlCC,EAAE,EAAE;IACFH,IAAI,EAAEI,MADJ;IAEFF,OAAO,EAAE,KAAK;EAFZ,CAL8B;EASlCG,YAAY,EAAE;IACZL,IAAI,EAAEC,MADM;IAEZC,OAAO,EAAE;EAFG,CAToB;EAalCI,aAAa,EAAE;IACbN,IAAI,EAAEC,MADO;IAEbC,OAAO,EAAE;EAFI,CAbmB;EAiBlCK,GAAG,EAAE;IACHP,IAAI,EAAEC,MADH;IAEHC,OAAO,EAAE;EAFN,CAjB6B;EAqBlCM,MAAM,EAAE;IACNR,IAAI,EAAES,cAAc,CAAC,CAACC,KAAD,EAAQC,MAAR,CAAD,CADd;IAENT,OAAO,EAAE,MAAMU,OAAO,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAAD;EAFhB,CArB0B;EAyBlCC,SAAS,EAAE;IACTb,IAAI,EAAEI,MADG;IAETF,OAAO,EAAE;EAFA,CAzBuB;EA6BlCY,iBAAiB,EAAE;IACjBd,IAAI,EAAEI,MADW;IAEjBF,OAAO,EAAE;EAFQ,CA7Be;EAiClCa,KAAK,EAAE;IACLf,IAAI,EAAES,cAAc,CAAC,CAACC,KAAD,EAAQC,MAAR,CAAD,CADf;IAELT,OAAO,EAAE,MAAM,CAACc,UAAD,EAAaA,UAAb,EAAyBA,UAAzB;EAFV,CAjC2B;EAqClCC,QAAQ,EAAE;IACRjB,IAAI,EAAEkB,YADE;IAERhB,OAAO,EAAE,MAAMiB;EAFP,CArCwB;EAyClCC,gBAAgB,EAAE;IAChBpB,IAAI,EAAEkB,YADU;IAEhBhB,OAAO,EAAE,MAAMc;EAFC,CAzCgB;EA6ClCK,QAAQ,EAAE;IACRrB,IAAI,EAAEsB;EADE,CA7CwB;EAgDlCC,SAAS,EAAE;IACTvB,IAAI,EAAEsB;EADG,CAhDuB;EAmDlCE,QAAQ,EAAE;IACRxB,IAAI,EAAEsB;EADE,CAnDwB;EAsDlCG,SAAS,EAAE;IACTzB,IAAI,EAAEsB;EADG,CAtDuB;EAyDlCI,SAAS,EAAE;IACT1B,IAAI,EAAEI,MADG;IAETF,OAAO,EAAE;EAFA,CAzDuB;EA6DlCyB,KAAK,EAAE;IACL3B,IAAI,EAAES,cAAc,CAACC,KAAD,CADf;IAELR,OAAO,EAAE,MAAMU,OAAO,CAAC,CACrB,eADqB,EAErB,cAFqB,EAGrB,MAHqB,EAIrB,WAJqB,EAKrB,UALqB,CAAD;EAFjB,CA7D2B;EAuElCgB,aAAa,EAAE;IACb5B,IAAI,EAAEI,MADO;IAEbF,OAAO,EAAE;EAFI,CAvEmB;EA2ElC2B,IAAI,EAAE;IACJ7B,IAAI,EAAEI,MADF;IAEJ0B,SAAS,EAAEC;EAFP,CA3E4B;EA+ElCC,KAAK,EAAE;IACLhC,IAAI,EAAEI,MADD;IAELF,OAAO,EAAE,KAAK;EAFT;AA/E2B,CAAD,CAAvB;AAoFA,MAAC+B,SAAS,GAAG;EACvB,CAACC,YAAD,GAAiBC,KAAD,IAAWC,QAAQ,CAACD,KAAD,CADZ;EAEvB,CAACE,kBAAD,GAAuBF,KAAD,IAAWC,QAAQ,CAACD,KAAD;AAFlB,CAAb","names":["rateProps","buildProps","modelValue","type","Number","default","id","String","lowThreshold","highThreshold","max","colors","definePropType","Array","Object","mutable","voidColor","disabledVoidColor","icons","StarFilled","voidIcon","iconPropType","Star","disabledVoidIcon","disabled","Boolean","allowHalf","showText","showScore","textColor","texts","scoreTemplate","size","validator","isValidComponentSize","label","rateEmits","CHANGE_EVENT","value","isNumber","UPDATE_MODEL_EVENT"],"sources":["../../../../../../packages/components/rate/src/rate.ts"],"sourcesContent":["import { Star, StarFilled } from '@element-plus/icons-vue'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport {\n  buildProps,\n  definePropType,\n  iconPropType,\n  isNumber,\n  isValidComponentSize,\n  mutable,\n} from '@element-plus/utils'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { Component, ExtractPropTypes, PropType } from 'vue'\nimport type Rate from './rate.vue'\n\nexport const rateProps = buildProps({\n  modelValue: {\n    type: Number,\n    default: 0,\n  },\n  id: {\n    type: String,\n    default: undefined,\n  },\n  lowThreshold: {\n    type: Number,\n    default: 2,\n  },\n  highThreshold: {\n    type: Number,\n    default: 4,\n  },\n  max: {\n    type: Number,\n    default: 5,\n  },\n  colors: {\n    type: definePropType<string[] | Record<number, string>>([Array, Object]),\n    default: () => mutable(['', '', ''] as const),\n  },\n  voidColor: {\n    type: String,\n    default: '',\n  },\n  disabledVoidColor: {\n    type: String,\n    default: '',\n  },\n  icons: {\n    type: definePropType<\n      Array<string | Component> | Record<number, string | Component>\n    >([Array, Object]),\n    default: () => [StarFilled, StarFilled, StarFilled],\n  },\n  voidIcon: {\n    type: iconPropType,\n    default: () => Star,\n  },\n  disabledVoidIcon: {\n    type: iconPropType,\n    default: () => StarFilled,\n  },\n  disabled: {\n    type: Boolean,\n  },\n  allowHalf: {\n    type: Boolean,\n  },\n  showText: {\n    type: Boolean,\n  },\n  showScore: {\n    type: Boolean,\n  },\n  textColor: {\n    type: String,\n    default: '',\n  },\n  texts: {\n    type: definePropType<string[]>(Array),\n    default: () =>\n      mutable([\n        'Extremely bad',\n        'Disappointed',\n        'Fair',\n        'Satisfied',\n        'Surprise',\n      ] as const),\n  },\n  scoreTemplate: {\n    type: String,\n    default: '{value}',\n  },\n  size: {\n    type: String as PropType<ComponentSize>,\n    validator: isValidComponentSize,\n  },\n  label: {\n    type: String,\n    default: undefined,\n  },\n} as const)\n\nexport type RateProps = ExtractPropTypes<typeof rateProps>\n\nexport const rateEmits = {\n  [CHANGE_EVENT]: (value: number) => isNumber(value),\n  [UPDATE_MODEL_EVENT]: (value: number) => isNumber(value),\n}\nexport type RateEmits = typeof rateEmits\n\nexport type RateInstance = InstanceType<typeof Rate>\n"]},"metadata":{},"sourceType":"module"}