{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport '../../../utils/index.mjs';\nimport { hasOwn } from '@vue/shared';\n\nconst hsv2hsl = function (hue, sat, val) {\n  return [hue, sat * val / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0, hue / 2];\n};\n\nconst isOnePointZero = function (n) {\n  return typeof n === \"string\" && n.includes(\".\") && Number.parseFloat(n) === 1;\n};\n\nconst isPercentage = function (n) {\n  return typeof n === \"string\" && n.includes(\"%\");\n};\n\nconst bound01 = function (value, max) {\n  if (isOnePointZero(value)) value = \"100%\";\n  const processPercent = isPercentage(value);\n  value = Math.min(max, Math.max(0, Number.parseFloat(`${value}`)));\n\n  if (processPercent) {\n    value = Number.parseInt(`${value * max}`, 10) / 100;\n  }\n\n  if (Math.abs(value - max) < 1e-6) {\n    return 1;\n  }\n\n  return value % max / Number.parseFloat(max);\n};\n\nconst INT_HEX_MAP = {\n  10: \"A\",\n  11: \"B\",\n  12: \"C\",\n  13: \"D\",\n  14: \"E\",\n  15: \"F\"\n};\n\nconst hexOne = function (value) {\n  value = Math.min(Math.round(value), 255);\n  const high = Math.floor(value / 16);\n  const low = value % 16;\n  return `${INT_HEX_MAP[high] || high}${INT_HEX_MAP[low] || low}`;\n};\n\nconst toHex = function ({\n  r,\n  g,\n  b\n}) {\n  if (Number.isNaN(+r) || Number.isNaN(+g) || Number.isNaN(+b)) return \"\";\n  return `#${hexOne(r)}${hexOne(g)}${hexOne(b)}`;\n};\n\nconst HEX_INT_MAP = {\n  A: 10,\n  B: 11,\n  C: 12,\n  D: 13,\n  E: 14,\n  F: 15\n};\n\nconst parseHexChannel = function (hex) {\n  if (hex.length === 2) {\n    return (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 + (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]);\n  }\n\n  return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1];\n};\n\nconst hsl2hsv = function (hue, sat, light) {\n  sat = sat / 100;\n  light = light / 100;\n  let smin = sat;\n  const lmin = Math.max(light, 0.01);\n  light *= 2;\n  sat *= light <= 1 ? light : 2 - light;\n  smin *= lmin <= 1 ? lmin : 2 - lmin;\n  const v = (light + sat) / 2;\n  const sv = light === 0 ? 2 * smin / (lmin + smin) : 2 * sat / (light + sat);\n  return {\n    h: hue,\n    s: sv * 100,\n    v: v * 100\n  };\n};\n\nconst rgb2hsv = function (r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h;\n  const v = max;\n  const d = max - min;\n  const s = max === 0 ? 0 : d / max;\n\n  if (max === min) {\n    h = 0;\n  } else {\n    switch (max) {\n      case r:\n        {\n          h = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        }\n\n      case g:\n        {\n          h = (b - r) / d + 2;\n          break;\n        }\n\n      case b:\n        {\n          h = (r - g) / d + 4;\n          break;\n        }\n    }\n\n    h /= 6;\n  }\n\n  return {\n    h: h * 360,\n    s: s * 100,\n    v: v * 100\n  };\n};\n\nconst hsv2rgb = function (h, s, v) {\n  h = bound01(h, 360) * 6;\n  s = bound01(s, 100);\n  v = bound01(v, 100);\n  const i = Math.floor(h);\n  const f = h - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  const mod = i % 6;\n  const r = [v, q, p, p, t, v][mod];\n  const g = [t, v, v, q, p, p][mod];\n  const b = [p, p, t, v, v, q][mod];\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255)\n  };\n};\n\nclass Color {\n  constructor(options) {\n    this._hue = 0;\n    this._saturation = 100;\n    this._value = 100;\n    this._alpha = 100;\n    this.enableAlpha = false;\n    this.format = \"hex\";\n    this.value = \"\";\n    options = options || {};\n\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option];\n      }\n    }\n\n    if (options.value) {\n      this.fromString(options.value);\n    } else {\n      this.doOnChange();\n    }\n  }\n\n  set(prop, value) {\n    if (arguments.length === 1 && typeof prop === \"object\") {\n      for (const p in prop) {\n        if (hasOwn(prop, p)) {\n          this.set(p, prop[p]);\n        }\n      }\n\n      return;\n    }\n\n    this[`_${prop}`] = value;\n    this.doOnChange();\n  }\n\n  get(prop) {\n    if (prop === \"alpha\") {\n      return Math.floor(this[`_${prop}`]);\n    }\n\n    return this[`_${prop}`];\n  }\n\n  toRgb() {\n    return hsv2rgb(this._hue, this._saturation, this._value);\n  }\n\n  fromString(value) {\n    if (!value) {\n      this._hue = 0;\n      this._saturation = 100;\n      this._value = 100;\n      this.doOnChange();\n      return;\n    }\n\n    const fromHSV = (h, s, v) => {\n      this._hue = Math.max(0, Math.min(360, h));\n      this._saturation = Math.max(0, Math.min(100, s));\n      this._value = Math.max(0, Math.min(100, v));\n      this.doOnChange();\n    };\n\n    if (value.includes(\"hsl\")) {\n      const parts = value.replace(/hsla|hsl|\\(|\\)/gm, \"\").split(/\\s|,/g).filter(val => val !== \"\").map((val, index) => index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));\n\n      if (parts.length === 4) {\n        this._alpha = Number.parseFloat(parts[3]) * 100;\n      } else if (parts.length === 3) {\n        this._alpha = 100;\n      }\n\n      if (parts.length >= 3) {\n        const {\n          h,\n          s,\n          v\n        } = hsl2hsv(parts[0], parts[1], parts[2]);\n        fromHSV(h, s, v);\n      }\n    } else if (value.includes(\"hsv\")) {\n      const parts = value.replace(/hsva|hsv|\\(|\\)/gm, \"\").split(/\\s|,/g).filter(val => val !== \"\").map((val, index) => index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));\n\n      if (parts.length === 4) {\n        this._alpha = Number.parseFloat(parts[3]) * 100;\n      } else if (parts.length === 3) {\n        this._alpha = 100;\n      }\n\n      if (parts.length >= 3) {\n        fromHSV(parts[0], parts[1], parts[2]);\n      }\n    } else if (value.includes(\"rgb\")) {\n      const parts = value.replace(/rgba|rgb|\\(|\\)/gm, \"\").split(/\\s|,/g).filter(val => val !== \"\").map((val, index) => index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10));\n\n      if (parts.length === 4) {\n        this._alpha = Number.parseFloat(parts[3]) * 100;\n      } else if (parts.length === 3) {\n        this._alpha = 100;\n      }\n\n      if (parts.length >= 3) {\n        const {\n          h,\n          s,\n          v\n        } = rgb2hsv(parts[0], parts[1], parts[2]);\n        fromHSV(h, s, v);\n      }\n    } else if (value.includes(\"#\")) {\n      const hex = value.replace(\"#\", \"\").trim();\n      if (!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(hex)) return;\n      let r, g, b;\n\n      if (hex.length === 3) {\n        r = parseHexChannel(hex[0] + hex[0]);\n        g = parseHexChannel(hex[1] + hex[1]);\n        b = parseHexChannel(hex[2] + hex[2]);\n      } else if (hex.length === 6 || hex.length === 8) {\n        r = parseHexChannel(hex.slice(0, 2));\n        g = parseHexChannel(hex.slice(2, 4));\n        b = parseHexChannel(hex.slice(4, 6));\n      }\n\n      if (hex.length === 8) {\n        this._alpha = parseHexChannel(hex.slice(6)) / 255 * 100;\n      } else if (hex.length === 3 || hex.length === 6) {\n        this._alpha = 100;\n      }\n\n      const {\n        h,\n        s,\n        v\n      } = rgb2hsv(r, g, b);\n      fromHSV(h, s, v);\n    }\n  }\n\n  compare(color) {\n    return Math.abs(color._hue - this._hue) < 2 && Math.abs(color._saturation - this._saturation) < 1 && Math.abs(color._value - this._value) < 1 && Math.abs(color._alpha - this._alpha) < 1;\n  }\n\n  doOnChange() {\n    const {\n      _hue,\n      _saturation,\n      _value,\n      _alpha,\n      format\n    } = this;\n\n    if (this.enableAlpha) {\n      switch (format) {\n        case \"hsl\":\n          {\n            const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);\n            this.value = `hsla(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%, ${this.get(\"alpha\") / 100})`;\n            break;\n          }\n\n        case \"hsv\":\n          {\n            this.value = `hsva(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%, ${this.get(\"alpha\") / 100})`;\n            break;\n          }\n\n        case \"hex\":\n          {\n            this.value = `${toHex(hsv2rgb(_hue, _saturation, _value))}${hexOne(_alpha * 255 / 100)}`;\n            break;\n          }\n\n        default:\n          {\n            const {\n              r,\n              g,\n              b\n            } = hsv2rgb(_hue, _saturation, _value);\n            this.value = `rgba(${r}, ${g}, ${b}, ${this.get(\"alpha\") / 100})`;\n          }\n      }\n    } else {\n      switch (format) {\n        case \"hsl\":\n          {\n            const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100);\n            this.value = `hsl(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(hsl[2] * 100)}%)`;\n            break;\n          }\n\n        case \"hsv\":\n          {\n            this.value = `hsv(${_hue}, ${Math.round(_saturation)}%, ${Math.round(_value)}%)`;\n            break;\n          }\n\n        case \"rgb\":\n          {\n            const {\n              r,\n              g,\n              b\n            } = hsv2rgb(_hue, _saturation, _value);\n            this.value = `rgb(${r}, ${g}, ${b})`;\n            break;\n          }\n\n        default:\n          {\n            this.value = toHex(hsv2rgb(_hue, _saturation, _value));\n          }\n      }\n    }\n  }\n\n}\n\nexport { Color as default };","map":{"version":3,"mappings":"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","names":["hsv2hsl","hue","sat","val","isOnePointZero","n","includes","Number","parseFloat","isPercentage","bound01","value","max","processPercent","Math","min","parseInt","abs","INT_HEX_MAP","hexOne","round","high","floor","low","toHex","r","g","b","isNaN","HEX_INT_MAP","A","B","C","D","E","F","parseHexChannel","hex","length","toUpperCase","hsl2hsv","light","smin","lmin","v","sv","h","s","rgb2hsv","d","hsv2rgb","i","f","p","q","t","mod","Color","constructor","options","_hue","_saturation","_value","_alpha","enableAlpha","format","option","hasOwn","fromString","doOnChange","set","prop","arguments","get","toRgb","fromHSV","parts","replace","split","filter","map","index","trim","test","slice","compare","color","hsl"],"sources":["../../../../../../packages/components/color-picker/src/color.ts"],"sourcesContent":["// @ts-nocheck\nimport { hasOwn } from '@element-plus/utils'\n\nconst hsv2hsl = function (hue: number, sat: number, val: number) {\n  return [\n    hue,\n    (sat * val) / ((hue = (2 - sat) * val) < 1 ? hue : 2 - hue) || 0,\n    hue / 2,\n  ]\n}\n\n// Need to handle 1.0 as 100%, since once it is a number, there is no difference between it and 1\n// <http://stackoverflow.com/questions/7422072/javascript-how-to-detect-number-as-a-decimal-including-1-0>\nconst isOnePointZero = function (n: unknown) {\n  return typeof n === 'string' && n.includes('.') && Number.parseFloat(n) === 1\n}\n\nconst isPercentage = function (n: unknown) {\n  return typeof n === 'string' && n.includes('%')\n}\n\n// Take input from [0, n] and return it as [0, 1]\nconst bound01 = function (value: number | string, max: number | string) {\n  if (isOnePointZero(value)) value = '100%'\n\n  const processPercent = isPercentage(value)\n  value = Math.min(max as number, Math.max(0, Number.parseFloat(`${value}`)))\n\n  // Automatically convert percentage into number\n  if (processPercent) {\n    value = Number.parseInt(`${value * (max as number)}`, 10) / 100\n  }\n\n  // Handle floating point rounding errors\n  if (Math.abs(value - (max as number)) < 0.000001) {\n    return 1\n  }\n\n  // Convert into [0, 1] range if it isn't already\n  return (value % (max as number)) / Number.parseFloat(max as string)\n}\n\nconst INT_HEX_MAP = { 10: 'A', 11: 'B', 12: 'C', 13: 'D', 14: 'E', 15: 'F' }\n\nconst hexOne = function (value: number) {\n  value = Math.min(Math.round(value), 255)\n  const high = Math.floor(value / 16)\n  const low = value % 16\n  return `${INT_HEX_MAP[high] || high}${INT_HEX_MAP[low] || low}`\n}\n\nconst toHex = function ({ r, g, b }) {\n  if (Number.isNaN(+r) || Number.isNaN(+g) || Number.isNaN(+b)) return ''\n\n  return `#${hexOne(r)}${hexOne(g)}${hexOne(b)}`\n}\n\nconst HEX_INT_MAP = { A: 10, B: 11, C: 12, D: 13, E: 14, F: 15 }\n\nconst parseHexChannel = function (hex: string) {\n  if (hex.length === 2) {\n    return (\n      (HEX_INT_MAP[hex[0].toUpperCase()] || +hex[0]) * 16 +\n      (HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1])\n    )\n  }\n\n  return HEX_INT_MAP[hex[1].toUpperCase()] || +hex[1]\n}\n\nconst hsl2hsv = function (hue: number, sat: number, light: number) {\n  sat = sat / 100\n  light = light / 100\n  let smin = sat\n  const lmin = Math.max(light, 0.01)\n  // let sv\n  // let v\n\n  light *= 2\n  sat *= light <= 1 ? light : 2 - light\n  smin *= lmin <= 1 ? lmin : 2 - lmin\n  const v = (light + sat) / 2\n  const sv =\n    light === 0 ? (2 * smin) / (lmin + smin) : (2 * sat) / (light + sat)\n\n  return {\n    h: hue,\n    s: sv * 100,\n    v: v * 100,\n  }\n}\n\n// `rgbToHsv`\n// Converts an RGB color value to HSV\n// *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n// *Returns:* { h, s, v } in [0,1]\nconst rgb2hsv = function (r, g, b) {\n  r = bound01(r, 255)\n  g = bound01(g, 255)\n  b = bound01(b, 255)\n\n  const max = Math.max(r, g, b)\n  const min = Math.min(r, g, b)\n  let h\n  const v = max\n\n  const d = max - min\n  const s = max === 0 ? 0 : d / max\n\n  if (max === min) {\n    h = 0 // achromatic\n  } else {\n    switch (max) {\n      case r: {\n        h = (g - b) / d + (g < b ? 6 : 0)\n        break\n      }\n      case g: {\n        h = (b - r) / d + 2\n        break\n      }\n      case b: {\n        h = (r - g) / d + 4\n        break\n      }\n    }\n    h /= 6\n  }\n\n  return { h: h * 360, s: s * 100, v: v * 100 }\n}\n\n// `hsvToRgb`\n// Converts an HSV color value to RGB.\n// *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n// *Returns:* { r, g, b } in the set [0, 255]\nconst hsv2rgb = function (h, s, v) {\n  h = bound01(h, 360) * 6\n  s = bound01(s, 100)\n  v = bound01(v, 100)\n\n  const i = Math.floor(h)\n  const f = h - i\n  const p = v * (1 - s)\n  const q = v * (1 - f * s)\n  const t = v * (1 - (1 - f) * s)\n  const mod = i % 6\n  const r = [v, q, p, p, t, v][mod]\n  const g = [t, v, v, q, p, p][mod]\n  const b = [p, p, t, v, v, q][mod]\n\n  return {\n    r: Math.round(r * 255),\n    g: Math.round(g * 255),\n    b: Math.round(b * 255),\n  }\n}\n\nexport interface Options {\n  enableAlpha: boolean\n  format: string\n  value?: string\n}\n\nexport default class Color {\n  private _hue = 0\n  private _saturation = 100\n  private _value = 100\n  private _alpha = 100\n  public enableAlpha = false\n  public format = 'hex'\n  public value = ''\n  public selected?: boolean\n  constructor(options?: Options) {\n    options = options || ({} as Options)\n\n    for (const option in options) {\n      if (hasOwn(options, option)) {\n        this[option] = options[option]\n      }\n    }\n    if (options.value) {\n      this.fromString(options.value)\n    } else {\n      this.doOnChange()\n    }\n  }\n\n  set(prop: { [key: string]: any } | any, value?: number) {\n    if (arguments.length === 1 && typeof prop === 'object') {\n      for (const p in prop) {\n        if (hasOwn(prop, p)) {\n          this.set(p, prop[p])\n        }\n      }\n\n      return\n    }\n\n    this[`_${prop}`] = value\n    this.doOnChange()\n  }\n\n  get(prop: string) {\n    if (prop === 'alpha') {\n      return Math.floor(this[`_${prop}`])\n    }\n    return this[`_${prop}`]\n  }\n\n  toRgb() {\n    return hsv2rgb(this._hue, this._saturation, this._value)\n  }\n\n  fromString(value) {\n    if (!value) {\n      this._hue = 0\n      this._saturation = 100\n      this._value = 100\n\n      this.doOnChange()\n      return\n    }\n\n    const fromHSV = (h, s, v) => {\n      this._hue = Math.max(0, Math.min(360, h))\n      this._saturation = Math.max(0, Math.min(100, s))\n      this._value = Math.max(0, Math.min(100, v))\n\n      this.doOnChange()\n    }\n\n    if (value.includes('hsl')) {\n      const parts = value\n        .replace(/hsla|hsl|\\(|\\)/gm, '')\n        .split(/\\s|,/g)\n        .filter((val) => val !== '')\n        .map((val, index) =>\n          index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10)\n        )\n\n      if (parts.length === 4) {\n        this._alpha = Number.parseFloat(parts[3]) * 100\n      } else if (parts.length === 3) {\n        this._alpha = 100\n      }\n      if (parts.length >= 3) {\n        const { h, s, v } = hsl2hsv(parts[0], parts[1], parts[2])\n        fromHSV(h, s, v)\n      }\n    } else if (value.includes('hsv')) {\n      const parts = value\n        .replace(/hsva|hsv|\\(|\\)/gm, '')\n        .split(/\\s|,/g)\n        .filter((val) => val !== '')\n        .map((val, index) =>\n          index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10)\n        )\n\n      if (parts.length === 4) {\n        this._alpha = Number.parseFloat(parts[3]) * 100\n      } else if (parts.length === 3) {\n        this._alpha = 100\n      }\n      if (parts.length >= 3) {\n        fromHSV(parts[0], parts[1], parts[2])\n      }\n    } else if (value.includes('rgb')) {\n      const parts = value\n        .replace(/rgba|rgb|\\(|\\)/gm, '')\n        .split(/\\s|,/g)\n        .filter((val) => val !== '')\n        .map((val, index) =>\n          index > 2 ? Number.parseFloat(val) : Number.parseInt(val, 10)\n        )\n\n      if (parts.length === 4) {\n        this._alpha = Number.parseFloat(parts[3]) * 100\n      } else if (parts.length === 3) {\n        this._alpha = 100\n      }\n      if (parts.length >= 3) {\n        const { h, s, v } = rgb2hsv(parts[0], parts[1], parts[2])\n        fromHSV(h, s, v)\n      }\n    } else if (value.includes('#')) {\n      const hex = value.replace('#', '').trim()\n      if (!/^[0-9a-fA-F]{3}$|^[0-9a-fA-F]{6}$|^[0-9a-fA-F]{8}$/.test(hex))\n        return\n      let r, g, b\n\n      if (hex.length === 3) {\n        r = parseHexChannel(hex[0] + hex[0])\n        g = parseHexChannel(hex[1] + hex[1])\n        b = parseHexChannel(hex[2] + hex[2])\n      } else if (hex.length === 6 || hex.length === 8) {\n        r = parseHexChannel(hex.slice(0, 2))\n        g = parseHexChannel(hex.slice(2, 4))\n        b = parseHexChannel(hex.slice(4, 6))\n      }\n\n      if (hex.length === 8) {\n        this._alpha = (parseHexChannel(hex.slice(6)) / 255) * 100\n      } else if (hex.length === 3 || hex.length === 6) {\n        this._alpha = 100\n      }\n\n      const { h, s, v } = rgb2hsv(r, g, b)\n      fromHSV(h, s, v)\n    }\n  }\n\n  compare(color) {\n    return (\n      Math.abs(color._hue - this._hue) < 2 &&\n      Math.abs(color._saturation - this._saturation) < 1 &&\n      Math.abs(color._value - this._value) < 1 &&\n      Math.abs(color._alpha - this._alpha) < 1\n    )\n  }\n\n  doOnChange() {\n    const { _hue, _saturation, _value, _alpha, format } = this\n\n    if (this.enableAlpha) {\n      switch (format) {\n        case 'hsl': {\n          const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100)\n          this.value = `hsla(${_hue}, ${Math.round(\n            hsl[1] * 100\n          )}%, ${Math.round(hsl[2] * 100)}%, ${this.get('alpha') / 100})`\n          break\n        }\n        case 'hsv': {\n          this.value = `hsva(${_hue}, ${Math.round(_saturation)}%, ${Math.round(\n            _value\n          )}%, ${this.get('alpha') / 100})`\n          break\n        }\n        case 'hex': {\n          this.value = `${toHex(hsv2rgb(_hue, _saturation, _value))}${hexOne(\n            (_alpha * 255) / 100\n          )}`\n          break\n        }\n        default: {\n          const { r, g, b } = hsv2rgb(_hue, _saturation, _value)\n          this.value = `rgba(${r}, ${g}, ${b}, ${this.get('alpha') / 100})`\n        }\n      }\n    } else {\n      switch (format) {\n        case 'hsl': {\n          const hsl = hsv2hsl(_hue, _saturation / 100, _value / 100)\n          this.value = `hsl(${_hue}, ${Math.round(hsl[1] * 100)}%, ${Math.round(\n            hsl[2] * 100\n          )}%)`\n          break\n        }\n        case 'hsv': {\n          this.value = `hsv(${_hue}, ${Math.round(_saturation)}%, ${Math.round(\n            _value\n          )}%)`\n          break\n        }\n        case 'rgb': {\n          const { r, g, b } = hsv2rgb(_hue, _saturation, _value)\n          this.value = `rgb(${r}, ${g}, ${b})`\n          break\n        }\n        default: {\n          this.value = toHex(hsv2rgb(_hue, _saturation, _value))\n        }\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}