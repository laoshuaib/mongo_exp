{"ast":null,"code":"import { inject } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { getFixedColumnOffset, ensurePosition, getFixedColumnsClass } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nfunction useStyles(props) {\n  const parent = inject(TABLE_INJECTION_KEY);\n  const ns = useNamespace(\"table\");\n\n  const getRowStyle = (row, rowIndex) => {\n    const rowStyle = parent == null ? void 0 : parent.props.rowStyle;\n\n    if (typeof rowStyle === \"function\") {\n      return rowStyle.call(null, {\n        row,\n        rowIndex\n      });\n    }\n\n    return rowStyle || null;\n  };\n\n  const getRowClass = (row, rowIndex) => {\n    const classes = [ns.e(\"row\")];\n\n    if ((parent == null ? void 0 : parent.props.highlightCurrentRow) && row === props.store.states.currentRow.value) {\n      classes.push(\"current-row\");\n    }\n\n    if (props.stripe && rowIndex % 2 === 1) {\n      classes.push(ns.em(\"row\", \"striped\"));\n    }\n\n    const rowClassName = parent == null ? void 0 : parent.props.rowClassName;\n\n    if (typeof rowClassName === \"string\") {\n      classes.push(rowClassName);\n    } else if (typeof rowClassName === \"function\") {\n      classes.push(rowClassName.call(null, {\n        row,\n        rowIndex\n      }));\n    }\n\n    return classes;\n  };\n\n  const getCellStyle = (rowIndex, columnIndex, row, column) => {\n    const cellStyle = parent == null ? void 0 : parent.props.cellStyle;\n    let cellStyles = cellStyle != null ? cellStyle : {};\n\n    if (typeof cellStyle === \"function\") {\n      cellStyles = cellStyle.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      });\n    }\n\n    const fixedStyle = column.isSubColumn ? null : getFixedColumnOffset(columnIndex, props == null ? void 0 : props.fixed, props.store);\n    ensurePosition(fixedStyle, \"left\");\n    ensurePosition(fixedStyle, \"right\");\n    return Object.assign({}, cellStyles, fixedStyle);\n  };\n\n  const getCellClass = (rowIndex, columnIndex, row, column) => {\n    const fixedClasses = column.isSubColumn ? [] : getFixedColumnsClass(ns.b(), columnIndex, props == null ? void 0 : props.fixed, props.store);\n    const classes = [column.id, column.align, column.className, ...fixedClasses];\n    const cellClassName = parent == null ? void 0 : parent.props.cellClassName;\n\n    if (typeof cellClassName === \"string\") {\n      classes.push(cellClassName);\n    } else if (typeof cellClassName === \"function\") {\n      classes.push(cellClassName.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column\n      }));\n    }\n\n    classes.push(ns.e(\"cell\"));\n    return classes.filter(className => Boolean(className)).join(\" \");\n  };\n\n  const getSpan = (row, column, rowIndex, columnIndex) => {\n    let rowspan = 1;\n    let colspan = 1;\n    const fn = parent == null ? void 0 : parent.props.spanMethod;\n\n    if (typeof fn === \"function\") {\n      const result = fn({\n        row,\n        column,\n        rowIndex,\n        columnIndex\n      });\n\n      if (Array.isArray(result)) {\n        rowspan = result[0];\n        colspan = result[1];\n      } else if (typeof result === \"object\") {\n        rowspan = result.rowspan;\n        colspan = result.colspan;\n      }\n    }\n\n    return {\n      rowspan,\n      colspan\n    };\n  };\n\n  const getColspanRealWidth = (columns, colspan, index) => {\n    if (colspan < 1) {\n      return columns[index].realWidth;\n    }\n\n    const widthArr = columns.map(({\n      realWidth,\n      width\n    }) => realWidth || width).slice(index, index + colspan);\n    return Number(widthArr.reduce((acc, width) => Number(acc) + Number(width), -1));\n  };\n\n  return {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth\n  };\n}\n\nexport { useStyles as default };","map":{"version":3,"mappings":"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","names":["useStyles","props","parent","inject","TABLE_INJECTION_KEY","ns","useNamespace","getRowStyle","row","rowIndex","rowStyle","call","getRowClass","classes","e","highlightCurrentRow","store","states","currentRow","value","push","stripe","em","rowClassName","getCellStyle","columnIndex","column","cellStyle","cellStyles","fixedStyle","isSubColumn","getFixedColumnOffset","fixed","ensurePosition","Object","assign","getCellClass","fixedClasses","getFixedColumnsClass","b","id","align","className","cellClassName","filter","Boolean","join","getSpan","rowspan","colspan","fn","spanMethod","result","Array","isArray","getColspanRealWidth","columns","index","realWidth","widthArr","map","width","slice","Number","reduce","acc"],"sources":["../../../../../../../packages/components/table/src/table-body/styles-helper.ts"],"sourcesContent":["// @ts-nocheck\nimport { inject } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport {\n  ensurePosition,\n  getFixedColumnOffset,\n  getFixedColumnsClass,\n} from '../util'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { TableBodyProps } from './defaults'\n\nfunction useStyles<T>(props: Partial<TableBodyProps<T>>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const ns = useNamespace('table')\n\n  const getRowStyle = (row: T, rowIndex: number) => {\n    const rowStyle = parent?.props.rowStyle\n    if (typeof rowStyle === 'function') {\n      return rowStyle.call(null, {\n        row,\n        rowIndex,\n      })\n    }\n    return rowStyle || null\n  }\n\n  const getRowClass = (row: T, rowIndex: number) => {\n    const classes = [ns.e('row')]\n    if (\n      parent?.props.highlightCurrentRow &&\n      row === props.store.states.currentRow.value\n    ) {\n      classes.push('current-row')\n    }\n\n    if (props.stripe && rowIndex % 2 === 1) {\n      classes.push(ns.em('row', 'striped'))\n    }\n    const rowClassName = parent?.props.rowClassName\n    if (typeof rowClassName === 'string') {\n      classes.push(rowClassName)\n    } else if (typeof rowClassName === 'function') {\n      classes.push(\n        rowClassName.call(null, {\n          row,\n          rowIndex,\n        })\n      )\n    }\n    return classes\n  }\n\n  const getCellStyle = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    const cellStyle = parent?.props.cellStyle\n    let cellStyles = cellStyle ?? {}\n    if (typeof cellStyle === 'function') {\n      cellStyles = cellStyle.call(null, {\n        rowIndex,\n        columnIndex,\n        row,\n        column,\n      })\n    }\n    const fixedStyle = column.isSubColumn\n      ? null\n      : getFixedColumnOffset(columnIndex, props?.fixed, props.store)\n    ensurePosition(fixedStyle, 'left')\n    ensurePosition(fixedStyle, 'right')\n    return Object.assign({}, cellStyles, fixedStyle)\n  }\n\n  const getCellClass = (\n    rowIndex: number,\n    columnIndex: number,\n    row: T,\n    column: TableColumnCtx<T>\n  ) => {\n    const fixedClasses = column.isSubColumn\n      ? []\n      : getFixedColumnsClass(ns.b(), columnIndex, props?.fixed, props.store)\n    const classes = [column.id, column.align, column.className, ...fixedClasses]\n    const cellClassName = parent?.props.cellClassName\n    if (typeof cellClassName === 'string') {\n      classes.push(cellClassName)\n    } else if (typeof cellClassName === 'function') {\n      classes.push(\n        cellClassName.call(null, {\n          rowIndex,\n          columnIndex,\n          row,\n          column,\n        })\n      )\n    }\n    classes.push(ns.e('cell'))\n    return classes.filter((className) => Boolean(className)).join(' ')\n  }\n  const getSpan = (\n    row: T,\n    column: TableColumnCtx<T>,\n    rowIndex: number,\n    columnIndex: number\n  ) => {\n    let rowspan = 1\n    let colspan = 1\n    const fn = parent?.props.spanMethod\n    if (typeof fn === 'function') {\n      const result = fn({\n        row,\n        column,\n        rowIndex,\n        columnIndex,\n      })\n      if (Array.isArray(result)) {\n        rowspan = result[0]\n        colspan = result[1]\n      } else if (typeof result === 'object') {\n        rowspan = result.rowspan\n        colspan = result.colspan\n      }\n    }\n    return { rowspan, colspan }\n  }\n  const getColspanRealWidth = (\n    columns: TableColumnCtx<T>[],\n    colspan: number,\n    index: number\n  ): number => {\n    if (colspan < 1) {\n      return columns[index].realWidth\n    }\n    const widthArr = columns\n      .map(({ realWidth, width }) => realWidth || width)\n      .slice(index, index + colspan)\n    return Number(\n      widthArr.reduce((acc, width) => Number(acc) + Number(width), -1)\n    )\n  }\n\n  return {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n  }\n}\n\nexport default useStyles\n"]},"metadata":{},"sourceType":"module"}