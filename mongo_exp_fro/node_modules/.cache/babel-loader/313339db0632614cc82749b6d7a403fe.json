{"ast":null,"code":"export { castArray as ensureArray } from 'lodash-unified';\n\nconst unique = arr => [...new Set(arr)];\n\nconst castArray = arr => {\n  if (!arr && arr !== 0) return [];\n  return Array.isArray(arr) ? arr : [arr];\n};\n\nexport { castArray, unique };","map":{"version":3,"mappings":";;AAAY,MAACA,MAAM,GAAIC,GAAD,IAAS,CAAC,GAAG,IAAIC,GAAJ,CAAQD,GAAR,CAAJ,CAAnB;;AACA,MAACE,SAAS,GAAIF,GAAD,IAAS;EAChC,IAAI,CAACA,GAAD,IAAQA,GAAG,KAAK,CAApB,EACE,OAAO,EAAP;EACF,OAAOG,KAAK,CAACC,OAAN,CAAcJ,GAAd,IAAqBA,GAArB,GAA2B,CAACA,GAAD,CAAlC;AACF,CAJY","names":["unique","arr","Set","castArray","Array","isArray"],"sources":["../../../../packages/utils/arrays.ts"],"sourcesContent":["export const unique = <T>(arr: T[]) => [...new Set(arr)]\n\ntype Many<T> = T | ReadonlyArray<T>\n// TODO: rename to `ensureArray`\n/** like `_.castArray`, except falsy value returns empty array. */\nexport const castArray = <T>(arr: Many<T>): T[] => {\n  if (!arr && (arr as any) !== 0) return []\n  return Array.isArray(arr) ? arr : [arr]\n}\n\n// TODO: remove import alias\n// avoid naming conflicts\nexport { castArray as ensureArray } from 'lodash-unified'\n"]},"metadata":{},"sourceType":"module"}