{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport '../../../../constants/index.mjs';\nimport { usePropsAlias } from './use-props-alias.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../../constants/event.mjs';\n\nconst useMove = (props, checkedState, emit) => {\n  const propsAlias = usePropsAlias(props);\n\n  const _emit = (value, direction, movedKeys) => {\n    emit(UPDATE_MODEL_EVENT, value);\n    emit(CHANGE_EVENT, value, direction, movedKeys);\n  };\n\n  const addToLeft = () => {\n    const currentValue = props.modelValue.slice();\n    checkedState.rightChecked.forEach(item => {\n      const index = currentValue.indexOf(item);\n\n      if (index > -1) {\n        currentValue.splice(index, 1);\n      }\n    });\n\n    _emit(currentValue, \"left\", checkedState.rightChecked);\n  };\n\n  const addToRight = () => {\n    let currentValue = props.modelValue.slice();\n    const itemsToBeMoved = props.data.filter(item => {\n      const itemKey = item[propsAlias.value.key];\n      return checkedState.leftChecked.includes(itemKey) && !props.modelValue.includes(itemKey);\n    }).map(item => item[propsAlias.value.key]);\n    currentValue = props.targetOrder === \"unshift\" ? itemsToBeMoved.concat(currentValue) : currentValue.concat(itemsToBeMoved);\n\n    if (props.targetOrder === \"original\") {\n      currentValue = props.data.filter(item => currentValue.includes(item[propsAlias.value.key])).map(item => item[propsAlias.value.key]);\n    }\n\n    _emit(currentValue, \"right\", checkedState.leftChecked);\n  };\n\n  return {\n    addToLeft,\n    addToRight\n  };\n};\n\nexport { useMove };","map":{"version":3,"mappings":";;;;;AAEY,MAACA,OAAO,GAAG,CAACC,KAAD,EAAQC,YAAR,EAAsBC,IAAtB,KAA+B;EACpD,MAAMC,UAAU,GAAGC,aAAa,CAACJ,KAAD,CAAhC;;EACA,MAAMK,KAAK,GAAG,CAACC,KAAD,EAAQC,SAAR,EAAmBC,SAAnB,KAAiC;IAC7CN,IAAI,CAACO,kBAAD,EAAqBH,KAArB,CAAJ;IACAJ,IAAI,CAACQ,YAAD,EAAeJ,KAAf,EAAsBC,SAAtB,EAAiCC,SAAjC,CAAJ;EACD,CAHD;;EAIA,MAAMG,SAAS,GAAG,MAAM;IACtB,MAAMC,YAAY,GAAGZ,KAAK,CAACa,UAAN,CAAiBC,KAAjB,EAArB;IACAb,YAAY,CAACc,YAAb,CAA0BC,OAA1B,CAAmCC,IAAD,IAAU;MAC1C,MAAMC,KAAK,GAAGN,YAAY,CAACO,OAAb,CAAqBF,IAArB,CAAd;;MACA,IAAIC,KAAK,GAAG,CAAC,CAAb,EAAgB;QACdN,YAAY,CAACQ,MAAb,CAAoBF,KAApB,EAA2B,CAA3B;MACD;IACF,CALD;;IAMAb,KAAK,CAACO,YAAD,EAAe,MAAf,EAAuBX,YAAY,CAACc,YAApC,CAAL;EACD,CATD;;EAUA,MAAMM,UAAU,GAAG,MAAM;IACvB,IAAIT,YAAY,GAAGZ,KAAK,CAACa,UAAN,CAAiBC,KAAjB,EAAnB;IACA,MAAMQ,cAAc,GAAGtB,KAAK,CAACuB,IAAN,CAAWC,MAAX,CAAmBP,IAAD,IAAU;MACjD,MAAMQ,OAAO,GAAGR,IAAI,CAACd,UAAU,CAACG,KAAX,CAAiBoB,GAAlB,CAApB;MACA,OAAOzB,YAAY,CAAC0B,WAAb,CAAyBC,QAAzB,CAAkCH,OAAlC,KAA8C,CAACzB,KAAK,CAACa,UAAN,CAAiBe,QAAjB,CAA0BH,OAA1B,CAAtD;IACD,CAHsB,EAGpBI,GAHoB,CAGfZ,IAAD,IAAUA,IAAI,CAACd,UAAU,CAACG,KAAX,CAAiBoB,GAAlB,CAHE,CAAvB;IAIAd,YAAY,GAAGZ,KAAK,CAAC8B,WAAN,KAAsB,SAAtB,GAAkCR,cAAc,CAACS,MAAf,CAAsBnB,YAAtB,CAAlC,GAAwEA,YAAY,CAACmB,MAAb,CAAoBT,cAApB,CAAvF;;IACA,IAAItB,KAAK,CAAC8B,WAAN,KAAsB,UAA1B,EAAsC;MACpClB,YAAY,GAAGZ,KAAK,CAACuB,IAAN,CAAWC,MAAX,CAAmBP,IAAD,IAAUL,YAAY,CAACgB,QAAb,CAAsBX,IAAI,CAACd,UAAU,CAACG,KAAX,CAAiBoB,GAAlB,CAA1B,CAA5B,EAA+EG,GAA/E,CAAoFZ,IAAD,IAAUA,IAAI,CAACd,UAAU,CAACG,KAAX,CAAiBoB,GAAlB,CAAjG,CAAf;IACD;;IACDrB,KAAK,CAACO,YAAD,EAAe,OAAf,EAAwBX,YAAY,CAAC0B,WAArC,CAAL;EACD,CAXD;;EAYA,OAAO;IACLhB,SADK;IAELU;EAFK,CAAP;AAIF,CAhCY","names":["useMove","props","checkedState","emit","propsAlias","usePropsAlias","_emit","value","direction","movedKeys","UPDATE_MODEL_EVENT","CHANGE_EVENT","addToLeft","currentValue","modelValue","slice","rightChecked","forEach","item","index","indexOf","splice","addToRight","itemsToBeMoved","data","filter","itemKey","key","leftChecked","includes","map","targetOrder","concat"],"sources":["../../../../../../../packages/components/transfer/src/composables/use-move.ts"],"sourcesContent":["import { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { usePropsAlias } from './use-props-alias'\n\nimport type { SetupContext } from 'vue'\nimport type {\n  TransferCheckedState,\n  TransferDataItem,\n  TransferDirection,\n  TransferEmits,\n  TransferKey,\n  TransferProps,\n} from '../transfer'\n\nexport const useMove = (\n  props: TransferProps,\n  checkedState: TransferCheckedState,\n  emit: SetupContext<TransferEmits>['emit']\n) => {\n  const propsAlias = usePropsAlias(props)\n\n  const _emit = (\n    value: TransferKey[],\n    direction: TransferDirection,\n    movedKeys: TransferKey[]\n  ) => {\n    emit(UPDATE_MODEL_EVENT, value)\n    emit(CHANGE_EVENT, value, direction, movedKeys)\n  }\n\n  const addToLeft = () => {\n    const currentValue = props.modelValue.slice()\n\n    checkedState.rightChecked.forEach((item) => {\n      const index = currentValue.indexOf(item)\n      if (index > -1) {\n        currentValue.splice(index, 1)\n      }\n    })\n    _emit(currentValue, 'left', checkedState.rightChecked)\n  }\n\n  const addToRight = () => {\n    let currentValue = props.modelValue.slice()\n\n    const itemsToBeMoved = props.data\n      .filter((item: TransferDataItem) => {\n        const itemKey = item[propsAlias.value.key]\n        return (\n          checkedState.leftChecked.includes(itemKey) &&\n          !props.modelValue.includes(itemKey)\n        )\n      })\n      .map((item) => item[propsAlias.value.key])\n\n    currentValue =\n      props.targetOrder === 'unshift'\n        ? itemsToBeMoved.concat(currentValue)\n        : currentValue.concat(itemsToBeMoved)\n\n    if (props.targetOrder === 'original') {\n      currentValue = props.data\n        .filter((item) => currentValue.includes(item[propsAlias.value.key]))\n        .map((item) => item[propsAlias.value.key])\n    }\n\n    _emit(currentValue, 'right', checkedState.leftChecked)\n  }\n\n  return {\n    addToLeft,\n    addToRight,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}