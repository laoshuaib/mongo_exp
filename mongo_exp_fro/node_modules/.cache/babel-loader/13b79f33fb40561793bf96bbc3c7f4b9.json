{"ast":null,"code":"import { defineComponent, shallowRef, openBlock, createElementBlock, normalizeClass, unref, withKeys, withModifiers, createBlock, withCtx, renderSlot, createElementVNode } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport UploadDragger from './upload-dragger2.mjs';\nimport { uploadContentProps } from './upload-content.mjs';\nimport { genFileId } from './upload.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { entriesOf } from '../../../utils/objects.mjs';\nconst _hoisted_1 = [\"onKeydown\"];\nconst _hoisted_2 = [\"name\", \"multiple\", \"accept\"];\nconst __default__ = {\n  name: \"ElUploadContent\",\n  inheritAttrs: false\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: uploadContentProps,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"upload\");\n    const requests = shallowRef({});\n    const inputRef = shallowRef();\n\n    const uploadFiles = files => {\n      if (files.length === 0) return;\n      const {\n        autoUpload,\n        limit,\n        fileList,\n        multiple,\n        onStart,\n        onExceed\n      } = props;\n\n      if (limit && fileList.length + files.length > limit) {\n        onExceed(files, fileList);\n        return;\n      }\n\n      if (!multiple) {\n        files = files.slice(0, 1);\n      }\n\n      for (const file of files) {\n        const rawFile = file;\n        rawFile.uid = genFileId();\n        onStart(rawFile);\n        if (autoUpload) upload(rawFile);\n      }\n    };\n\n    const upload = async rawFile => {\n      inputRef.value.value = \"\";\n\n      if (!props.beforeUpload) {\n        return doUpload(rawFile);\n      }\n\n      let hookResult;\n\n      try {\n        hookResult = await props.beforeUpload(rawFile);\n      } catch (e) {\n        hookResult = false;\n      }\n\n      if (hookResult === false) {\n        props.onRemove(rawFile);\n        return;\n      }\n\n      let file = rawFile;\n\n      if (hookResult instanceof Blob) {\n        if (hookResult instanceof File) {\n          file = hookResult;\n        } else {\n          file = new File([hookResult], rawFile.name, {\n            type: rawFile.type\n          });\n        }\n      }\n\n      doUpload(Object.assign(file, {\n        uid: rawFile.uid\n      }));\n    };\n\n    const doUpload = rawFile => {\n      const {\n        headers,\n        data,\n        method,\n        withCredentials,\n        name: filename,\n        action,\n        onProgress,\n        onSuccess,\n        onError,\n        httpRequest\n      } = props;\n      const {\n        uid\n      } = rawFile;\n      const options = {\n        headers: headers || {},\n        withCredentials,\n        file: rawFile,\n        data,\n        method,\n        filename,\n        action,\n        onProgress: evt => {\n          onProgress(evt, rawFile);\n        },\n        onSuccess: res => {\n          onSuccess(res, rawFile);\n          delete requests.value[uid];\n        },\n        onError: err => {\n          onError(err, rawFile);\n          delete requests.value[uid];\n        }\n      };\n      const request = httpRequest(options);\n      requests.value[uid] = request;\n\n      if (request instanceof Promise) {\n        request.then(options.onSuccess, options.onError);\n      }\n    };\n\n    const handleChange = e => {\n      const files = e.target.files;\n      if (!files) return;\n      uploadFiles(Array.from(files));\n    };\n\n    const handleClick = () => {\n      if (!props.disabled) {\n        inputRef.value.value = \"\";\n        inputRef.value.click();\n      }\n    };\n\n    const handleKeydown = () => {\n      handleClick();\n    };\n\n    const abort = file => {\n      const _reqs = entriesOf(requests.value).filter(file ? ([uid]) => String(file.uid) === uid : () => true);\n\n      _reqs.forEach(([uid, req]) => {\n        if (req instanceof XMLHttpRequest) req.abort();\n        delete requests.value[uid];\n      });\n    };\n\n    expose({\n      abort,\n      upload\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(), unref(ns).m(_ctx.listType), unref(ns).is(\"drag\", _ctx.drag)]),\n        tabindex: \"0\",\n        onClick: handleClick,\n        onKeydown: withKeys(withModifiers(handleKeydown, [\"self\"]), [\"enter\", \"space\"])\n      }, [_ctx.drag ? (openBlock(), createBlock(UploadDragger, {\n        key: 0,\n        disabled: _ctx.disabled,\n        onFile: uploadFiles\n      }, {\n        default: withCtx(() => [renderSlot(_ctx.$slots, \"default\")]),\n        _: 3\n      }, 8, [\"disabled\"])) : renderSlot(_ctx.$slots, \"default\", {\n        key: 1\n      }), createElementVNode(\"input\", {\n        ref_key: \"inputRef\",\n        ref: inputRef,\n        class: normalizeClass(unref(ns).e(\"input\")),\n        name: _ctx.name,\n        multiple: _ctx.multiple,\n        accept: _ctx.accept,\n        type: \"file\",\n        onChange: handleChange,\n        onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"]))\n      }, null, 42, _hoisted_2)], 42, _hoisted_1);\n    };\n  }\n\n});\n\nvar UploadContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/upload/src/upload-content.vue\"]]);\n\nexport { UploadContent as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;IAiDA;IAEA,2BACA,IADA;IAGA;;IAEA;MACA;MAEA;QAAAA;QAAAC;QAAAC;QAAAC;QAAAC;QAAAC;MAAA;;MAEA;QACAA;QACA;MACA;;MAEA;QACAC;MACA;;MAEA;QACA;QACAC;QACAH;QACA;MACA;IACA,CApBA;;IAsBA;MACAI;;MAEA;QACA;MACA;;MAEA;;MACA;QACAC;MACA,CAFA,CAEA;QACAA;MACA;;MAEA;QACAC;QACA;MACA;;MAEA;;MACA;QACA;UACAC;QACA,CAFA,MAEA;UACAA;YACAC;UADA;QAGA;MACA;;MAGAC;QACAC;MADA;IAIA,CAnCA;;IAqCA;MACA;QACAC,OADA;QAEAC,IAFA;QAGAC,MAHA;QAIAC,eAJA;QAKAC,cALA;QAMAC,MANA;QAOAC,UAPA;QAQAC,SARA;QASAC,OATA;QAUAC;MAVA,IAWAd,KAXA;MAaA;QAAAI;MAAA;MACA;QACAC,sBADA;QAEAG,eAFA;QAGAP,aAHA;QAIAK,IAJA;QAKAC,MALA;QAMAQ,QANA;QAOAL,MAPA;QAQAC;UACAA;QACA,CAVA;QAWAC;UACAA;UACA;QACA,CAdA;QAeAC;UACAA;UACA;QACA;MAlBA;MAoBA;MACAG;;MACA;QACAC;MACA;IACA,CAxCA;;IA0CA;MACA;MACA;MACAC;IACA,CAJA;;IAMA;MACA;QACApB;QACAA;MACA;IACA,CALA;;IAOA;MACAqB;IACA,CAFA;;IAIA;MACA,+CACAlB,uDADA;;MAGAmB;QACA;QACA;MACA,CAHA;IAIA,CARA;;IAUAC;MACAC,KADA;MAEAC;IAFA","names":["autoUpload","limit","fileList","multiple","onStart","onExceed","files","rawFile","inputRef","hookResult","props","file","type","doUpload","uid","headers","data","method","withCredentials","name","action","onProgress","onSuccess","onError","httpRequest","filename","requests","request","uploadFiles","handleClick","_reqs","expose","abort","upload"],"sources":["../../../../../../packages/components/upload/src/upload-content.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b(), ns.m(listType), ns.is('drag', drag)]\"\n    tabindex=\"0\"\n    @click=\"handleClick\"\n    @keydown.self.enter.space=\"handleKeydown\"\n  >\n    <template v-if=\"drag\">\n      <upload-dragger :disabled=\"disabled\" @file=\"uploadFiles\">\n        <slot />\n      </upload-dragger>\n    </template>\n    <template v-else>\n      <slot />\n    </template>\n    <input\n      ref=\"inputRef\"\n      :class=\"ns.e('input')\"\n      :name=\"name\"\n      :multiple=\"multiple\"\n      :accept=\"accept\"\n      type=\"file\"\n      @change=\"handleChange\"\n      @click.stop\n    />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { shallowRef } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { entriesOf } from '@element-plus/utils'\nimport UploadDragger from './upload-dragger.vue'\nimport { uploadContentProps } from './upload-content'\nimport { genFileId } from './upload'\n\nimport type {\n  UploadFile,\n  UploadHooks,\n  UploadRawFile,\n  UploadRequestOptions,\n} from './upload'\n\ndefineOptions({\n  name: 'ElUploadContent',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(uploadContentProps)\nconst ns = useNamespace('upload')\n\nconst requests = shallowRef<Record<string, XMLHttpRequest | Promise<unknown>>>(\n  {}\n)\nconst inputRef = shallowRef<HTMLInputElement>()\n\nconst uploadFiles = (files: File[]) => {\n  if (files.length === 0) return\n\n  const { autoUpload, limit, fileList, multiple, onStart, onExceed } = props\n\n  if (limit && fileList.length + files.length > limit) {\n    onExceed(files, fileList)\n    return\n  }\n\n  if (!multiple) {\n    files = files.slice(0, 1)\n  }\n\n  for (const file of files) {\n    const rawFile = file as UploadRawFile\n    rawFile.uid = genFileId()\n    onStart(rawFile)\n    if (autoUpload) upload(rawFile)\n  }\n}\n\nconst upload = async (rawFile: UploadRawFile) => {\n  inputRef.value!.value = ''\n\n  if (!props.beforeUpload) {\n    return doUpload(rawFile)\n  }\n\n  let hookResult: Exclude<ReturnType<UploadHooks['beforeUpload']>, Promise<any>>\n  try {\n    hookResult = await props.beforeUpload(rawFile)\n  } catch {\n    hookResult = false\n  }\n\n  if (hookResult === false) {\n    props.onRemove(rawFile)\n    return\n  }\n\n  let file: File = rawFile\n  if (hookResult instanceof Blob) {\n    if (hookResult instanceof File) {\n      file = hookResult\n    } else {\n      file = new File([hookResult], rawFile.name, {\n        type: rawFile.type,\n      })\n    }\n  }\n\n  doUpload(\n    Object.assign(file, {\n      uid: rawFile.uid,\n    })\n  )\n}\n\nconst doUpload = (rawFile: UploadRawFile) => {\n  const {\n    headers,\n    data,\n    method,\n    withCredentials,\n    name: filename,\n    action,\n    onProgress,\n    onSuccess,\n    onError,\n    httpRequest,\n  } = props\n\n  const { uid } = rawFile\n  const options: UploadRequestOptions = {\n    headers: headers || {},\n    withCredentials,\n    file: rawFile,\n    data,\n    method,\n    filename,\n    action,\n    onProgress: (evt) => {\n      onProgress(evt, rawFile)\n    },\n    onSuccess: (res) => {\n      onSuccess(res, rawFile)\n      delete requests.value[uid]\n    },\n    onError: (err) => {\n      onError(err, rawFile)\n      delete requests.value[uid]\n    },\n  }\n  const request = httpRequest(options)\n  requests.value[uid] = request\n  if (request instanceof Promise) {\n    request.then(options.onSuccess, options.onError)\n  }\n}\n\nconst handleChange = (e: Event) => {\n  const files = (e.target as HTMLInputElement).files\n  if (!files) return\n  uploadFiles(Array.from(files))\n}\n\nconst handleClick = () => {\n  if (!props.disabled) {\n    inputRef.value!.value = ''\n    inputRef.value!.click()\n  }\n}\n\nconst handleKeydown = () => {\n  handleClick()\n}\n\nconst abort = (file?: UploadFile) => {\n  const _reqs = entriesOf(requests.value).filter(\n    file ? ([uid]) => String(file.uid) === uid : () => true\n  )\n  _reqs.forEach(([uid, req]) => {\n    if (req instanceof XMLHttpRequest) req.abort()\n    delete requests.value[uid]\n  })\n}\n\ndefineExpose({\n  abort,\n  upload,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}