{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { defineComponent, ref, computed, watch, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, createElementVNode, toDisplayString, createCommentVNode, withDirectives, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport TreeStore from './model/tree-store.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { useDragNodeHandler } from './model/useDragNode.mjs';\nimport { useKeydown } from './model/useKeydown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { formItemContextKey } from '../../../tokens/form.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode\n  },\n  props: {\n    data: {\n      type: Array,\n      default: () => []\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default: () => ({\n        children: \"children\",\n        label: \"label\",\n        disabled: \"disabled\"\n      })\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    icon: [String, Object]\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n\n  setup(props, ctx) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"tree\");\n    const store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    const root = ref(store.value.root);\n    const currentNode = ref(null);\n    const el$ = ref(null);\n    const dropIndicator$ = ref(null);\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const {\n      dragState\n    } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store\n    });\n    useKeydown({\n      el$\n    }, store);\n    const isEmpty = computed(() => {\n      const {\n        childNodes\n      } = root.value;\n      return !childNodes || childNodes.length === 0 || childNodes.every(({\n        visible\n      }) => !visible);\n    });\n    watch(() => props.defaultCheckedKeys, newVal => {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(() => props.defaultExpandedKeys, newVal => {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(() => props.data, newVal => {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(() => props.checkStrictly, newVal => {\n      store.value.checkStrictly = newVal;\n    });\n\n    const filter = value => {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n\n    const getNodeKey$1 = node => {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n\n    const getNodePath = data => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      const node = store.value.getNode(data);\n      if (!node) return [];\n      const path = [node.data];\n      let parent = node.parent;\n\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n\n      return path.reverse();\n    };\n\n    const getCheckedNodes = (leafOnly, includeHalfChecked) => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n\n    const getCheckedKeys = leafOnly => {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n\n    const getCurrentNode = () => {\n      const currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n\n    const getCurrentKey = () => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      const currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n\n    const setCheckedNodes = (nodes, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n\n    const setCheckedKeys = (keys, leafOnly) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n\n    const setChecked = (data, checked, deep) => {\n      store.value.setChecked(data, checked, deep);\n    };\n\n    const getHalfCheckedNodes = () => {\n      return store.value.getHalfCheckedNodes();\n    };\n\n    const getHalfCheckedKeys = () => {\n      return store.value.getHalfCheckedKeys();\n    };\n\n    const setCurrentNode = (node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n    };\n\n    const setCurrentKey = (key, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n    };\n\n    const getNode = data => {\n      return store.value.getNode(data);\n    };\n\n    const remove = data => {\n      store.value.remove(data);\n    };\n\n    const append = (data, parentNode) => {\n      store.value.append(data, parentNode);\n    };\n\n    const insertBefore = (data, refNode) => {\n      store.value.insertBefore(data, refNode);\n    };\n\n    const insertAfter = (data, refNode) => {\n      store.value.insertAfter(data, refNode);\n    };\n\n    const handleNodeExpand = (nodeData, node, instance) => {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n\n    const updateKeyChildren = (key, data) => {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n\n    provide(\"RootTree\", {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance()\n    });\n    provide(formItemContextKey, void 0);\n    return {\n      ns,\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n      isEmpty,\n      filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"el$\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), {\n      [_ctx.ns.m(\"highlight-current\")]: _ctx.highlightCurrent\n    }]),\n    role: \"tree\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, child => {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    class: normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\n\nvar Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree.vue\"]]);\n\nexport { Tree as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElTreeNode","props","data","type","default","emptyText","renderAfterExpand","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","currentNodeKey","String","Number","renderContent","showCheckbox","draggable","allowDrag","allowDrop","children","label","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","icon","Object","emits","setup","ctx","t","useLocale","useNamespace","ref","TreeStore","key","store","value","initialize","root","broadcastExpanded","useNodeExpandEventBroadcast","dragState","useDragNodeHandler","el$","dropIndicator$","useKeydown","computed","childNodes","length","visible","watch","newVal","setDefaultCheckedKey","setDefaultExpandedKeys","setData","deep","Error","filter","node","getNodeKeyUtil","getNode","parent","path","reverse","leafOnly","includeHalfChecked","getCheckedNodes","getCheckedKeys","getCurrentNode","currentNode2","getCurrentKey","nodes","setCheckedNodes","keys","setCheckedKeys","setChecked","checked","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","shouldAutoExpandParent","setUserCurrentNode","setCurrentKey","setCurrentNodeKey","remove","parentNode","append","refNode","insertBefore","insertAfter","handleNodeExpand","nodeData","instance","emit","updateChildren","provide","currentNode","getCurrentInstance","formItemContextKey","ns","isEmpty","getNodeKey","getNodePath","updateKeyChildren","_openBlock","class","_ctx","b","is","dropType","role","onNodeExpand","_createElementVNode","_toDisplayString","_withDirectives"],"sources":["../../../../../../packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/tokens'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { Component, ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: [String, Object] as PropType<string | Component>,\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys, leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n    }\n\n    const setCurrentKey = (key: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    provide(formItemContextKey, undefined)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}