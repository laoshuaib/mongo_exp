{"ast":null,"code":"import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport cacheHas from './_cacheHas.js';\nimport createSet from './_createSet.js';\nimport setToArray from './_setToArray.js';\n/** Used as the size to enable large array optimizations. */\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\n\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  } else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n\n    if (set) {\n      return setToArray(set);\n    }\n\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache();\n  } else {\n    seen = iteratee ? [] : result;\n  }\n\n  outer: while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n    value = comparator || value !== 0 ? value : 0;\n\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n\n      if (iteratee) {\n        seen.push(computed);\n      }\n\n      result.push(value);\n    } else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n\nexport default baseUniq;","map":{"version":3,"names":["SetCache","arrayIncludes","arrayIncludesWith","cacheHas","createSet","setToArray","LARGE_ARRAY_SIZE","baseUniq","array","iteratee","comparator","index","includes","length","isCommon","result","seen","set","outer","value","computed","seenIndex","push"],"sources":["C:/Users/laoshuaib/Desktop/restaurant/node_modules/lodash-es/_baseUniq.js"],"sourcesContent":["import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport cacheHas from './_cacheHas.js';\nimport createSet from './_createSet.js';\nimport setToArray from './_setToArray.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseUniq;\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA;;AACA,IAAIC,gBAAgB,GAAG,GAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,CAAkBC,KAAlB,EAAyBC,QAAzB,EAAmCC,UAAnC,EAA+C;EAC7C,IAAIC,KAAK,GAAG,CAAC,CAAb;EAAA,IACIC,QAAQ,GAAGX,aADf;EAAA,IAEIY,MAAM,GAAGL,KAAK,CAACK,MAFnB;EAAA,IAGIC,QAAQ,GAAG,IAHf;EAAA,IAIIC,MAAM,GAAG,EAJb;EAAA,IAKIC,IAAI,GAAGD,MALX;;EAOA,IAAIL,UAAJ,EAAgB;IACdI,QAAQ,GAAG,KAAX;IACAF,QAAQ,GAAGV,iBAAX;EACD,CAHD,MAIK,IAAIW,MAAM,IAAIP,gBAAd,EAAgC;IACnC,IAAIW,GAAG,GAAGR,QAAQ,GAAG,IAAH,GAAUL,SAAS,CAACI,KAAD,CAArC;;IACA,IAAIS,GAAJ,EAAS;MACP,OAAOZ,UAAU,CAACY,GAAD,CAAjB;IACD;;IACDH,QAAQ,GAAG,KAAX;IACAF,QAAQ,GAAGT,QAAX;IACAa,IAAI,GAAG,IAAIhB,QAAJ,EAAP;EACD,CARI,MASA;IACHgB,IAAI,GAAGP,QAAQ,GAAG,EAAH,GAAQM,MAAvB;EACD;;EACDG,KAAK,EACL,OAAO,EAAEP,KAAF,GAAUE,MAAjB,EAAyB;IACvB,IAAIM,KAAK,GAAGX,KAAK,CAACG,KAAD,CAAjB;IAAA,IACIS,QAAQ,GAAGX,QAAQ,GAAGA,QAAQ,CAACU,KAAD,CAAX,GAAqBA,KAD5C;IAGAA,KAAK,GAAIT,UAAU,IAAIS,KAAK,KAAK,CAAzB,GAA8BA,KAA9B,GAAsC,CAA9C;;IACA,IAAIL,QAAQ,IAAIM,QAAQ,KAAKA,QAA7B,EAAuC;MACrC,IAAIC,SAAS,GAAGL,IAAI,CAACH,MAArB;;MACA,OAAOQ,SAAS,EAAhB,EAAoB;QAClB,IAAIL,IAAI,CAACK,SAAD,CAAJ,KAAoBD,QAAxB,EAAkC;UAChC,SAASF,KAAT;QACD;MACF;;MACD,IAAIT,QAAJ,EAAc;QACZO,IAAI,CAACM,IAAL,CAAUF,QAAV;MACD;;MACDL,MAAM,CAACO,IAAP,CAAYH,KAAZ;IACD,CAXD,MAYK,IAAI,CAACP,QAAQ,CAACI,IAAD,EAAOI,QAAP,EAAiBV,UAAjB,CAAb,EAA2C;MAC9C,IAAIM,IAAI,KAAKD,MAAb,EAAqB;QACnBC,IAAI,CAACM,IAAL,CAAUF,QAAV;MACD;;MACDL,MAAM,CAACO,IAAP,CAAYH,KAAZ;IACD;EACF;;EACD,OAAOJ,MAAP;AACD;;AAED,eAAeR,QAAf"},"metadata":{},"sourceType":"module"}