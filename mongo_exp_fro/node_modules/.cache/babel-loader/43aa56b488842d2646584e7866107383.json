{"ast":null,"code":"import { defineComponent, ref, watch, provide, openBlock, createElementBlock, normalizeClass, unref, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { stepsProps, stepsEmits } from './steps.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { CHANGE_EVENT } from '../../../constants/event.mjs';\nconst __default__ = {\n  name: \"ElSteps\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: stepsProps,\n  emits: stepsEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"steps\");\n    const steps = ref([]);\n    watch(steps, () => {\n      steps.value.forEach((instance, index) => {\n        instance.setIndex(index);\n      });\n    });\n    provide(\"ElSteps\", {\n      props,\n      steps\n    });\n    watch(() => props.active, (newVal, oldVal) => {\n      emit(CHANGE_EVENT, newVal, oldVal);\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(), unref(ns).m(_ctx.simple ? \"simple\" : _ctx.direction)])\n      }, [renderSlot(_ctx.$slots, \"default\")], 2);\n    };\n  }\n\n});\n\nvar Steps = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/steps/src/steps.vue\"]]);\n\nexport { Steps as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;IAsBA;IAEA;IAEAA;MACAC;QACAC;MACA,CAFA;IAGA,CAJA;IAMAC;MAAAC;MAAAH;IAAA;IAEAD,MACA,kBADA,EAEA;MACAK;IAEA,CALA","names":["watch","steps","instance","provide","props","emit"],"sources":["../../../../../../packages/components/steps/src/steps.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.m(simple ? 'simple' : direction)]\">\n    <slot />\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { provide, ref, watch } from 'vue'\nimport { CHANGE_EVENT } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { stepsEmits, stepsProps } from './steps'\n\nimport type { Ref } from 'vue'\nimport type { StepItemState } from './item.vue'\n\ndefineOptions({\n  name: 'ElSteps',\n})\n\nconst props = defineProps(stepsProps)\nconst emit = defineEmits(stepsEmits)\n\nconst ns = useNamespace('steps')\n\nconst steps: Ref<StepItemState[]> = ref([])\n\nwatch(steps, () => {\n  steps.value.forEach((instance: StepItemState, index: number) => {\n    instance.setIndex(index)\n  })\n})\n\nprovide('ElSteps', { props, steps })\n\nwatch(\n  () => props.active,\n  (newVal: number, oldVal: number) => {\n    emit(CHANGE_EVENT, newVal, oldVal)\n  }\n)\n</script>\n"]},"metadata":{},"sourceType":"module"}