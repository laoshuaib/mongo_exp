{"ast":null,"code":"import { unref, computed, isRef, ref } from 'vue';\nimport { get } from 'lodash-unified';\nimport English from '../../locale/lang/en.mjs';\nimport { useGlobalConfig } from '../use-global-config/index.mjs';\n\nconst buildTranslator = locale => (path, option) => translate(path, option, unref(locale));\n\nconst translate = (path, option, locale) => get(locale, path, path).replace(/\\{(\\w+)\\}/g, (_, key) => {\n  var _a;\n\n  return `${(_a = option == null ? void 0 : option[key]) != null ? _a : `{${key}}`}`;\n});\n\nconst buildLocaleContext = locale => {\n  const lang = computed(() => unref(locale).name);\n  const localeRef = isRef(locale) ? locale : ref(locale);\n  return {\n    lang,\n    locale: localeRef,\n    t: buildTranslator(locale)\n  };\n};\n\nconst useLocale = () => {\n  const locale = useGlobalConfig(\"locale\");\n  return buildLocaleContext(computed(() => locale.value || English));\n};\n\nexport { buildLocaleContext, buildTranslator, translate, useLocale };","map":{"version":3,"mappings":";;;;;AAIY,MAACA,eAAe,GAAIC,MAAD,IAAY,CAACC,IAAD,EAAOC,MAAP,KAAkBC,SAAS,CAACF,IAAD,EAAOC,MAAP,EAAeE,KAAK,CAACJ,MAAD,CAApB,CAA1D;;AACA,MAACG,SAAS,GAAG,CAACF,IAAD,EAAOC,MAAP,EAAeF,MAAf,KAA0BK,GAAG,CAACL,MAAD,EAASC,IAAT,EAAeA,IAAf,CAAH,CAAwBK,OAAxB,CAAgC,YAAhC,EAA8C,CAACC,CAAD,EAAIC,GAAJ,KAAY;EAC3G,IAAIC,EAAJ;;EACA,OAAQ,GAAE,CAACA,EAAE,GAAGP,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACM,GAAD,CAAtC,KAAgD,IAAhD,GAAuDC,EAAvD,GAA6D,IAAGD,GAAI,GAAG,EAAjF;AACD,CAHkD,CAAvC;;AAIA,MAACE,kBAAkB,GAAIV,MAAD,IAAY;EAC5C,MAAMW,IAAI,GAAGC,QAAQ,CAAC,MAAMR,KAAK,CAACJ,MAAD,CAAL,CAAca,IAArB,CAArB;EACA,MAAMC,SAAS,GAAGC,KAAK,CAACf,MAAD,CAAL,GAAgBA,MAAhB,GAAyBgB,GAAG,CAAChB,MAAD,CAA9C;EACA,OAAO;IACLW,IADK;IAELX,MAAM,EAAEc,SAFH;IAGLG,CAAC,EAAElB,eAAe,CAACC,MAAD;EAHb,CAAP;AAKF,CARY;;AASA,MAACkB,SAAS,GAAG,MAAM;EAC7B,MAAMlB,MAAM,GAAGmB,eAAe,CAAC,QAAD,CAA9B;EACA,OAAOT,kBAAkB,CAACE,QAAQ,CAAC,MAAMZ,MAAM,CAACoB,KAAP,IAAgBC,OAAvB,CAAT,CAAzB;AACF,CAHY","names":["buildTranslator","locale","path","option","translate","unref","get","replace","_","key","_a","buildLocaleContext","lang","computed","name","localeRef","isRef","ref","t","useLocale","useGlobalConfig","value","English"],"sources":["../../../../../packages/hooks/use-locale/index.ts"],"sourcesContent":["import { computed, isRef, ref, unref } from 'vue'\nimport { get } from 'lodash-unified'\nimport English from '@element-plus/locale/lang/en'\nimport { useGlobalConfig } from '../use-global-config'\nimport type { MaybeRef } from '@vueuse/core'\nimport type { Ref } from 'vue'\nimport type { Language } from '@element-plus/locale'\n\nexport type TranslatorOption = Record<string, string | number>\nexport type Translator = (path: string, option?: TranslatorOption) => string\nexport type LocaleContext = {\n  locale: Ref<Language>\n  lang: Ref<string>\n  t: Translator\n}\n\nexport const buildTranslator =\n  (locale: MaybeRef<Language>): Translator =>\n  (path, option) =>\n    translate(path, option, unref(locale))\n\nexport const translate = (\n  path: string,\n  option: undefined | TranslatorOption,\n  locale: Language\n): string =>\n  (get(locale, path, path) as string).replace(\n    /\\{(\\w+)\\}/g,\n    (_, key) => `${option?.[key] ?? `{${key}}`}`\n  )\n\nexport const buildLocaleContext = (\n  locale: MaybeRef<Language>\n): LocaleContext => {\n  const lang = computed(() => unref(locale).name)\n  const localeRef = isRef(locale) ? locale : ref(locale)\n  return {\n    lang,\n    locale: localeRef,\n    t: buildTranslator(locale),\n  }\n}\n\nexport const useLocale = () => {\n  const locale = useGlobalConfig('locale')\n  return buildLocaleContext(computed(() => locale.value || English))\n}\n"]},"metadata":{},"sourceType":"module"}