{"ast":null,"code":"import { defineComponent, inject, watch, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, unref } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport { usePopperArrowProps } from './arrow.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { POPPER_CONTENT_INJECTION_KEY } from '../../../tokens/popper.mjs';\nconst __default__ = {\n  name: \"ElPopperArrow\",\n  inheritAttrs: false\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: usePopperArrowProps,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"popper\");\n    const {\n      arrowOffset,\n      arrowRef\n    } = inject(POPPER_CONTENT_INJECTION_KEY, void 0);\n    watch(() => props.arrowOffset, val => {\n      arrowOffset.value = val;\n    });\n    onBeforeUnmount(() => {\n      arrowRef.value = void 0;\n    });\n    expose({\n      arrowRef\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"span\", {\n        ref_key: \"arrowRef\",\n        ref: arrowRef,\n        class: normalizeClass(unref(ns).e(\"arrow\")),\n        \"data-popper-arrow\": \"\"\n      }, null, 2);\n    };\n  }\n\n});\n\nvar ElPopperArrow = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/popper/src/arrow.vue\"]]);\n\nexport { ElPopperArrow as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;IAiBA;IACA;MAAAA;MAAAC;IAAA,WACAC,4BADA,EAEA,KACA,CAHA;IAKAC,MACA,uBADA,EAEAC;MACAJ;IAEA,CALA;IAMAK;MACAJ;IACA,CAFA;IAIAK;MAIAL;IAJA","names":["arrowOffset","arrowRef","POPPER_CONTENT_INJECTION_KEY","watch","val","onBeforeUnmount","expose"],"sources":["../../../../../../packages/components/popper/src/arrow.vue"],"sourcesContent":["<template>\n  <span ref=\"arrowRef\" :class=\"ns.e('arrow')\" data-popper-arrow=\"\" />\n</template>\n\n<script lang=\"ts\" setup>\nimport { inject, onBeforeUnmount, watch } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { POPPER_CONTENT_INJECTION_KEY } from '@element-plus/tokens'\nimport { usePopperArrowProps } from './arrow'\n\ndefineOptions({\n  name: 'ElPopperArrow',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(usePopperArrowProps)\n\nconst ns = useNamespace('popper')\nconst { arrowOffset, arrowRef } = inject(\n  POPPER_CONTENT_INJECTION_KEY,\n  undefined\n)!\n\nwatch(\n  () => props.arrowOffset,\n  (val) => {\n    arrowOffset.value = val\n  }\n)\nonBeforeUnmount(() => {\n  arrowRef.value = undefined\n})\n\ndefineExpose({\n  /**\n   * @description Arrow element\n   */\n  arrowRef,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}