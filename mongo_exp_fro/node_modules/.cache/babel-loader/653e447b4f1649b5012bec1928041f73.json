{"ast":null,"code":"import dayjs from 'dayjs';\nimport '../../../utils/index.mjs';\nimport { isArray } from '@vue/shared';\n\nconst isValidRange = range => {\n  if (!isArray(range)) return false;\n  const [left, right] = range;\n  return dayjs.isDayjs(left) && dayjs.isDayjs(right) && left.isSameOrBefore(right);\n};\n\nconst getDefaultValue = (defaultValue, {\n  lang,\n  unit,\n  unlinkPanels\n}) => {\n  let start;\n\n  if (isArray(defaultValue)) {\n    let [left, right] = defaultValue.map(d => dayjs(d).locale(lang));\n\n    if (!unlinkPanels) {\n      right = left.add(1, unit);\n    }\n\n    return [left, right];\n  } else if (defaultValue) {\n    start = dayjs(defaultValue);\n  } else {\n    start = dayjs();\n  }\n\n  start = start.locale(lang);\n  return [start, start.add(1, unit)];\n};\n\nconst buildPickerTable = (dimension, rows, {\n  columnIndexOffset,\n  startDate,\n  nextEndDate,\n  now,\n  unit,\n  relativeDateGetter,\n  setCellMetadata,\n  setRowMetadata\n}) => {\n  for (let rowIndex = 0; rowIndex < dimension.row; rowIndex++) {\n    const row = rows[rowIndex];\n\n    for (let columnIndex = 0; columnIndex < dimension.column; columnIndex++) {\n      let cell = row[columnIndex + columnIndexOffset];\n\n      if (!cell) {\n        cell = {\n          row: rowIndex,\n          column: columnIndex,\n          type: \"normal\",\n          inRange: false,\n          start: false,\n          end: false\n        };\n      }\n\n      const index = rowIndex * dimension.column + columnIndex;\n      const nextStartDate = relativeDateGetter(index);\n      cell.dayjs = nextStartDate;\n      cell.date = nextStartDate.toDate();\n      cell.timestamp = nextStartDate.valueOf();\n      cell.type = \"normal\";\n      cell.inRange = !!(startDate && nextStartDate.isSameOrAfter(startDate, unit) && nextEndDate && nextStartDate.isSameOrBefore(nextEndDate, unit)) || !!(startDate && nextStartDate.isSameOrBefore(startDate, unit) && nextEndDate && nextStartDate.isSameOrAfter(nextEndDate, unit));\n\n      if (startDate == null ? void 0 : startDate.isSameOrAfter(nextEndDate)) {\n        cell.start = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit);\n        cell.end = startDate && nextStartDate.isSame(startDate, unit);\n      } else {\n        cell.start = !!startDate && nextStartDate.isSame(startDate, unit);\n        cell.end = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit);\n      }\n\n      const isToday = nextStartDate.isSame(now, unit);\n\n      if (isToday) {\n        cell.type = \"today\";\n      }\n\n      setCellMetadata == null ? void 0 : setCellMetadata(cell, {\n        rowIndex,\n        columnIndex\n      });\n      row[columnIndex + columnIndexOffset] = cell;\n    }\n\n    setRowMetadata == null ? void 0 : setRowMetadata(row);\n  }\n};\n\nexport { buildPickerTable, getDefaultValue, isValidRange };","map":{"version":3,"mappings":"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","names":["isValidRange","range","isArray","left","right","dayjs","isDayjs","isSameOrBefore","getDefaultValue","defaultValue","lang","unit","unlinkPanels","start","map","d","locale","add","buildPickerTable","dimension","rows","columnIndexOffset","startDate","nextEndDate","now","relativeDateGetter","setCellMetadata","setRowMetadata","rowIndex","row","columnIndex","column","cell","type","inRange","end","index","nextStartDate","date","toDate","timestamp","valueOf","isSameOrAfter","isSame","isToday"],"sources":["../../../../../../packages/components/date-picker/src/utils.ts"],"sourcesContent":["import dayjs from 'dayjs'\nimport { isArray } from '@element-plus/utils'\n\nimport type { Dayjs } from 'dayjs'\nimport type { DateCell } from './date-picker.type'\n\ntype DayRange = [Dayjs | undefined, Dayjs | undefined]\n\nexport const isValidRange = (range: DayRange): boolean => {\n  if (!isArray(range)) return false\n\n  const [left, right] = range\n\n  return (\n    dayjs.isDayjs(left) && dayjs.isDayjs(right) && left.isSameOrBefore(right)\n  )\n}\n\ntype GetDefaultValueParams = {\n  lang: string\n  unit: 'month' | 'year'\n  unlinkPanels: boolean\n}\n\nexport type DefaultValue = [Date, Date] | Date | undefined\n\nexport const getDefaultValue = (\n  defaultValue: DefaultValue,\n  { lang, unit, unlinkPanels }: GetDefaultValueParams\n) => {\n  let start: Dayjs\n\n  if (isArray(defaultValue)) {\n    let [left, right] = defaultValue.map((d) => dayjs(d).locale(lang))\n    if (!unlinkPanels) {\n      right = left.add(1, unit)\n    }\n    return [left, right]\n  } else if (defaultValue) {\n    start = dayjs(defaultValue)\n  } else {\n    start = dayjs()\n  }\n  start = start.locale(lang)\n  return [start, start.add(1, unit)]\n}\n\ntype Dimension = {\n  row: number\n  column: number\n}\n\ntype BuildPickerTableMetadata = {\n  startDate?: Dayjs | null\n  unit: 'month' | 'day'\n  columnIndexOffset: number\n  now: Dayjs\n  nextEndDate: Dayjs | null\n  relativeDateGetter: (index: number) => Dayjs\n  setCellMetadata?: (\n    cell: DateCell,\n    dimension: { rowIndex: number; columnIndex: number }\n  ) => void\n  setRowMetadata?: (row: DateCell[]) => void\n}\n\nexport const buildPickerTable = (\n  dimension: Dimension,\n  rows: DateCell[][],\n  {\n    columnIndexOffset,\n    startDate,\n    nextEndDate,\n    now,\n    unit,\n    relativeDateGetter,\n    setCellMetadata,\n    setRowMetadata,\n  }: BuildPickerTableMetadata\n) => {\n  for (let rowIndex = 0; rowIndex < dimension.row; rowIndex++) {\n    const row = rows[rowIndex]\n    for (let columnIndex = 0; columnIndex < dimension.column; columnIndex++) {\n      let cell = row[columnIndex + columnIndexOffset]\n      if (!cell) {\n        cell = {\n          row: rowIndex,\n          column: columnIndex,\n          type: 'normal',\n          inRange: false,\n          start: false,\n          end: false,\n        }\n      }\n      const index = rowIndex * dimension.column + columnIndex\n      const nextStartDate = relativeDateGetter(index)\n      cell.dayjs = nextStartDate\n      cell.date = nextStartDate.toDate()\n      cell.timestamp = nextStartDate.valueOf()\n      cell.type = 'normal'\n\n      cell.inRange =\n        !!(\n          startDate &&\n          nextStartDate.isSameOrAfter(startDate, unit) &&\n          nextEndDate &&\n          nextStartDate.isSameOrBefore(nextEndDate, unit)\n        ) ||\n        !!(\n          startDate &&\n          nextStartDate.isSameOrBefore(startDate, unit) &&\n          nextEndDate &&\n          nextStartDate.isSameOrAfter(nextEndDate, unit)\n        )\n\n      if (startDate?.isSameOrAfter(nextEndDate)) {\n        cell.start = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit)\n        cell.end = startDate && nextStartDate.isSame(startDate, unit)\n      } else {\n        cell.start = !!startDate && nextStartDate.isSame(startDate, unit)\n        cell.end = !!nextEndDate && nextStartDate.isSame(nextEndDate, unit)\n      }\n\n      const isToday = nextStartDate.isSame(now, unit)\n\n      if (isToday) {\n        cell.type = 'today'\n      }\n      setCellMetadata?.(cell, { rowIndex, columnIndex })\n      row[columnIndex + columnIndexOffset] = cell\n    }\n    setRowMetadata?.(row)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}