{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, toRef, computed, reactive, onMounted, onBeforeUnmount, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, renderSlot, createElementVNode, Fragment } from 'vue';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport useMenu from './use-menu.mjs';\nimport { menuItemProps, menuItemEmits } from './menu-item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { Effect } from '../../popper/src/popper.mjs';\nconst COMPONENT_NAME = \"ElMenuItem\";\n\nconst _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip\n  },\n  props: menuItemProps,\n  emits: menuItemEmits,\n\n  setup(props, {\n    emit\n  }) {\n    const instance = getCurrentInstance();\n    const rootMenu = inject(\"rootMenu\");\n    const nsMenu = useNamespace(\"menu\");\n    const nsMenuItem = useNamespace(\"menu-item\");\n    if (!rootMenu) throwError(COMPONENT_NAME, \"can not inject root menu\");\n    const {\n      parentMenu,\n      indexPath\n    } = useMenu(instance, toRef(props, \"index\"));\n    const subMenu = inject(`subMenu:${parentMenu.value.uid}`);\n    if (!subMenu) throwError(COMPONENT_NAME, \"can not inject sub menu\");\n    const active = computed(() => props.index === rootMenu.activeIndex);\n    const item = reactive({\n      index: props.index,\n      indexPath,\n      active\n    });\n\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route\n        });\n        emit(\"click\", item);\n      }\n    };\n\n    onMounted(() => {\n      subMenu.addSubMenu(item);\n      rootMenu.addMenuItem(item);\n    });\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item);\n      rootMenu.removeMenuItem(item);\n    });\n    return {\n      Effect,\n      parentMenu,\n      rootMenu,\n      active,\n      nsMenu,\n      nsMenuItem,\n      handleClick\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  return openBlock(), createElementBlock(\"li\", {\n    class: normalizeClass([_ctx.nsMenuItem.b(), _ctx.nsMenuItem.is(\"active\", _ctx.active), _ctx.nsMenuItem.is(\"disabled\", _ctx.disabled)]),\n    role: \"menuitem\",\n    tabindex: \"-1\",\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))\n  }, [_ctx.parentMenu.type.name === \"ElMenu\" && _ctx.rootMenu.props.collapse && _ctx.$slots.title ? (openBlock(), createBlock(_component_el_tooltip, {\n    key: 0,\n    effect: _ctx.Effect.DARK,\n    placement: \"right\",\n    \"fallback-placements\": [\"left\"],\n    persistent: \"\"\n  }, {\n    content: withCtx(() => [renderSlot(_ctx.$slots, \"title\")]),\n    default: withCtx(() => [createElementVNode(\"div\", {\n      class: normalizeClass(_ctx.nsMenu.be(\"tooltip\", \"trigger\"))\n    }, [renderSlot(_ctx.$slots, \"default\")], 2)]),\n    _: 3\n  }, 8, [\"effect\"])) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [renderSlot(_ctx.$slots, \"default\"), renderSlot(_ctx.$slots, \"title\")], 64))], 2);\n}\n\nvar MenuItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/menu/src/menu-item.vue\"]]);\n\nexport { MenuItem as default };","map":{"version":3,"mappings":";;;;;;;;;;;AAyDA,MAAMA,cAAiB,eAAvB;;AACA,MAAKC,YAAaC,eAAa;EAC7BC,IAAM,gBADuB;EAE7BC,UAAY;IACVC;EADU,CAFiB;EAM7BC,KAAO,eANsB;EAO7BC,KAAO,eAPsB;;EAS7BC,MAAMF,KAAN,EAAa;IAAEG;EAAF,CAAb,EAAuB;IACrB,MAAMC,WAAWC,kBAAmB,EAApC;IACM,iBAAWC,OAAqB,UAArB,CAAX;IACA,eAASC,aAAa,MAAb,CAAT;IACA,mBAAaA,aAAa,WAAb,CAAb;IACN,IAAI,CAACC,QAAL,EAAeC,WAAWf,cAAX,EAA2B,0BAA3B;IAET;MAAEgB,UAAF;MAAcC;IAAd,IAA4BC,QAAQR,QAAR,EAAkBS,KAAM,QAAO,OAAP,CAAxB,CAA5B;IAEN,MAAMC,OAAU,UAAmC,sBAAWC,KAAX,CAAiBC,GAAK,EAAzD,CAAhB;IACA,IAAI,CAACF,OAAL,EAAcL,WAAWf,cAAX,EAA2B,yBAA3B;IAEd,MAAMuB,SAASC,QAAS,OAAMlB,KAAM,MAAN,KAAgBQ,SAASW,WAA/B,CAAxB;IACA,MAAMC,OAA2BC,QAAS;MACxCC,OAAOtB,KAAM,MAD2B;MAExCW,SAFwC;MAGxCM;IAHwC,EAA1C;;IAMA,MAAMM,cAAc,MAAM;MACpB,KAACvB,MAAMwB,QAAP,EAAiB;QACnBhB,SAASiB,mBAAT,CAA6B;UAC3BH,OAAOtB,KAAM,MADc;UAE3BW,WAAWA,SAAU,MAFM;UAG3Be,OAAO1B,KAAM;QAHc,CAA7B;QAKAG,KAAK,OAAL,EAAciB,IAAd;MACF;IACF,CATA;;IAWAO,UAAU,MAAM;MACdb,QAAQc,UAAR,CAAmBR,IAAnB;MACAZ,SAASqB,WAAT,CAAqBT,IAArB;IACD,CAHD;IAKAU,gBAAgB,MAAM;MACpBhB,QAAQiB,aAAR,CAAsBX,IAAtB;MACAZ,SAASwB,cAAT,CAAwBZ,IAAxB;IACD,CAHD;IAKO;MACLa,MADK;MAELvB,UAFK;MAGLF,QAHK;MAILS,MAJK;MAKLiB,MALK;MAMLC,UANK;MAOLZ;IAPK;EAST;;AA1D6B,EAA/B;;;;;sBAzDEa,kBAgCK;IA/BFC,KAAK,kBAAUC,gBAAWC,CAAX,EAAV,EAAgCD,gBAAWE,EAAX,CAAa,QAAb,EAAwBF,IAAM,OAA9B,CAAhC,EAAuEA,gBAAWE,EAAX,CAAa,UAAb,EAA0BF,IAAQ,SAAlC,CAAvE,EA+BH;IA1BHG,IAAK,YA0BF;IAzBHC,QAAS,MAyBN;IAxBFC,SAAKC,MAAE,GAAF,KAAEA,sEAAF;EAwBH,GAxBK,CAGSN,IAAW,WAAX,CAAWO,IAAX,CAAgBhD,IAAhB,KAAoB,QAApB,IAA6CyC,cAAStC,KAAT,CAAe8C,QAA5D,IAAgFR,YAAOS,KAAvF,IAAuFC,aADxGC,WAiBa;IAAAC;IAXVC,QAAQb,IAAO,OAAP,CAAOc,IAWL;IAVXC,SAAU,SAUC;IATV,uBAAqB,QASX;IARXC;EAQW,GARX;IAEWC,SAAOC,QAChB,MAAqB,CAArBC,UAAqB,uBADLD,CAFlB;qBAKA,MAEM,CAFNE,kBAEM;MAFArB,OAAKsB,cAAE,aAAOC,EAAP,CAAS,SAAT,EAAS,SAAT;IAEP,GAFgB,CACpBH,UAAQ,wBADY,CAEhB,EADI,CACJ,GAPN;;EAAA,CAQW,gBAhBI,kBAiBjBrB,kBAGW;IAAAc;EAAA,IAFTO,UAAQ,wBAEC,EADTA,UAAqB,sBACZ,GADY,EACZ,CApBM,CAHT,CAwBL","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","components","ElTooltip","props","emits","setup","emit","instance","getCurrentInstance","inject","useNamespace","rootMenu","throwError","parentMenu","indexPath","useMenu","toRef","subMenu","value","uid","active","computed","activeIndex","item","reactive","index","handleClick","disabled","handleMenuItemClick","route","onMounted","addSubMenu","addMenuItem","onBeforeUnmount","removeSubMenu","removeMenuItem","Effect","nsMenu","nsMenuItem","_createElementBlock","class","_ctx","b","is","role","tabindex","onClick","_cache","type","collapse","title","openBlock","_createBlock","key","effect","DARK","placement","persistent","content","_withCtx","_renderSlot","_createElementVNode","_normalizeClass","be"],"sources":["../../../../../../packages/components/menu/src/menu-item.vue"],"sourcesContent":["<template>\n  <li\n    :class=\"[\n      nsMenuItem.b(),\n      nsMenuItem.is('active', active),\n      nsMenuItem.is('disabled', disabled),\n    ]\"\n    role=\"menuitem\"\n    tabindex=\"-1\"\n    @click=\"handleClick\"\n  >\n    <el-tooltip\n      v-if=\"\n        parentMenu.type.name === 'ElMenu' &&\n        rootMenu.props.collapse &&\n        $slots.title\n      \"\n      :effect=\"Effect.DARK\"\n      placement=\"right\"\n      :fallback-placements=\"['left']\"\n      persistent\n    >\n      <template #content>\n        <slot name=\"title\" />\n      </template>\n      <div :class=\"nsMenu.be('tooltip', 'trigger')\">\n        <slot />\n      </div>\n    </el-tooltip>\n    <template v-else>\n      <slot />\n      <slot name=\"title\" />\n    </template>\n  </li>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  onBeforeUnmount,\n  onMounted,\n  reactive,\n  toRef,\n} from 'vue'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport { Effect } from '@element-plus/components/popper'\nimport { throwError } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport useMenu from './use-menu'\nimport { menuItemEmits, menuItemProps } from './menu-item'\n\nimport type { MenuItemRegistered, MenuProvider, SubMenuProvider } from './types'\n\nconst COMPONENT_NAME = 'ElMenuItem'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElTooltip,\n  },\n\n  props: menuItemProps,\n  emits: menuItemEmits,\n\n  setup(props, { emit }) {\n    const instance = getCurrentInstance()!\n    const rootMenu = inject<MenuProvider>('rootMenu')\n    const nsMenu = useNamespace('menu')\n    const nsMenuItem = useNamespace('menu-item')\n    if (!rootMenu) throwError(COMPONENT_NAME, 'can not inject root menu')\n\n    const { parentMenu, indexPath } = useMenu(instance, toRef(props, 'index'))\n\n    const subMenu = inject<SubMenuProvider>(`subMenu:${parentMenu.value.uid}`)\n    if (!subMenu) throwError(COMPONENT_NAME, 'can not inject sub menu')\n\n    const active = computed(() => props.index === rootMenu.activeIndex)\n    const item: MenuItemRegistered = reactive({\n      index: props.index,\n      indexPath,\n      active,\n    })\n\n    const handleClick = () => {\n      if (!props.disabled) {\n        rootMenu.handleMenuItemClick({\n          index: props.index,\n          indexPath: indexPath.value,\n          route: props.route,\n        })\n        emit('click', item)\n      }\n    }\n\n    onMounted(() => {\n      subMenu.addSubMenu(item)\n      rootMenu.addMenuItem(item)\n    })\n\n    onBeforeUnmount(() => {\n      subMenu.removeSubMenu(item)\n      rootMenu.removeMenuItem(item)\n    })\n\n    return {\n      Effect,\n      parentMenu,\n      rootMenu,\n      active,\n      nsMenu,\n      nsMenuItem,\n      handleClick,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}