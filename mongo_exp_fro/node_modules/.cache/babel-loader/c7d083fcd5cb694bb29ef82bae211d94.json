{"ast":null,"code":"import '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { isArray, isDate } from '@vue/shared';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT } from '../../../constants/event.mjs';\n\nconst isValidRange = range => isArray(range) && range.length === 2 && range.every(item => isDate(item));\n\nconst calendarProps = buildProps({\n  modelValue: {\n    type: Date\n  },\n  range: {\n    type: definePropType(Array),\n    validator: isValidRange\n  }\n});\nconst calendarEmits = {\n  [UPDATE_MODEL_EVENT]: value => isDate(value),\n  [INPUT_EVENT]: value => isDate(value)\n};\nexport { calendarEmits, calendarProps };","map":{"version":3,"mappings":";;;;;;AAOA,MAAMA,YAAY,GAAIC,KAAD,IAAWC,OAAO,CAACD,KAAD,CAAP,IAAkBA,KAAK,CAACE,MAAN,KAAiB,CAAnC,IAAwCF,KAAK,CAACG,KAAN,CAAaC,IAAD,IAAUC,MAAM,CAACD,IAAD,CAA5B,CAAxE;;AACY,MAACE,aAAa,GAAGC,UAAU,CAAC;EACtCC,UAAU,EAAE;IACVC,IAAI,EAAEC;EADI,CAD0B;EAItCV,KAAK,EAAE;IACLS,IAAI,EAAEE,cAAc,CAACC,KAAD,CADf;IAELC,SAAS,EAAEd;EAFN;AAJ+B,CAAD,CAA3B;AASA,MAACe,aAAa,GAAG;EAC3B,CAACC,kBAAD,GAAuBC,KAAD,IAAWX,MAAM,CAACW,KAAD,CADZ;EAE3B,CAACC,WAAD,GAAgBD,KAAD,IAAWX,MAAM,CAACW,KAAD;AAFL,CAAjB","names":["isValidRange","range","isArray","length","every","item","isDate","calendarProps","buildProps","modelValue","type","Date","definePropType","Array","validator","calendarEmits","UPDATE_MODEL_EVENT","value","INPUT_EVENT"],"sources":["../../../../../../packages/components/calendar/src/calendar.ts"],"sourcesContent":["import {\n  buildProps,\n  definePropType,\n  isArray,\n  isDate,\n} from '@element-plus/utils'\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport type { ExtractPropTypes } from 'vue'\nimport type Calendar from './calendar.vue'\n\nexport type CalendarDateType =\n  | 'prev-month'\n  | 'next-month'\n  | 'prev-year'\n  | 'next-year'\n  | 'today'\n\nconst isValidRange = (range: unknown): range is [Date, Date] =>\n  isArray(range) && range.length === 2 && range.every((item) => isDate(item))\n\nexport const calendarProps = buildProps({\n  modelValue: {\n    type: Date,\n  },\n  range: {\n    type: definePropType<[Date, Date]>(Array),\n    validator: isValidRange,\n  },\n} as const)\nexport type CalendarProps = ExtractPropTypes<typeof calendarProps>\n\nexport const calendarEmits = {\n  [UPDATE_MODEL_EVENT]: (value: Date) => isDate(value),\n  [INPUT_EVENT]: (value: Date) => isDate(value),\n}\nexport type CalendarEmits = typeof calendarEmits\n\nexport type CalendarInstance = InstanceType<typeof Calendar>\n"]},"metadata":{},"sourceType":"module"}