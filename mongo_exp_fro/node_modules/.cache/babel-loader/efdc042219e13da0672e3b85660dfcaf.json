{"ast":null,"code":"import { defineComponent, markRaw, ref, effectScope, shallowRef, computed, watch, nextTick, onMounted, openBlock, createBlock, Teleport, createVNode, Transition, withCtx, createElementVNode, normalizeClass, unref, normalizeStyle, withModifiers, createCommentVNode, createElementBlock, Fragment, resolveDynamicComponent, renderList, withDirectives, vShow, renderSlot } from 'vue';\nimport { isNumber, useEventListener } from '@vueuse/core';\nimport { throttle } from 'lodash-unified';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { FullScreen, ScaleToOriginal, Close, ArrowLeft, ArrowRight, ZoomOut, ZoomIn, RefreshLeft, RefreshRight } from '@element-plus/icons-vue';\nimport { imageViewerProps, imageViewerEmits } from './image-viewer.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isFirefox } from '../../../utils/browser.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { keysOf } from '../../../utils/objects.mjs';\nconst _hoisted_1 = [\"src\"];\nconst __default__ = {\n  name: \"ElImageViewer\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: imageViewerProps,\n  emits: imageViewerEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const modes = {\n      CONTAIN: {\n        name: \"contain\",\n        icon: markRaw(FullScreen)\n      },\n      ORIGINAL: {\n        name: \"original\",\n        icon: markRaw(ScaleToOriginal)\n      }\n    };\n    const mousewheelEventName = isFirefox() ? \"DOMMouseScroll\" : \"mousewheel\";\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"image-viewer\");\n    const {\n      nextZIndex\n    } = useZIndex();\n    const wrapper = ref();\n    const imgRefs = ref([]);\n    const scopeEventListener = effectScope();\n    const loading = ref(true);\n    const index = ref(props.initialIndex);\n    const mode = shallowRef(modes.CONTAIN);\n    const transform = ref({\n      scale: 1,\n      deg: 0,\n      offsetX: 0,\n      offsetY: 0,\n      enableTransition: false\n    });\n    const isSingle = computed(() => {\n      const {\n        urlList\n      } = props;\n      return urlList.length <= 1;\n    });\n    const isFirst = computed(() => {\n      return index.value === 0;\n    });\n    const isLast = computed(() => {\n      return index.value === props.urlList.length - 1;\n    });\n    const currentImg = computed(() => {\n      return props.urlList[index.value];\n    });\n    const imgStyle = computed(() => {\n      const {\n        scale,\n        deg,\n        offsetX,\n        offsetY,\n        enableTransition\n      } = transform.value;\n      let translateX = offsetX / scale;\n      let translateY = offsetY / scale;\n\n      switch (deg % 360) {\n        case 90:\n        case -270:\n          ;\n          [translateX, translateY] = [translateY, -translateX];\n          break;\n\n        case 180:\n        case -180:\n          ;\n          [translateX, translateY] = [-translateX, -translateY];\n          break;\n\n        case 270:\n        case -90:\n          ;\n          [translateX, translateY] = [-translateY, translateX];\n          break;\n      }\n\n      const style = {\n        transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,\n        transition: enableTransition ? \"transform .3s\" : \"\"\n      };\n\n      if (mode.value.name === modes.CONTAIN.name) {\n        style.maxWidth = style.maxHeight = \"100%\";\n      }\n\n      return style;\n    });\n    const computedZIndex = computed(() => {\n      return isNumber(props.zIndex) ? props.zIndex : nextZIndex();\n    });\n\n    function hide() {\n      unregisterEventListener();\n      emit(\"close\");\n    }\n\n    function registerEventListener() {\n      const keydownHandler = throttle(e => {\n        switch (e.code) {\n          case EVENT_CODE.esc:\n            props.closeOnPressEscape && hide();\n            break;\n\n          case EVENT_CODE.space:\n            toggleMode();\n            break;\n\n          case EVENT_CODE.left:\n            prev();\n            break;\n\n          case EVENT_CODE.up:\n            handleActions(\"zoomIn\");\n            break;\n\n          case EVENT_CODE.right:\n            next();\n            break;\n\n          case EVENT_CODE.down:\n            handleActions(\"zoomOut\");\n            break;\n        }\n      });\n      const mousewheelHandler = throttle(e => {\n        const delta = e.wheelDelta ? e.wheelDelta : -e.detail;\n\n        if (delta > 0) {\n          handleActions(\"zoomIn\", {\n            zoomRate: 1.2,\n            enableTransition: false\n          });\n        } else {\n          handleActions(\"zoomOut\", {\n            zoomRate: 1.2,\n            enableTransition: false\n          });\n        }\n      });\n      scopeEventListener.run(() => {\n        useEventListener(document, \"keydown\", keydownHandler);\n        useEventListener(document, mousewheelEventName, mousewheelHandler);\n      });\n    }\n\n    function unregisterEventListener() {\n      scopeEventListener.stop();\n    }\n\n    function handleImgLoad() {\n      loading.value = false;\n    }\n\n    function handleImgError(e) {\n      loading.value = false;\n      e.target.alt = t(\"el.image.error\");\n    }\n\n    function handleMouseDown(e) {\n      if (loading.value || e.button !== 0 || !wrapper.value) return;\n      transform.value.enableTransition = false;\n      const {\n        offsetX,\n        offsetY\n      } = transform.value;\n      const startX = e.pageX;\n      const startY = e.pageY;\n      const dragHandler = throttle(ev => {\n        transform.value = { ...transform.value,\n          offsetX: offsetX + ev.pageX - startX,\n          offsetY: offsetY + ev.pageY - startY\n        };\n      });\n      const removeMousemove = useEventListener(document, \"mousemove\", dragHandler);\n      useEventListener(document, \"mouseup\", () => {\n        removeMousemove();\n      });\n      e.preventDefault();\n    }\n\n    function reset() {\n      transform.value = {\n        scale: 1,\n        deg: 0,\n        offsetX: 0,\n        offsetY: 0,\n        enableTransition: false\n      };\n    }\n\n    function toggleMode() {\n      if (loading.value) return;\n      const modeNames = keysOf(modes);\n      const modeValues = Object.values(modes);\n      const currentMode = mode.value.name;\n      const index2 = modeValues.findIndex(i => i.name === currentMode);\n      const nextIndex = (index2 + 1) % modeNames.length;\n      mode.value = modes[modeNames[nextIndex]];\n      reset();\n    }\n\n    function prev() {\n      if (isFirst.value && !props.infinite) return;\n      const len = props.urlList.length;\n      index.value = (index.value - 1 + len) % len;\n    }\n\n    function next() {\n      if (isLast.value && !props.infinite) return;\n      const len = props.urlList.length;\n      index.value = (index.value + 1) % len;\n    }\n\n    function handleActions(action, options = {}) {\n      if (loading.value) return;\n      const {\n        zoomRate,\n        rotateDeg,\n        enableTransition\n      } = {\n        zoomRate: 1.4,\n        rotateDeg: 90,\n        enableTransition: true,\n        ...options\n      };\n\n      switch (action) {\n        case \"zoomOut\":\n          if (transform.value.scale > 0.2) {\n            transform.value.scale = Number.parseFloat((transform.value.scale / zoomRate).toFixed(3));\n          }\n\n          break;\n\n        case \"zoomIn\":\n          if (transform.value.scale < 7) {\n            transform.value.scale = Number.parseFloat((transform.value.scale * zoomRate).toFixed(3));\n          }\n\n          break;\n\n        case \"clockwise\":\n          transform.value.deg += rotateDeg;\n          break;\n\n        case \"anticlockwise\":\n          transform.value.deg -= rotateDeg;\n          break;\n      }\n\n      transform.value.enableTransition = enableTransition;\n    }\n\n    watch(currentImg, () => {\n      nextTick(() => {\n        const $img = imgRefs.value[0];\n\n        if (!($img == null ? void 0 : $img.complete)) {\n          loading.value = true;\n        }\n      });\n    });\n    watch(index, val => {\n      reset();\n      emit(\"switch\", val);\n    });\n    onMounted(() => {\n      var _a, _b;\n\n      registerEventListener();\n      (_b = (_a = wrapper.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createBlock(Teleport, {\n        to: \"body\",\n        disabled: !_ctx.teleported\n      }, [createVNode(Transition, {\n        name: \"viewer-fade\",\n        appear: \"\"\n      }, {\n        default: withCtx(() => [createElementVNode(\"div\", {\n          ref_key: \"wrapper\",\n          ref: wrapper,\n          tabindex: -1,\n          class: normalizeClass(unref(ns).e(\"wrapper\")),\n          style: normalizeStyle({\n            zIndex: unref(computedZIndex)\n          })\n        }, [createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).e(\"mask\")),\n          onClick: _cache[0] || (_cache[0] = withModifiers($event => _ctx.hideOnClickModal && hide(), [\"self\"]))\n        }, null, 2), createCommentVNode(\" CLOSE \"), createElementVNode(\"span\", {\n          class: normalizeClass([unref(ns).e(\"btn\"), unref(ns).e(\"close\")]),\n          onClick: hide\n        }, [createVNode(unref(ElIcon), null, {\n          default: withCtx(() => [createVNode(unref(Close))]),\n          _: 1\n        })], 2), createCommentVNode(\" ARROW \"), !unref(isSingle) ? (openBlock(), createElementBlock(Fragment, {\n          key: 0\n        }, [createElementVNode(\"span\", {\n          class: normalizeClass([unref(ns).e(\"btn\"), unref(ns).e(\"prev\"), unref(ns).is(\"disabled\", !_ctx.infinite && unref(isFirst))]),\n          onClick: prev\n        }, [createVNode(unref(ElIcon), null, {\n          default: withCtx(() => [createVNode(unref(ArrowLeft))]),\n          _: 1\n        })], 2), createElementVNode(\"span\", {\n          class: normalizeClass([unref(ns).e(\"btn\"), unref(ns).e(\"next\"), unref(ns).is(\"disabled\", !_ctx.infinite && unref(isLast))]),\n          onClick: next\n        }, [createVNode(unref(ElIcon), null, {\n          default: withCtx(() => [createVNode(unref(ArrowRight))]),\n          _: 1\n        })], 2)], 64)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" ACTIONS \"), createElementVNode(\"div\", {\n          class: normalizeClass([unref(ns).e(\"btn\"), unref(ns).e(\"actions\")])\n        }, [createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).e(\"actions__inner\"))\n        }, [createVNode(unref(ElIcon), {\n          onClick: _cache[1] || (_cache[1] = $event => handleActions(\"zoomOut\"))\n        }, {\n          default: withCtx(() => [createVNode(unref(ZoomOut))]),\n          _: 1\n        }), createVNode(unref(ElIcon), {\n          onClick: _cache[2] || (_cache[2] = $event => handleActions(\"zoomIn\"))\n        }, {\n          default: withCtx(() => [createVNode(unref(ZoomIn))]),\n          _: 1\n        }), createElementVNode(\"i\", {\n          class: normalizeClass(unref(ns).e(\"actions__divider\"))\n        }, null, 2), createVNode(unref(ElIcon), {\n          onClick: toggleMode\n        }, {\n          default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(unref(mode).icon)))]),\n          _: 1\n        }), createElementVNode(\"i\", {\n          class: normalizeClass(unref(ns).e(\"actions__divider\"))\n        }, null, 2), createVNode(unref(ElIcon), {\n          onClick: _cache[3] || (_cache[3] = $event => handleActions(\"anticlockwise\"))\n        }, {\n          default: withCtx(() => [createVNode(unref(RefreshLeft))]),\n          _: 1\n        }), createVNode(unref(ElIcon), {\n          onClick: _cache[4] || (_cache[4] = $event => handleActions(\"clockwise\"))\n        }, {\n          default: withCtx(() => [createVNode(unref(RefreshRight))]),\n          _: 1\n        })], 2)], 2), createCommentVNode(\" CANVAS \"), createElementVNode(\"div\", {\n          class: normalizeClass(unref(ns).e(\"canvas\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.urlList, (url, i) => {\n          return withDirectives((openBlock(), createElementBlock(\"img\", {\n            ref_for: true,\n            ref: el => imgRefs.value[i] = el,\n            key: url,\n            src: url,\n            style: normalizeStyle(unref(imgStyle)),\n            class: normalizeClass(unref(ns).e(\"img\")),\n            onLoad: handleImgLoad,\n            onError: handleImgError,\n            onMousedown: handleMouseDown\n          }, null, 46, _hoisted_1)), [[vShow, i === index.value]]);\n        }), 128))], 2), renderSlot(_ctx.$slots, \"default\")], 6)]),\n        _: 3\n      })], 8, [\"disabled\"]);\n    };\n  }\n\n});\n\nvar ImageViewer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/image-viewer/src/image-viewer.vue\"]]);\n\nexport { ImageViewer as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmHA;MACAA;QACAC,eADA;QAEAC;MAFA,CADA;MAKAC;QACAF,gBADA;QAEAC;MAFA;IALA;IAWA;IASA;MAAAE;IAAA;IACA;IACA;MAAAC;IAAA;IACA;IACA;IAEA;IAEA;IACA;IACA;IACA;MACAC,QADA;MAEAC,MAFA;MAGAC,UAHA;MAIAC,UAJA;MAKAC;IALA;IAQA;MACA;QAAAC;MAAA;MACA;IACA,CAHA;IAKA;MACA;IACA,CAFA;IAIA;MACA;IACA,CAFA;IAIA;MACA;IACA,CAFA;IAIA;MACA;QAAAL;QAAAC;QAAAC;QAAAC;QAAAC;MAAA;MACA;MACA;;MAEA;QACA;QACA;UACA;UAAA;UACA;;QACA;QACA;UACA;UAAA;UACA;;QACA;QACA;UACA;UAAA;UACA;MAZA;;MAeA;QACAE,0FADA;QAEAC;MAFA;;MAIA;QACAC;MACA;;MACA;IACA,CA5BA;IA8BA;MACA;IACA,CAFA;;IAIA;MACAC;MACAC;IACA;;IAEA;MACA;QACA;UAAA,KAEAC,cAFA;YAGAC;YACA;;UAAA,KAEAD,gBAFA;YAGAE;YACA;;UAAA,KAEAF,eAFA;YAGAG;YACA;;UAAA,KAEAH,aAFA;YAGAI;YACA;;UAAA,KAEAJ,gBAFA;YAGAK;YACA;;UAAA,KAEAL,eAFA;YAGAI;YACA;QAxBA;MA0BA,CA3BA;MA4BA,kCACA;QACA;;QACA;UACAA;YACAE,aADA;YAEAb;UAFA;QAIA,CALA,MAKA;UACAW;YACAE,aADA;YAEAb;UAFA;QAIA;MAEA,CAdA,CADA;MAiBAc;QACAC;QACAA;MACA,CAHA;IAIA;;IAEA;MACAD;IACA;;IAEA;MACAE;IACA;;IAEA;MACAA;MACAC;IACA;;IAEA;MACA;MACAf;MAEA;QAAAJ;QAAAC;MAAA;MACA;MACA;MAEA;QACAG,oBACA,kBADA;UAEAJ,oCAFA;UAGAC;QAHA;MAKA,CANA;MAOA;MACAgB;QACAG;MACA,CAFA;MAIAD;IACA;;IAEA;MACAf;QACAN,QADA;QAEAC,MAFA;QAGAC,UAHA;QAIAC,UAJA;QAKAC;MALA;IAOA;;IAEA;MACA;MAEA;MACA;MACA;MACA;MACA;MACAmB;MACAC;IACA;;IAEA;MACA;MACA;MACAC;IACA;;IAEA;MACA;MACA;MACAA;IACA;;IAEA;MACA;MACA;QAAAR;QAAAS;QAAAtB;MAAA;QACAa,aADA;QAEAS,aAFA;QAGAtB,sBAHA;QAIA;MAJA;;MAMA;QACA;UACA;YACAE,0CACA,6CADA;UAGA;;UACA;;QACA;UACA;YACAA,0CACA,6CADA;UAGA;;UACA;;QACA;UACAA;UACA;;QACA;UACAA;UACA;MApBA;;MAsBAA;IACA;;IAEAqB;MACAC;QACA;;QACA;UACAR;QACA;MACA,CALA;IAMA,CAPA;IASAO;MACAH;MACAd;IACA,CAHA;IAKAmB;MACA;;MAGAC;MACA;KALA","names":["CONTAIN","name","icon","ORIGINAL","t","nextZIndex","scale","deg","offsetX","offsetY","enableTransition","urlList","transform","transition","style","unregisterEventListener","emit","EVENT_CODE","props","toggleMode","prev","handleActions","next","zoomRate","scopeEventListener","useEventListener","loading","e","removeMousemove","mode","reset","index","rotateDeg","watch","nextTick","onMounted","registerEventListener"],"sources":["../../../../../../packages/components/image-viewer/src/image-viewer.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!teleported\">\n    <transition name=\"viewer-fade\" appear>\n      <div\n        ref=\"wrapper\"\n        :tabindex=\"-1\"\n        :class=\"ns.e('wrapper')\"\n        :style=\"{ zIndex: computedZIndex }\"\n      >\n        <div :class=\"ns.e('mask')\" @click.self=\"hideOnClickModal && hide()\" />\n\n        <!-- CLOSE -->\n        <span :class=\"[ns.e('btn'), ns.e('close')]\" @click=\"hide\">\n          <el-icon><Close /></el-icon>\n        </span>\n\n        <!-- ARROW -->\n        <template v-if=\"!isSingle\">\n          <span\n            :class=\"[\n              ns.e('btn'),\n              ns.e('prev'),\n              ns.is('disabled', !infinite && isFirst),\n            ]\"\n            @click=\"prev\"\n          >\n            <el-icon><ArrowLeft /></el-icon>\n          </span>\n          <span\n            :class=\"[\n              ns.e('btn'),\n              ns.e('next'),\n              ns.is('disabled', !infinite && isLast),\n            ]\"\n            @click=\"next\"\n          >\n            <el-icon><ArrowRight /></el-icon>\n          </span>\n        </template>\n        <!-- ACTIONS -->\n        <div :class=\"[ns.e('btn'), ns.e('actions')]\">\n          <div :class=\"ns.e('actions__inner')\">\n            <el-icon @click=\"handleActions('zoomOut')\">\n              <ZoomOut />\n            </el-icon>\n            <el-icon @click=\"handleActions('zoomIn')\">\n              <ZoomIn />\n            </el-icon>\n            <i :class=\"ns.e('actions__divider')\" />\n            <el-icon @click=\"toggleMode\">\n              <component :is=\"mode.icon\" />\n            </el-icon>\n            <i :class=\"ns.e('actions__divider')\" />\n            <el-icon @click=\"handleActions('anticlockwise')\">\n              <RefreshLeft />\n            </el-icon>\n            <el-icon @click=\"handleActions('clockwise')\">\n              <RefreshRight />\n            </el-icon>\n          </div>\n        </div>\n        <!-- CANVAS -->\n        <div :class=\"ns.e('canvas')\">\n          <img\n            v-for=\"(url, i) in urlList\"\n            v-show=\"i === index\"\n            :ref=\"(el) => (imgRefs[i] = el as HTMLImageElement)\"\n            :key=\"url\"\n            :src=\"url\"\n            :style=\"imgStyle\"\n            :class=\"ns.e('img')\"\n            @load=\"handleImgLoad\"\n            @error=\"handleImgError\"\n            @mousedown=\"handleMouseDown\"\n          />\n        </div>\n        <slot />\n      </div>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  effectScope,\n  markRaw,\n  nextTick,\n  onMounted,\n  ref,\n  shallowRef,\n  watch,\n} from 'vue'\nimport { isNumber, useEventListener } from '@vueuse/core'\nimport { throttle } from 'lodash-unified'\nimport { useLocale, useNamespace, useZIndex } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { isFirefox, keysOf } from '@element-plus/utils'\nimport ElIcon from '@element-plus/components/icon'\nimport {\n  ArrowLeft,\n  ArrowRight,\n  Close,\n  FullScreen,\n  RefreshLeft,\n  RefreshRight,\n  ScaleToOriginal,\n  ZoomIn,\n  ZoomOut,\n} from '@element-plus/icons-vue'\nimport { imageViewerEmits, imageViewerProps } from './image-viewer'\n\nimport type { CSSProperties } from 'vue'\nimport type { ImageViewerAction, ImageViewerMode } from './image-viewer'\n\nconst modes: Record<'CONTAIN' | 'ORIGINAL', ImageViewerMode> = {\n  CONTAIN: {\n    name: 'contain',\n    icon: markRaw(FullScreen),\n  },\n  ORIGINAL: {\n    name: 'original',\n    icon: markRaw(ScaleToOriginal),\n  },\n}\n\nconst mousewheelEventName = isFirefox() ? 'DOMMouseScroll' : 'mousewheel'\n\ndefineOptions({\n  name: 'ElImageViewer',\n})\n\nconst props = defineProps(imageViewerProps)\nconst emit = defineEmits(imageViewerEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('image-viewer')\nconst { nextZIndex } = useZIndex()\nconst wrapper = ref<HTMLDivElement>()\nconst imgRefs = ref<HTMLImageElement[]>([])\n\nconst scopeEventListener = effectScope()\n\nconst loading = ref(true)\nconst index = ref(props.initialIndex)\nconst mode = shallowRef<ImageViewerMode>(modes.CONTAIN)\nconst transform = ref({\n  scale: 1,\n  deg: 0,\n  offsetX: 0,\n  offsetY: 0,\n  enableTransition: false,\n})\n\nconst isSingle = computed(() => {\n  const { urlList } = props\n  return urlList.length <= 1\n})\n\nconst isFirst = computed(() => {\n  return index.value === 0\n})\n\nconst isLast = computed(() => {\n  return index.value === props.urlList.length - 1\n})\n\nconst currentImg = computed(() => {\n  return props.urlList[index.value]\n})\n\nconst imgStyle = computed(() => {\n  const { scale, deg, offsetX, offsetY, enableTransition } = transform.value\n  let translateX = offsetX / scale\n  let translateY = offsetY / scale\n\n  switch (deg % 360) {\n    case 90:\n    case -270:\n      ;[translateX, translateY] = [translateY, -translateX]\n      break\n    case 180:\n    case -180:\n      ;[translateX, translateY] = [-translateX, -translateY]\n      break\n    case 270:\n    case -90:\n      ;[translateX, translateY] = [-translateY, translateX]\n      break\n  }\n\n  const style: CSSProperties = {\n    transform: `scale(${scale}) rotate(${deg}deg) translate(${translateX}px, ${translateY}px)`,\n    transition: enableTransition ? 'transform .3s' : '',\n  }\n  if (mode.value.name === modes.CONTAIN.name) {\n    style.maxWidth = style.maxHeight = '100%'\n  }\n  return style\n})\n\nconst computedZIndex = computed(() => {\n  return isNumber(props.zIndex) ? props.zIndex : nextZIndex()\n})\n\nfunction hide() {\n  unregisterEventListener()\n  emit('close')\n}\n\nfunction registerEventListener() {\n  const keydownHandler = throttle((e: KeyboardEvent) => {\n    switch (e.code) {\n      // ESC\n      case EVENT_CODE.esc:\n        props.closeOnPressEscape && hide()\n        break\n      // SPACE\n      case EVENT_CODE.space:\n        toggleMode()\n        break\n      // LEFT_ARROW\n      case EVENT_CODE.left:\n        prev()\n        break\n      // UP_ARROW\n      case EVENT_CODE.up:\n        handleActions('zoomIn')\n        break\n      // RIGHT_ARROW\n      case EVENT_CODE.right:\n        next()\n        break\n      // DOWN_ARROW\n      case EVENT_CODE.down:\n        handleActions('zoomOut')\n        break\n    }\n  })\n  const mousewheelHandler = throttle(\n    (e: WheelEvent | any /* TODO: wheelDelta is deprecated */) => {\n      const delta = e.wheelDelta ? e.wheelDelta : -e.detail\n      if (delta > 0) {\n        handleActions('zoomIn', {\n          zoomRate: 1.2,\n          enableTransition: false,\n        })\n      } else {\n        handleActions('zoomOut', {\n          zoomRate: 1.2,\n          enableTransition: false,\n        })\n      }\n    }\n  )\n\n  scopeEventListener.run(() => {\n    useEventListener(document, 'keydown', keydownHandler)\n    useEventListener(document, mousewheelEventName, mousewheelHandler)\n  })\n}\n\nfunction unregisterEventListener() {\n  scopeEventListener.stop()\n}\n\nfunction handleImgLoad() {\n  loading.value = false\n}\n\nfunction handleImgError(e: Event) {\n  loading.value = false\n  ;(e.target as HTMLImageElement).alt = t('el.image.error')\n}\n\nfunction handleMouseDown(e: MouseEvent) {\n  if (loading.value || e.button !== 0 || !wrapper.value) return\n  transform.value.enableTransition = false\n\n  const { offsetX, offsetY } = transform.value\n  const startX = e.pageX\n  const startY = e.pageY\n\n  const dragHandler = throttle((ev: MouseEvent) => {\n    transform.value = {\n      ...transform.value,\n      offsetX: offsetX + ev.pageX - startX,\n      offsetY: offsetY + ev.pageY - startY,\n    }\n  })\n  const removeMousemove = useEventListener(document, 'mousemove', dragHandler)\n  useEventListener(document, 'mouseup', () => {\n    removeMousemove()\n  })\n\n  e.preventDefault()\n}\n\nfunction reset() {\n  transform.value = {\n    scale: 1,\n    deg: 0,\n    offsetX: 0,\n    offsetY: 0,\n    enableTransition: false,\n  }\n}\n\nfunction toggleMode() {\n  if (loading.value) return\n\n  const modeNames = keysOf(modes)\n  const modeValues = Object.values(modes)\n  const currentMode = mode.value.name\n  const index = modeValues.findIndex((i) => i.name === currentMode)\n  const nextIndex = (index + 1) % modeNames.length\n  mode.value = modes[modeNames[nextIndex]]\n  reset()\n}\n\nfunction prev() {\n  if (isFirst.value && !props.infinite) return\n  const len = props.urlList.length\n  index.value = (index.value - 1 + len) % len\n}\n\nfunction next() {\n  if (isLast.value && !props.infinite) return\n  const len = props.urlList.length\n  index.value = (index.value + 1) % len\n}\n\nfunction handleActions(action: ImageViewerAction, options = {}) {\n  if (loading.value) return\n  const { zoomRate, rotateDeg, enableTransition } = {\n    zoomRate: 1.4,\n    rotateDeg: 90,\n    enableTransition: true,\n    ...options,\n  }\n  switch (action) {\n    case 'zoomOut':\n      if (transform.value.scale > 0.2) {\n        transform.value.scale = Number.parseFloat(\n          (transform.value.scale / zoomRate).toFixed(3)\n        )\n      }\n      break\n    case 'zoomIn':\n      if (transform.value.scale < 7) {\n        transform.value.scale = Number.parseFloat(\n          (transform.value.scale * zoomRate).toFixed(3)\n        )\n      }\n      break\n    case 'clockwise':\n      transform.value.deg += rotateDeg\n      break\n    case 'anticlockwise':\n      transform.value.deg -= rotateDeg\n      break\n  }\n  transform.value.enableTransition = enableTransition\n}\n\nwatch(currentImg, () => {\n  nextTick(() => {\n    const $img = imgRefs.value[0]\n    if (!$img?.complete) {\n      loading.value = true\n    }\n  })\n})\n\nwatch(index, (val) => {\n  reset()\n  emit('switch', val)\n})\n\nonMounted(() => {\n  registerEventListener()\n  // add tabindex then wrapper can be focusable via Javascript\n  // focus wrapper so arrow key can't cause inner scroll behavior underneath\n  wrapper.value?.focus?.()\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}