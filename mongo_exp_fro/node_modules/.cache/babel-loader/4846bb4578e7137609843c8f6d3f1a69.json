{"ast":null,"code":"import { ref, getCurrentInstance, watch, nextTick } from 'vue';\nimport { SetOperationEnum, NODE_CHECK, NODE_CHECK_CHANGE } from '../virtual-tree.mjs';\n\nfunction useCheck(props, tree) {\n  const checkedKeys = ref( /* @__PURE__ */new Set());\n  const indeterminateKeys = ref( /* @__PURE__ */new Set());\n  const {\n    emit\n  } = getCurrentInstance();\n  watch(() => tree.value, () => {\n    return nextTick(() => {\n      _setCheckedKeys(props.defaultCheckedKeys);\n    });\n  }, {\n    immediate: true\n  });\n\n  const updateCheckedKeys = () => {\n    if (!tree.value || !props.showCheckbox || props.checkStrictly) {\n      return;\n    }\n\n    const {\n      levelTreeNodeMap,\n      maxLevel\n    } = tree.value;\n    const checkedKeySet = checkedKeys.value;\n    const indeterminateKeySet = /* @__PURE__ */new Set();\n\n    for (let level = maxLevel - 1; level >= 1; --level) {\n      const nodes = levelTreeNodeMap.get(level);\n      if (!nodes) continue;\n      nodes.forEach(node => {\n        const children = node.children;\n\n        if (children) {\n          let allChecked = true;\n          let hasChecked = false;\n\n          for (const childNode of children) {\n            const key = childNode.key;\n\n            if (checkedKeySet.has(key)) {\n              hasChecked = true;\n            } else if (indeterminateKeySet.has(key)) {\n              allChecked = false;\n              hasChecked = true;\n              break;\n            } else {\n              allChecked = false;\n            }\n          }\n\n          if (allChecked) {\n            checkedKeySet.add(node.key);\n          } else if (hasChecked) {\n            indeterminateKeySet.add(node.key);\n            checkedKeySet.delete(node.key);\n          } else {\n            checkedKeySet.delete(node.key);\n            indeterminateKeySet.delete(node.key);\n          }\n        }\n      });\n    }\n\n    indeterminateKeys.value = indeterminateKeySet;\n  };\n\n  const isChecked = node => checkedKeys.value.has(node.key);\n\n  const isIndeterminate = node => indeterminateKeys.value.has(node.key);\n\n  const toggleCheckbox = (node, isChecked2, nodeClick = true) => {\n    const checkedKeySet = checkedKeys.value;\n\n    const toggle = (node2, checked) => {\n      checkedKeySet[checked ? SetOperationEnum.ADD : SetOperationEnum.DELETE](node2.key);\n      const children = node2.children;\n\n      if (!props.checkStrictly && children) {\n        children.forEach(childNode => {\n          if (!childNode.disabled) {\n            toggle(childNode, checked);\n          }\n        });\n      }\n    };\n\n    toggle(node, isChecked2);\n    updateCheckedKeys();\n\n    if (nodeClick) {\n      afterNodeCheck(node, isChecked2);\n    }\n  };\n\n  const afterNodeCheck = (node, checked) => {\n    const {\n      checkedNodes,\n      checkedKeys: checkedKeys2\n    } = getChecked();\n    const {\n      halfCheckedNodes,\n      halfCheckedKeys\n    } = getHalfChecked();\n    emit(NODE_CHECK, node.data, {\n      checkedKeys: checkedKeys2,\n      checkedNodes,\n      halfCheckedKeys,\n      halfCheckedNodes\n    });\n    emit(NODE_CHECK_CHANGE, node.data, checked);\n  };\n\n  function getCheckedKeys(leafOnly = false) {\n    return getChecked(leafOnly).checkedKeys;\n  }\n\n  function getCheckedNodes(leafOnly = false) {\n    return getChecked(leafOnly).checkedNodes;\n  }\n\n  function getHalfCheckedKeys() {\n    return getHalfChecked().halfCheckedKeys;\n  }\n\n  function getHalfCheckedNodes() {\n    return getHalfChecked().halfCheckedNodes;\n  }\n\n  function getChecked(leafOnly = false) {\n    const checkedNodes = [];\n    const keys = [];\n\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      const {\n        treeNodeMap\n      } = tree.value;\n      checkedKeys.value.forEach(key => {\n        const node = treeNodeMap.get(key);\n\n        if (node && (!leafOnly || leafOnly && node.isLeaf)) {\n          keys.push(key);\n          checkedNodes.push(node.data);\n        }\n      });\n    }\n\n    return {\n      checkedKeys: keys,\n      checkedNodes\n    };\n  }\n\n  function getHalfChecked() {\n    const halfCheckedNodes = [];\n    const halfCheckedKeys = [];\n\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      const {\n        treeNodeMap\n      } = tree.value;\n      indeterminateKeys.value.forEach(key => {\n        const node = treeNodeMap.get(key);\n\n        if (node) {\n          halfCheckedKeys.push(key);\n          halfCheckedNodes.push(node.data);\n        }\n      });\n    }\n\n    return {\n      halfCheckedNodes,\n      halfCheckedKeys\n    };\n  }\n\n  function setCheckedKeys(keys) {\n    checkedKeys.value.clear();\n    indeterminateKeys.value.clear();\n\n    _setCheckedKeys(keys);\n  }\n\n  function setChecked(key, isChecked2) {\n    if ((tree == null ? void 0 : tree.value) && props.showCheckbox) {\n      const node = tree.value.treeNodeMap.get(key);\n\n      if (node) {\n        toggleCheckbox(node, isChecked2, false);\n      }\n    }\n  }\n\n  function _setCheckedKeys(keys) {\n    if (tree == null ? void 0 : tree.value) {\n      const {\n        treeNodeMap\n      } = tree.value;\n\n      if (props.showCheckbox && treeNodeMap && keys) {\n        for (const key of keys) {\n          const node = treeNodeMap.get(key);\n\n          if (node && !isChecked(node)) {\n            toggleCheckbox(node, true, false);\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    updateCheckedKeys,\n    toggleCheckbox,\n    isChecked,\n    isIndeterminate,\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys\n  };\n}\n\nexport { useCheck };","map":{"version":3,"mappings":"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","names":["useCheck","props","tree","checkedKeys","ref","Set","indeterminateKeys","emit","getCurrentInstance","watch","value","nextTick","_setCheckedKeys","defaultCheckedKeys","immediate","updateCheckedKeys","showCheckbox","checkStrictly","levelTreeNodeMap","maxLevel","checkedKeySet","indeterminateKeySet","level","nodes","get","forEach","node","children","allChecked","hasChecked","childNode","key","has","add","delete","isChecked","isIndeterminate","toggleCheckbox","isChecked2","nodeClick","toggle","node2","checked","SetOperationEnum","ADD","DELETE","disabled","afterNodeCheck","checkedNodes","checkedKeys2","getChecked","halfCheckedNodes","halfCheckedKeys","getHalfChecked","NODE_CHECK","data","NODE_CHECK_CHANGE","getCheckedKeys","leafOnly","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","keys","treeNodeMap","isLeaf","push","setCheckedKeys","clear","setChecked"],"sources":["../../../../../../../packages/components/tree-v2/src/composables/useCheck.ts"],"sourcesContent":["import { getCurrentInstance, nextTick, ref, watch } from 'vue'\nimport {\n  NODE_CHECK,\n  NODE_CHECK_CHANGE,\n  SetOperationEnum,\n} from '../virtual-tree'\nimport type { Ref } from 'vue'\nimport type { Tree, TreeKey, TreeNode, TreeNodeData, TreeProps } from '../types'\n\nexport function useCheck(props: TreeProps, tree: Ref<Tree | undefined>) {\n  const checkedKeys = ref<Set<TreeKey>>(new Set())\n  const indeterminateKeys = ref<Set<TreeKey>>(new Set())\n  const { emit } = getCurrentInstance()!\n\n  watch(\n    () => tree.value,\n    () => {\n      return nextTick(() => {\n        _setCheckedKeys(props.defaultCheckedKeys)\n      })\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  const updateCheckedKeys = () => {\n    if (!tree.value || !props.showCheckbox || props.checkStrictly) {\n      return\n    }\n    const { levelTreeNodeMap, maxLevel } = tree.value\n    const checkedKeySet = checkedKeys.value\n    const indeterminateKeySet = new Set<TreeKey>()\n    // It is easier to determine the indeterminate state by\n    // traversing from bottom to top\n    // leaf nodes not have indeterminate status and can be skipped\n    for (let level = maxLevel - 1; level >= 1; --level) {\n      const nodes = levelTreeNodeMap.get(level)\n      if (!nodes) continue\n      nodes.forEach((node) => {\n        const children = node.children\n        if (children) {\n          // Whether all child nodes are selected\n          let allChecked = true\n          // Whether a child node is selected\n          let hasChecked = false\n          for (const childNode of children) {\n            const key = childNode.key\n            if (checkedKeySet.has(key)) {\n              hasChecked = true\n            } else if (indeterminateKeySet.has(key)) {\n              allChecked = false\n              hasChecked = true\n              break\n            } else {\n              allChecked = false\n            }\n          }\n          if (allChecked) {\n            checkedKeySet.add(node.key)\n          } else if (hasChecked) {\n            indeterminateKeySet.add(node.key)\n            checkedKeySet.delete(node.key)\n          } else {\n            checkedKeySet.delete(node.key)\n            indeterminateKeySet.delete(node.key)\n          }\n        }\n      })\n    }\n    indeterminateKeys.value = indeterminateKeySet\n  }\n\n  const isChecked = (node: TreeNode) => checkedKeys.value.has(node.key)\n\n  const isIndeterminate = (node: TreeNode) =>\n    indeterminateKeys.value.has(node.key)\n\n  const toggleCheckbox = (\n    node: TreeNode,\n    isChecked: boolean,\n    nodeClick = true\n  ) => {\n    const checkedKeySet = checkedKeys.value\n    const toggle = (node: TreeNode, checked: boolean) => {\n      checkedKeySet[checked ? SetOperationEnum.ADD : SetOperationEnum.DELETE](\n        node.key\n      )\n      const children = node.children\n      if (!props.checkStrictly && children) {\n        children.forEach((childNode) => {\n          if (!childNode.disabled) {\n            toggle(childNode, checked)\n          }\n        })\n      }\n    }\n    toggle(node, isChecked)\n    updateCheckedKeys()\n    if (nodeClick) {\n      afterNodeCheck(node, isChecked)\n    }\n  }\n\n  const afterNodeCheck = (node: TreeNode, checked: boolean) => {\n    const { checkedNodes, checkedKeys } = getChecked()\n    const { halfCheckedNodes, halfCheckedKeys } = getHalfChecked()\n    emit(NODE_CHECK, node.data, {\n      checkedKeys,\n      checkedNodes,\n      halfCheckedKeys,\n      halfCheckedNodes,\n    })\n    emit(NODE_CHECK_CHANGE, node.data, checked)\n  }\n\n  // expose\n  function getCheckedKeys(leafOnly = false): TreeKey[] {\n    return getChecked(leafOnly).checkedKeys\n  }\n\n  function getCheckedNodes(leafOnly = false): TreeNodeData[] {\n    return getChecked(leafOnly).checkedNodes\n  }\n\n  function getHalfCheckedKeys(): TreeKey[] {\n    return getHalfChecked().halfCheckedKeys\n  }\n\n  function getHalfCheckedNodes(): TreeNodeData[] {\n    return getHalfChecked().halfCheckedNodes\n  }\n\n  function getChecked(leafOnly = false): {\n    checkedKeys: TreeKey[]\n    checkedNodes: TreeNodeData[]\n  } {\n    const checkedNodes: TreeNodeData[] = []\n    const keys: TreeKey[] = []\n    if (tree?.value && props.showCheckbox) {\n      const { treeNodeMap } = tree.value\n      checkedKeys.value.forEach((key) => {\n        const node = treeNodeMap.get(key)\n        if (node && (!leafOnly || (leafOnly && node.isLeaf))) {\n          keys.push(key)\n          checkedNodes.push(node.data)\n        }\n      })\n    }\n    return {\n      checkedKeys: keys,\n      checkedNodes,\n    }\n  }\n\n  function getHalfChecked(): {\n    halfCheckedKeys: TreeKey[]\n    halfCheckedNodes: TreeNodeData[]\n  } {\n    const halfCheckedNodes: TreeNodeData[] = []\n    const halfCheckedKeys: TreeKey[] = []\n    if (tree?.value && props.showCheckbox) {\n      const { treeNodeMap } = tree.value\n      indeterminateKeys.value.forEach((key) => {\n        const node = treeNodeMap.get(key)\n        if (node) {\n          halfCheckedKeys.push(key)\n          halfCheckedNodes.push(node.data)\n        }\n      })\n    }\n    return {\n      halfCheckedNodes,\n      halfCheckedKeys,\n    }\n  }\n\n  function setCheckedKeys(keys: TreeKey[]) {\n    checkedKeys.value.clear()\n    indeterminateKeys.value.clear()\n    _setCheckedKeys(keys)\n  }\n\n  function setChecked(key: TreeKey, isChecked: boolean) {\n    if (tree?.value && props.showCheckbox) {\n      const node = tree.value.treeNodeMap.get(key)\n      if (node) {\n        toggleCheckbox(node, isChecked, false)\n      }\n    }\n  }\n\n  function _setCheckedKeys(keys: TreeKey[]) {\n    if (tree?.value) {\n      const { treeNodeMap } = tree.value\n      if (props.showCheckbox && treeNodeMap && keys) {\n        for (const key of keys) {\n          const node = treeNodeMap.get(key)\n          if (node && !isChecked(node)) {\n            toggleCheckbox(node, true, false)\n          }\n        }\n      }\n    }\n  }\n\n  return {\n    updateCheckedKeys,\n    toggleCheckbox,\n    isChecked,\n    isIndeterminate,\n    // expose\n    getCheckedKeys,\n    getCheckedNodes,\n    getHalfCheckedKeys,\n    getHalfCheckedNodes,\n    setChecked,\n    setCheckedKeys,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}