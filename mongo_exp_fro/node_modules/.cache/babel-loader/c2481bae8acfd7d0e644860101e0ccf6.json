{"ast":null,"code":"import { isString } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { useSizeProp } from '../../../hooks/use-common-props/index.mjs';\nimport { iconPropType } from '../../../utils/vue/icon.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nconst inputProps = buildProps({\n  id: {\n    type: String,\n    default: void 0\n  },\n  size: useSizeProp,\n  disabled: Boolean,\n  modelValue: {\n    type: definePropType([String, Number, Object]),\n    default: \"\"\n  },\n  type: {\n    type: String,\n    default: \"text\"\n  },\n  resize: {\n    type: String,\n    values: [\"none\", \"both\", \"horizontal\", \"vertical\"]\n  },\n  autosize: {\n    type: definePropType([Boolean, Object]),\n    default: false\n  },\n  autocomplete: {\n    type: String,\n    default: \"off\"\n  },\n  formatter: {\n    type: Function\n  },\n  parser: {\n    type: Function\n  },\n  placeholder: {\n    type: String\n  },\n  form: {\n    type: String,\n    default: \"\"\n  },\n  readonly: {\n    type: Boolean,\n    default: false\n  },\n  clearable: {\n    type: Boolean,\n    default: false\n  },\n  showPassword: {\n    type: Boolean,\n    default: false\n  },\n  showWordLimit: {\n    type: Boolean,\n    default: false\n  },\n  suffixIcon: {\n    type: iconPropType,\n    default: \"\"\n  },\n  prefixIcon: {\n    type: iconPropType,\n    default: \"\"\n  },\n  containerRole: {\n    type: String,\n    default: void 0\n  },\n  label: {\n    type: String,\n    default: void 0\n  },\n  tabindex: {\n    type: [String, Number],\n    default: 0\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true\n  },\n  inputStyle: {\n    type: definePropType([Object, Array, String]),\n    default: () => mutable({})\n  }\n});\nconst inputEmits = {\n  [UPDATE_MODEL_EVENT]: value => isString(value),\n  input: value => isString(value),\n  change: value => isString(value),\n  focus: evt => evt instanceof FocusEvent,\n  blur: evt => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: evt => evt instanceof MouseEvent,\n  mouseenter: evt => evt instanceof MouseEvent,\n  keydown: evt => evt instanceof Event,\n  compositionstart: evt => evt instanceof CompositionEvent,\n  compositionupdate: evt => evt instanceof CompositionEvent,\n  compositionend: evt => evt instanceof CompositionEvent\n};\nexport { inputEmits, inputProps };","map":{"version":3,"mappings":"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","names":["inputProps","buildProps","id","type","String","default","size","useSizeProp","disabled","Boolean","modelValue","definePropType","Number","Object","resize","values","autosize","autocomplete","formatter","Function","parser","placeholder","form","readonly","clearable","showPassword","showWordLimit","suffixIcon","iconPropType","prefixIcon","containerRole","label","tabindex","validateEvent","inputStyle","Array","mutable","inputEmits","UPDATE_MODEL_EVENT","value","isString","input","change","focus","evt","FocusEvent","blur","clear","mouseleave","MouseEvent","mouseenter","keydown","Event","compositionstart","CompositionEvent","compositionupdate","compositionend"],"sources":["../../../../../../packages/components/input/src/input.ts"],"sourcesContent":["import { isString } from '@vue/shared'\nimport {\n  buildProps,\n  definePropType,\n  iconPropType,\n  mutable,\n} from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useSizeProp } from '@element-plus/hooks'\nimport type Input from './input.vue'\nimport type { ExtractPropTypes, StyleValue } from 'vue'\n\nexport type InputAutoSize = { minRows?: number; maxRows?: number } | boolean\n\nexport const inputProps = buildProps({\n  id: {\n    type: String,\n    default: undefined,\n  },\n  size: useSizeProp,\n  disabled: Boolean,\n  modelValue: {\n    type: definePropType<string | number | null | undefined>([\n      String,\n      Number,\n      Object,\n    ]),\n    default: '',\n  },\n  type: {\n    type: String,\n    default: 'text',\n  },\n  resize: {\n    type: String,\n    values: ['none', 'both', 'horizontal', 'vertical'],\n  },\n  autosize: {\n    type: definePropType<InputAutoSize>([Boolean, Object]),\n    default: false,\n  },\n  autocomplete: {\n    type: String,\n    default: 'off',\n  },\n  formatter: {\n    type: Function,\n  },\n  parser: {\n    type: Function,\n  },\n  placeholder: {\n    type: String,\n  },\n  form: {\n    type: String,\n    default: '',\n  },\n  readonly: {\n    type: Boolean,\n    default: false,\n  },\n  clearable: {\n    type: Boolean,\n    default: false,\n  },\n  showPassword: {\n    type: Boolean,\n    default: false,\n  },\n  showWordLimit: {\n    type: Boolean,\n    default: false,\n  },\n  suffixIcon: {\n    type: iconPropType,\n    default: '',\n  },\n  prefixIcon: {\n    type: iconPropType,\n    default: '',\n  },\n  containerRole: {\n    type: String,\n    default: undefined,\n  },\n  label: {\n    type: String,\n    default: undefined,\n  },\n  tabindex: {\n    type: [String, Number],\n    default: 0,\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n  inputStyle: {\n    type: definePropType<StyleValue>([Object, Array, String]),\n    default: () => mutable({} as const),\n  },\n} as const)\nexport type InputProps = ExtractPropTypes<typeof inputProps>\n\nexport const inputEmits = {\n  [UPDATE_MODEL_EVENT]: (value: string) => isString(value),\n  input: (value: string) => isString(value),\n  change: (value: string) => isString(value),\n  focus: (evt: FocusEvent) => evt instanceof FocusEvent,\n  blur: (evt: FocusEvent) => evt instanceof FocusEvent,\n  clear: () => true,\n  mouseleave: (evt: MouseEvent) => evt instanceof MouseEvent,\n  mouseenter: (evt: MouseEvent) => evt instanceof MouseEvent,\n  // NOTE: when autofill by browser, the keydown event is instanceof Event, not KeyboardEvent\n  // relative bug report https://github.com/element-plus/element-plus/issues/6665\n  keydown: (evt: KeyboardEvent | Event) => evt instanceof Event,\n  compositionstart: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionupdate: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n  compositionend: (evt: CompositionEvent) => evt instanceof CompositionEvent,\n}\nexport type InputEmits = typeof inputEmits\n\nexport type InputInstance = InstanceType<typeof Input>\n"]},"metadata":{},"sourceType":"module"}