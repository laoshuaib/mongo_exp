{"ast":null,"code":"import { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, Fragment, renderList, toDisplayString, createCommentVNode, createElementVNode, renderSlot } from 'vue';\nimport dayjs from 'dayjs';\nimport localeData from 'dayjs/plugin/localeData.js';\nimport '../../../hooks/index.mjs';\nimport '../../time-picker/index.mjs';\nimport '../../../constants/index.mjs';\nimport { dateTableProps, dateTableEmits, getPrevMonthLastDays, getMonthDays, toNestedArr } from './date-table.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { rangeArr } from '../../time-picker/src/utils.mjs';\nimport { WEEK_DAYS } from '../../../constants/date.mjs';\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst __default__ = {\n  name: \"DateTable\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: dateTableProps,\n  emits: dateTableEmits,\n\n  setup(__props, {\n    expose,\n    emit\n  }) {\n    const props = __props;\n    dayjs.extend(localeData);\n    const {\n      t,\n      lang\n    } = useLocale();\n    const nsTable = useNamespace(\"calendar-table\");\n    const nsDay = useNamespace(\"calendar-day\");\n    const now = dayjs().locale(lang.value);\n    const firstDayOfWeek = now.$locale().weekStart || 0;\n    const isInRange = computed(() => !!props.range && !!props.range.length);\n    const rows = computed(() => {\n      let days = [];\n\n      if (isInRange.value) {\n        const [start, end] = props.range;\n        const currentMonthRange = rangeArr(end.date() - start.date() + 1).map(index => ({\n          text: start.date() + index,\n          type: \"current\"\n        }));\n        let remaining = currentMonthRange.length % 7;\n        remaining = remaining === 0 ? 0 : 7 - remaining;\n        const nextMonthRange = rangeArr(remaining).map((_, index) => ({\n          text: index + 1,\n          type: \"next\"\n        }));\n        days = currentMonthRange.concat(nextMonthRange);\n      } else {\n        const firstDay = props.date.startOf(\"month\").day();\n        const prevMonthDays = getPrevMonthLastDays(props.date, firstDay - firstDayOfWeek).map(day => ({\n          text: day,\n          type: \"prev\"\n        }));\n        const currentMonthDays = getMonthDays(props.date).map(day => ({\n          text: day,\n          type: \"current\"\n        }));\n        days = [...prevMonthDays, ...currentMonthDays];\n        const remaining = 7 - (days.length % 7 || 7);\n        const nextMonthDays = rangeArr(remaining).map((_, index) => ({\n          text: index + 1,\n          type: \"next\"\n        }));\n        days = days.concat(nextMonthDays);\n      }\n\n      return toNestedArr(days);\n    });\n    const weekDays = computed(() => {\n      const start = firstDayOfWeek;\n\n      if (start === 0) {\n        return WEEK_DAYS.map(_ => t(`el.datepicker.weeks.${_}`));\n      } else {\n        return WEEK_DAYS.slice(start).concat(WEEK_DAYS.slice(0, start)).map(_ => t(`el.datepicker.weeks.${_}`));\n      }\n    });\n\n    const getFormattedDate = (day, type) => {\n      switch (type) {\n        case \"prev\":\n          return props.date.startOf(\"month\").subtract(1, \"month\").date(day);\n\n        case \"next\":\n          return props.date.startOf(\"month\").add(1, \"month\").date(day);\n\n        case \"current\":\n          return props.date.date(day);\n      }\n    };\n\n    const getCellClass = ({\n      text,\n      type\n    }) => {\n      const classes = [type];\n\n      if (type === \"current\") {\n        const date = getFormattedDate(text, type);\n\n        if (date.isSame(props.selectedDay, \"day\")) {\n          classes.push(nsDay.is(\"selected\"));\n        }\n\n        if (date.isSame(now, \"day\")) {\n          classes.push(nsDay.is(\"today\"));\n        }\n      }\n\n      return classes;\n    };\n\n    const handlePickDay = ({\n      text,\n      type\n    }) => {\n      const date = getFormattedDate(text, type);\n      emit(\"pick\", date);\n    };\n\n    const getSlotData = ({\n      text,\n      type\n    }) => {\n      const day = getFormattedDate(text, type);\n      return {\n        isSelected: day.isSame(props.selectedDay),\n        type: `${type}-month`,\n        day: day.format(\"YYYY-MM-DD\"),\n        date: day.toDate()\n      };\n    };\n\n    expose({\n      getFormattedDate\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"table\", {\n        class: normalizeClass([unref(nsTable).b(), unref(nsTable).is(\"range\", unref(isInRange))]),\n        cellspacing: \"0\",\n        cellpadding: \"0\"\n      }, [!_ctx.hideHeader ? (openBlock(), createElementBlock(\"thead\", _hoisted_1, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(weekDays), day => {\n        return openBlock(), createElementBlock(\"th\", {\n          key: day\n        }, toDisplayString(day), 1);\n      }), 128))])) : createCommentVNode(\"v-if\", true), createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), (row, index) => {\n        return openBlock(), createElementBlock(\"tr\", {\n          key: index,\n          class: normalizeClass({\n            [unref(nsTable).e(\"row\")]: true,\n            [unref(nsTable).em(\"row\", \"hide-border\")]: index === 0 && _ctx.hideHeader\n          })\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, (cell, key) => {\n          return openBlock(), createElementBlock(\"td\", {\n            key,\n            class: normalizeClass(getCellClass(cell)),\n            onClick: $event => handlePickDay(cell)\n          }, [createElementVNode(\"div\", {\n            class: normalizeClass(unref(nsDay).b())\n          }, [renderSlot(_ctx.$slots, \"dateCell\", {\n            data: getSlotData(cell)\n          }, () => [createElementVNode(\"span\", null, toDisplayString(cell.text), 1)])], 2)], 10, _hoisted_2);\n        }), 128))], 2);\n      }), 128))])], 2);\n    };\n  }\n\n});\n\nvar DateTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/calendar/src/date-table.vue\"]]);\n\nexport { DateTable as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6DAA;IAEA;MAAAC;MAAAC;IAAA;IACA;IACA;IAEA;IAEA;IAEA;IAEA;MACA;;MACA;QACA;QACA,mCACAC,6BADA,EAEAC,GAFA,CAEAC;UACAC,0BADA;UAEAC;QAFA,EAFA;QAOA;QACAC;QACA,+CACA;UACAF,eADA;UAEAC;QAFA,EADA;QAMAE;MACA,CAlBA,MAkBA;QACA;QACA,2CACAC,UADA,EAEAC,yBAFA,EAGAP,GAHA,CAGAQ;UACAN,SADA;UAEAC;QAFA,EAHA;QAOA,sDACAK;UACAN,SADA;UAEAC;QAFA,EADA;QAMAE;QACA;QACA,8CACA;UACAH,eADA;UAEAC;QAFA,EADA;QAMAE;MACA;;MACA;IACA,CA9CA;IAgDA;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA,8BACAI,MADA,CACAC,yBADA,EAEAV,GAFA,CAEAW,kCAFA;MAGA;IACA,CATA;;IAWA;MACA;QACA;UACA;;QACA;UACA;;QACA;UACA;MANA;IAQA,CATA;;IAWA;MAAAT;MAAAC;IAAA;MACA;;MACA;QACA;;QACA;UACAS;QACA;;QACA;UACAA;QACA;MACA;;MACA;IACA,CAZA;;IAcA;MAAAV;MAAAC;IAAA;MACA;MACAU;IACA,CAHA;;IAKA;MAAAX;MAAAC;IAAA;MACA;MACA;QACAW,yCADA;QAEAX,qBAFA;QAGAK,6BAHA;QAIAO;MAJA;IAMA,CARA;;IAUAC;MAEAC;IAFA","names":["dayjs","t","lang","end","map","index","text","type","remaining","days","props","firstDay","day","concat","WEEK_DAYS","_","classes","emit","isSelected","date","expose","getFormattedDate"],"sources":["../../../../../../packages/components/calendar/src/date-table.vue"],"sourcesContent":["<template>\n  <table\n    :class=\"[nsTable.b(), nsTable.is('range', isInRange)]\"\n    cellspacing=\"0\"\n    cellpadding=\"0\"\n  >\n    <thead v-if=\"!hideHeader\">\n      <th v-for=\"day in weekDays\" :key=\"day\">{{ day }}</th>\n    </thead>\n\n    <tbody>\n      <tr\n        v-for=\"(row, index) in rows\"\n        :key=\"index\"\n        :class=\"{\n          [nsTable.e('row')]: true,\n          [nsTable.em('row', 'hide-border')]: index === 0 && hideHeader,\n        }\"\n      >\n        <td\n          v-for=\"(cell, key) in row\"\n          :key=\"key\"\n          :class=\"getCellClass(cell)\"\n          @click=\"handlePickDay(cell)\"\n        >\n          <div :class=\"nsDay.b()\">\n            <slot name=\"dateCell\" :data=\"getSlotData(cell)\">\n              <span>{{ cell.text }}</span>\n            </slot>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport dayjs from 'dayjs'\nimport localeData from 'dayjs/plugin/localeData.js'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { WEEK_DAYS } from '@element-plus/constants'\nimport {\n  dateTableEmits,\n  dateTableProps,\n  getMonthDays,\n  getPrevMonthLastDays,\n  toNestedArr,\n} from './date-table'\n\nimport type { CalendarDateCell, CalendarDateCellType } from './date-table'\nimport type { Dayjs } from 'dayjs'\n\ndefineOptions({\n  name: 'DateTable',\n})\n\nconst props = defineProps(dateTableProps)\nconst emit = defineEmits(dateTableEmits)\n\ndayjs.extend(localeData)\n\nconst { t, lang } = useLocale()\nconst nsTable = useNamespace('calendar-table')\nconst nsDay = useNamespace('calendar-day')\n\nconst now = dayjs().locale(lang.value)\n// todo better way to get Day.js locale object\nconst firstDayOfWeek: number = (now as any).$locale().weekStart || 0\n\nconst isInRange = computed(() => !!props.range && !!props.range.length)\n\nconst rows = computed(() => {\n  let days: CalendarDateCell[] = []\n  if (isInRange.value) {\n    const [start, end] = props.range!\n    const currentMonthRange: CalendarDateCell[] = rangeArr(\n      end.date() - start.date() + 1\n    ).map((index) => ({\n      text: start.date() + index,\n      type: 'current',\n    }))\n\n    let remaining = currentMonthRange.length % 7\n    remaining = remaining === 0 ? 0 : 7 - remaining\n    const nextMonthRange: CalendarDateCell[] = rangeArr(remaining).map(\n      (_, index) => ({\n        text: index + 1,\n        type: 'next',\n      })\n    )\n    days = currentMonthRange.concat(nextMonthRange)\n  } else {\n    const firstDay = props.date.startOf('month').day()\n    const prevMonthDays: CalendarDateCell[] = getPrevMonthLastDays(\n      props.date,\n      firstDay - firstDayOfWeek\n    ).map((day) => ({\n      text: day,\n      type: 'prev',\n    }))\n    const currentMonthDays: CalendarDateCell[] = getMonthDays(props.date).map(\n      (day) => ({\n        text: day,\n        type: 'current',\n      })\n    )\n    days = [...prevMonthDays, ...currentMonthDays]\n    const remaining = 7 - (days.length % 7 || 7)\n    const nextMonthDays: CalendarDateCell[] = rangeArr(remaining).map(\n      (_, index) => ({\n        text: index + 1,\n        type: 'next',\n      })\n    )\n    days = days.concat(nextMonthDays)\n  }\n  return toNestedArr(days)\n})\n\nconst weekDays = computed(() => {\n  const start = firstDayOfWeek\n  if (start === 0) {\n    return WEEK_DAYS.map((_) => t(`el.datepicker.weeks.${_}`))\n  } else {\n    return WEEK_DAYS.slice(start)\n      .concat(WEEK_DAYS.slice(0, start))\n      .map((_) => t(`el.datepicker.weeks.${_}`))\n  }\n})\n\nconst getFormattedDate = (day: number, type: CalendarDateCellType): Dayjs => {\n  switch (type) {\n    case 'prev':\n      return props.date.startOf('month').subtract(1, 'month').date(day)\n    case 'next':\n      return props.date.startOf('month').add(1, 'month').date(day)\n    case 'current':\n      return props.date.date(day)\n  }\n}\n\nconst getCellClass = ({ text, type }: CalendarDateCell) => {\n  const classes: string[] = [type]\n  if (type === 'current') {\n    const date = getFormattedDate(text, type)\n    if (date.isSame(props.selectedDay, 'day')) {\n      classes.push(nsDay.is('selected'))\n    }\n    if (date.isSame(now, 'day')) {\n      classes.push(nsDay.is('today'))\n    }\n  }\n  return classes\n}\n\nconst handlePickDay = ({ text, type }: CalendarDateCell) => {\n  const date = getFormattedDate(text, type)\n  emit('pick', date)\n}\n\nconst getSlotData = ({ text, type }: CalendarDateCell) => {\n  const day = getFormattedDate(text, type)\n  return {\n    isSelected: day.isSame(props.selectedDay),\n    type: `${type}-month`,\n    day: day.format('YYYY-MM-DD'),\n    date: day.toDate(),\n  }\n}\n\ndefineExpose({\n  /** @description toggle date panel */\n  getFormattedDate,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}