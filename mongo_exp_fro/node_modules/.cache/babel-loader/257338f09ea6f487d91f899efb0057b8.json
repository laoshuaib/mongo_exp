{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nconst FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex=\"-1\"]),input:not([disabled]),input:not([type=\"hidden\"]),select:not([disabled]),textarea:not([disabled])`;\n\nconst isVisible = element => {\n  if (process.env.NODE_ENV === \"test\") return true;\n  const computed = getComputedStyle(element);\n  return computed.position === \"fixed\" ? false : element.offsetParent !== null;\n};\n\nconst obtainAllFocusableElements = element => {\n  return Array.from(element.querySelectorAll(FOCUSABLE_ELEMENT_SELECTORS)).filter(item => isFocusable(item) && isVisible(item));\n};\n\nconst isFocusable = element => {\n  if (element.tabIndex > 0 || element.tabIndex === 0 && element.getAttribute(\"tabIndex\") !== null) {\n    return true;\n  }\n\n  if (element.disabled) {\n    return false;\n  }\n\n  switch (element.nodeName) {\n    case \"A\":\n      {\n        return !!element.href && element.rel !== \"ignore\";\n      }\n\n    case \"INPUT\":\n      {\n        return !(element.type === \"hidden\" || element.type === \"file\");\n      }\n\n    case \"BUTTON\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      {\n        return true;\n      }\n\n    default:\n      {\n        return false;\n      }\n  }\n};\n\nconst attemptFocus = element => {\n  var _a;\n\n  if (!isFocusable(element)) {\n    return false;\n  }\n\n  (_a = element.focus) == null ? void 0 : _a.call(element);\n  return document.activeElement === element;\n};\n\nconst triggerEvent = function (elm, name, ...opts) {\n  let eventName;\n\n  if (name.includes(\"mouse\") || name.includes(\"click\")) {\n    eventName = \"MouseEvents\";\n  } else if (name.includes(\"key\")) {\n    eventName = \"KeyboardEvent\";\n  } else {\n    eventName = \"HTMLEvents\";\n  }\n\n  const evt = document.createEvent(eventName);\n  evt.initEvent(name, ...opts);\n  elm.dispatchEvent(evt);\n  return elm;\n};\n\nconst isLeaf = el => !el.getAttribute(\"aria-owns\");\n\nconst getSibling = (el, distance, elClass) => {\n  const {\n    parentNode\n  } = el;\n  if (!parentNode) return null;\n  const siblings = parentNode.querySelectorAll(elClass);\n  const index = Array.prototype.indexOf.call(siblings, el);\n  return siblings[index + distance] || null;\n};\n\nconst focusNode = el => {\n  if (!el) return;\n  el.focus();\n  !isLeaf(el) && el.click();\n};\n\nexport { attemptFocus, focusNode, getSibling, isFocusable, isLeaf, isVisible, obtainAllFocusableElements, triggerEvent };","map":{"version":3,"mappings":"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","names":["FOCUSABLE_ELEMENT_SELECTORS","isVisible","element","process","env","NODE_ENV","computed","getComputedStyle","position","offsetParent","obtainAllFocusableElements","Array","from","querySelectorAll","filter","item","isFocusable","tabIndex","getAttribute","disabled","nodeName","href","rel","type","attemptFocus","_a","focus","call","document","activeElement","triggerEvent","elm","name","opts","eventName","includes","evt","createEvent","initEvent","dispatchEvent","isLeaf","el","getSibling","distance","elClass","parentNode","siblings","index","prototype","indexOf","focusNode","click"],"sources":["../../../../../packages/utils/dom/aria.ts"],"sourcesContent":["const FOCUSABLE_ELEMENT_SELECTORS = `a[href],button:not([disabled]),button:not([hidden]),:not([tabindex=\"-1\"]),input:not([disabled]),input:not([type=\"hidden\"]),select:not([disabled]),textarea:not([disabled])`\n\n/**\n * Determine if the testing element is visible on screen no matter if its on the viewport or not\n */\nexport const isVisible = (element: HTMLElement) => {\n  if (process.env.NODE_ENV === 'test') return true\n  const computed = getComputedStyle(element)\n  // element.offsetParent won't work on fix positioned\n  // WARNING: potential issue here, going to need some expert advices on this issue\n  return computed.position === 'fixed' ? false : element.offsetParent !== null\n}\n\nexport const obtainAllFocusableElements = (\n  element: HTMLElement\n): HTMLElement[] => {\n  return Array.from(\n    element.querySelectorAll<HTMLElement>(FOCUSABLE_ELEMENT_SELECTORS)\n  ).filter((item: HTMLElement) => isFocusable(item) && isVisible(item))\n}\n\n/**\n * @desc Determine if target element is focusable\n * @param element {HTMLElement}\n * @returns {Boolean} true if it is focusable\n */\nexport const isFocusable = (element: HTMLElement): boolean => {\n  if (\n    element.tabIndex > 0 ||\n    (element.tabIndex === 0 && element.getAttribute('tabIndex') !== null)\n  ) {\n    return true\n  }\n  // HTMLButtonElement has disabled\n  if ((element as HTMLButtonElement).disabled) {\n    return false\n  }\n\n  switch (element.nodeName) {\n    case 'A': {\n      // casting current element to Specific HTMLElement in order to be more type precise\n      return (\n        !!(element as HTMLAnchorElement).href &&\n        (element as HTMLAnchorElement).rel !== 'ignore'\n      )\n    }\n    case 'INPUT': {\n      return !(\n        (element as HTMLInputElement).type === 'hidden' ||\n        (element as HTMLInputElement).type === 'file'\n      )\n    }\n    case 'BUTTON':\n    case 'SELECT':\n    case 'TEXTAREA': {\n      return true\n    }\n    default: {\n      return false\n    }\n  }\n}\n\n/**\n * @desc Set Attempt to set focus on the current node.\n * @param element\n *          The node to attempt to focus on.\n * @returns\n *  true if element is focused.\n */\nexport const attemptFocus = (element: HTMLElement): boolean => {\n  if (!isFocusable(element)) {\n    return false\n  }\n  // Remove the old try catch block since there will be no error to be thrown\n  element.focus?.()\n  return document.activeElement === element\n}\n\n/**\n * Trigger an event\n * mouseenter, mouseleave, mouseover, keyup, change, click, etc.\n * @param  {HTMLElement} elm\n * @param  {String} name\n * @param  {*} opts\n */\nexport const triggerEvent = function (\n  elm: HTMLElement,\n  name: string,\n  ...opts: Array<boolean>\n): HTMLElement {\n  let eventName: string\n\n  if (name.includes('mouse') || name.includes('click')) {\n    eventName = 'MouseEvents'\n  } else if (name.includes('key')) {\n    eventName = 'KeyboardEvent'\n  } else {\n    eventName = 'HTMLEvents'\n  }\n  const evt = document.createEvent(eventName)\n\n  evt.initEvent(name, ...opts)\n  elm.dispatchEvent(evt)\n  return elm\n}\n\nexport const isLeaf = (el: HTMLElement) => !el.getAttribute('aria-owns')\n\nexport const getSibling = (\n  el: HTMLElement,\n  distance: number,\n  elClass: string\n) => {\n  const { parentNode } = el\n  if (!parentNode) return null\n  const siblings = parentNode.querySelectorAll(elClass)\n  const index = Array.prototype.indexOf.call(siblings, el)\n  return siblings[index + distance] || null\n}\n\nexport const focusNode = (el: HTMLElement) => {\n  if (!el) return\n  el.focus()\n  !isLeaf(el) && el.click()\n}\n"]},"metadata":{},"sourceType":"module"}