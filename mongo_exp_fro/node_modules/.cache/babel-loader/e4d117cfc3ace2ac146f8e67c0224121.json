{"ast":null,"code":"import '../../../../utils/index.mjs';\nimport createList from '../builders/build-list.mjs';\nimport { isHorizontal } from '../utils.mjs';\nimport { SMART_ALIGNMENT, AUTO_ALIGNMENT, CENTERED_ALIGNMENT, END_ALIGNMENT, START_ALIGNMENT, DEFAULT_DYNAMIC_LIST_ITEM_SIZE } from '../defaults.mjs';\nimport { throwError } from '../../../../utils/error.mjs';\nconst SCOPE = \"ElDynamicSizeList\";\n\nconst getItemFromCache = (props, index, listCache) => {\n  const {\n    itemSize\n  } = props;\n  const {\n    items,\n    lastVisitedIndex\n  } = listCache;\n\n  if (index > lastVisitedIndex) {\n    let offset = 0;\n\n    if (lastVisitedIndex >= 0) {\n      const item = items[lastVisitedIndex];\n      offset = item.offset + item.size;\n    }\n\n    for (let i = lastVisitedIndex + 1; i <= index; i++) {\n      const size = itemSize(i);\n      items[i] = {\n        offset,\n        size\n      };\n      offset += size;\n    }\n\n    listCache.lastVisitedIndex = index;\n  }\n\n  return items[index];\n};\n\nconst findItem = (props, listCache, offset) => {\n  const {\n    items,\n    lastVisitedIndex\n  } = listCache;\n  const lastVisitedOffset = lastVisitedIndex > 0 ? items[lastVisitedIndex].offset : 0;\n\n  if (lastVisitedOffset >= offset) {\n    return bs(props, listCache, 0, lastVisitedIndex, offset);\n  }\n\n  return es(props, listCache, Math.max(0, lastVisitedIndex), offset);\n};\n\nconst bs = (props, listCache, low, high, offset) => {\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2);\n    const currentOffset = getItemFromCache(props, mid, listCache).offset;\n\n    if (currentOffset === offset) {\n      return mid;\n    } else if (currentOffset < offset) {\n      low = mid + 1;\n    } else if (currentOffset > offset) {\n      high = mid - 1;\n    }\n  }\n\n  return Math.max(0, low - 1);\n};\n\nconst es = (props, listCache, index, offset) => {\n  const {\n    total\n  } = props;\n  let exponent = 1;\n\n  while (index < total && getItemFromCache(props, index, listCache).offset < offset) {\n    index += exponent;\n    exponent *= 2;\n  }\n\n  return bs(props, listCache, Math.floor(index / 2), Math.min(index, total - 1), offset);\n};\n\nconst getEstimatedTotalSize = ({\n  total\n}, {\n  items,\n  estimatedItemSize,\n  lastVisitedIndex\n}) => {\n  let totalSizeOfMeasuredItems = 0;\n\n  if (lastVisitedIndex >= total) {\n    lastVisitedIndex = total - 1;\n  }\n\n  if (lastVisitedIndex >= 0) {\n    const item = items[lastVisitedIndex];\n    totalSizeOfMeasuredItems = item.offset + item.size;\n  }\n\n  const numUnmeasuredItems = total - lastVisitedIndex - 1;\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize;\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems;\n};\n\nconst DynamicSizeList = createList({\n  name: \"ElDynamicSizeList\",\n  getItemOffset: (props, index, listCache) => getItemFromCache(props, index, listCache).offset,\n  getItemSize: (_, index, {\n    items\n  }) => items[index].size,\n  getEstimatedTotalSize,\n  getOffset: (props, index, alignment, scrollOffset, listCache) => {\n    const {\n      height,\n      layout,\n      width\n    } = props;\n    const size = isHorizontal(layout) ? width : height;\n    const item = getItemFromCache(props, index, listCache);\n    const estimatedTotalSize = getEstimatedTotalSize(props, listCache);\n    const maxOffset = Math.max(0, Math.min(estimatedTotalSize - size, item.offset));\n    const minOffset = Math.max(0, item.offset - size + item.size);\n\n    if (alignment === SMART_ALIGNMENT) {\n      if (scrollOffset >= minOffset - size && scrollOffset <= maxOffset + size) {\n        alignment = AUTO_ALIGNMENT;\n      } else {\n        alignment = CENTERED_ALIGNMENT;\n      }\n    }\n\n    switch (alignment) {\n      case START_ALIGNMENT:\n        {\n          return maxOffset;\n        }\n\n      case END_ALIGNMENT:\n        {\n          return minOffset;\n        }\n\n      case CENTERED_ALIGNMENT:\n        {\n          return Math.round(minOffset + (maxOffset - minOffset) / 2);\n        }\n\n      case AUTO_ALIGNMENT:\n      default:\n        {\n          if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n            return scrollOffset;\n          } else if (scrollOffset < minOffset) {\n            return minOffset;\n          } else {\n            return maxOffset;\n          }\n        }\n    }\n  },\n  getStartIndexForOffset: (props, offset, listCache) => findItem(props, listCache, offset),\n  getStopIndexForStartIndex: (props, startIndex, scrollOffset, listCache) => {\n    const {\n      height,\n      total,\n      layout,\n      width\n    } = props;\n    const size = isHorizontal(layout) ? width : height;\n    const item = getItemFromCache(props, startIndex, listCache);\n    const maxOffset = scrollOffset + size;\n    let offset = item.offset + item.size;\n    let stopIndex = startIndex;\n\n    while (stopIndex < total - 1 && offset < maxOffset) {\n      stopIndex++;\n      offset += getItemFromCache(props, stopIndex, listCache).size;\n    }\n\n    return stopIndex;\n  },\n\n  initCache({\n    estimatedItemSize = DEFAULT_DYNAMIC_LIST_ITEM_SIZE\n  }, instance) {\n    const cache = {\n      items: {},\n      estimatedItemSize,\n      lastVisitedIndex: -1\n    };\n\n    cache.clearCacheAfterIndex = (index, forceUpdate = true) => {\n      var _a, _b;\n\n      cache.lastVisitedIndex = Math.min(cache.lastVisitedIndex, index - 1);\n      (_a = instance.exposed) == null ? void 0 : _a.getItemStyleCache(-1);\n\n      if (forceUpdate) {\n        (_b = instance.proxy) == null ? void 0 : _b.$forceUpdate();\n      }\n    };\n\n    return cache;\n  },\n\n  clearCache: false,\n  validateProps: ({\n    itemSize\n  }) => {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof itemSize !== \"function\") {\n        throwError(SCOPE, `\n          itemSize is required as function, but the given value was ${typeof itemSize}\n        `);\n      }\n    }\n  }\n});\nexport { DynamicSizeList as default };","map":{"version":3,"mappings":"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","names":["SCOPE","getItemFromCache","props","index","listCache","itemSize","items","lastVisitedIndex","offset","item","size","i","findItem","lastVisitedOffset","bs","es","Math","max","low","high","mid","floor","currentOffset","total","exponent","min","getEstimatedTotalSize","estimatedItemSize","totalSizeOfMeasuredItems","numUnmeasuredItems","totalSizeOfUnmeasuredItems","DynamicSizeList","createList","name","getItemOffset","getItemSize","_","getOffset","alignment","scrollOffset","height","layout","width","isHorizontal","estimatedTotalSize","maxOffset","minOffset","SMART_ALIGNMENT","AUTO_ALIGNMENT","CENTERED_ALIGNMENT","START_ALIGNMENT","END_ALIGNMENT","round","getStartIndexForOffset","getStopIndexForStartIndex","startIndex","stopIndex","initCache","DEFAULT_DYNAMIC_LIST_ITEM_SIZE","instance","cache","clearCacheAfterIndex","forceUpdate","_a","_b","exposed","getItemStyleCache","proxy","$forceUpdate","clearCache","validateProps","process","env","NODE_ENV","throwError"],"sources":["../../../../../../../packages/components/virtual-list/src/components/dynamic-size-list.ts"],"sourcesContent":["import { throwError } from '@element-plus/utils'\n\nimport createList from '../builders/build-list'\n\nimport { isHorizontal } from '../utils'\nimport {\n  AUTO_ALIGNMENT,\n  CENTERED_ALIGNMENT,\n  DEFAULT_DYNAMIC_LIST_ITEM_SIZE,\n  END_ALIGNMENT,\n  SMART_ALIGNMENT,\n  START_ALIGNMENT,\n} from '../defaults'\nimport type { VirtualizedListProps } from '../props'\n\nimport type { ItemSize, ListCache, ListItem } from '../types'\n\ntype Props = VirtualizedListProps\n\nconst SCOPE = 'ElDynamicSizeList'\nconst getItemFromCache = (\n  props: Props,\n  index: number,\n  listCache: ListCache\n): ListItem => {\n  const { itemSize } = props\n  const { items, lastVisitedIndex } = listCache\n\n  if (index > lastVisitedIndex) {\n    let offset = 0\n    if (lastVisitedIndex >= 0) {\n      const item = items[lastVisitedIndex]\n      offset = item.offset + item.size\n    }\n\n    for (let i = lastVisitedIndex + 1; i <= index; i++) {\n      const size = (itemSize as ItemSize)(i)\n\n      items[i] = {\n        offset,\n        size,\n      }\n\n      offset += size\n    }\n\n    listCache.lastVisitedIndex = index\n  }\n\n  return items[index]\n}\n\nconst findItem = (props: Props, listCache: ListCache, offset: number) => {\n  const { items, lastVisitedIndex } = listCache\n\n  const lastVisitedOffset =\n    lastVisitedIndex > 0 ? items[lastVisitedIndex].offset : 0\n\n  if (lastVisitedOffset >= offset) {\n    return bs(props, listCache, 0, lastVisitedIndex, offset)\n  }\n  return es(props, listCache, Math.max(0, lastVisitedIndex), offset)\n}\n\n// bs stands for binary search which has approximately time complexity of O(Log n)\n// space complexity of O(1)\n// in this case we use it for search the offset of each item, since\n// the cached items' offset is monotonically increasing\nconst bs = (\n  props: Props,\n  listCache: ListCache,\n  low: number,\n  high: number,\n  offset: number\n) => {\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2)\n    const currentOffset = getItemFromCache(props, mid, listCache).offset\n\n    if (currentOffset === offset) {\n      return mid\n    } else if (currentOffset < offset) {\n      low = mid + 1\n    } else if (currentOffset > offset) {\n      high = mid - 1\n    }\n  }\n\n  return Math.max(0, low - 1)\n}\n\n// es stands for exponential search which has time complexity of O(Log n) and\n// space complexity of O(1) in the case of finding the boundary element.\n// the exponential indicator in this case is 2.\n// for more detail about exponential search click this link\n// https://www.freecodecamp.org/news/search-algorithms-exponential-search-explained/\n\nconst es = (\n  props: Props,\n  listCache: ListCache,\n  index: number,\n  offset: number\n) => {\n  const { total } = props\n  let exponent = 1\n\n  while (\n    index < total &&\n    getItemFromCache(props, index, listCache).offset < offset\n  ) {\n    index += exponent\n    exponent *= 2\n  }\n\n  return bs(\n    props,\n    listCache,\n    Math.floor(index / 2),\n    Math.min(index, total - 1),\n    offset\n  )\n}\n\nconst getEstimatedTotalSize = (\n  { total }: Props,\n  { items, estimatedItemSize, lastVisitedIndex }: ListCache\n) => {\n  let totalSizeOfMeasuredItems = 0\n\n  if (lastVisitedIndex >= total) {\n    lastVisitedIndex = total - 1\n  }\n\n  if (lastVisitedIndex >= 0) {\n    const item = items[lastVisitedIndex]\n    totalSizeOfMeasuredItems = item.offset + item.size\n  }\n\n  const numUnmeasuredItems = total - lastVisitedIndex - 1\n  const totalSizeOfUnmeasuredItems = numUnmeasuredItems * estimatedItemSize\n  return totalSizeOfMeasuredItems + totalSizeOfUnmeasuredItems\n}\n\nconst DynamicSizeList = createList({\n  name: 'ElDynamicSizeList',\n  getItemOffset: (props, index, listCache) =>\n    getItemFromCache(props, index, listCache).offset,\n\n  getItemSize: (_, index, { items }) => items[index].size,\n\n  getEstimatedTotalSize,\n\n  getOffset: (props, index, alignment, scrollOffset, listCache) => {\n    const { height, layout, width } = props\n\n    const size = (isHorizontal(layout) ? width : height) as number\n    const item = getItemFromCache(props, index, listCache)\n\n    const estimatedTotalSize = getEstimatedTotalSize(props, listCache)\n\n    const maxOffset = Math.max(\n      0,\n      Math.min(estimatedTotalSize - size, item.offset)\n    )\n    const minOffset = Math.max(0, item.offset - size + item.size)\n\n    if (alignment === SMART_ALIGNMENT) {\n      if (\n        scrollOffset >= minOffset - size &&\n        scrollOffset <= maxOffset + size\n      ) {\n        alignment = AUTO_ALIGNMENT\n      } else {\n        alignment = CENTERED_ALIGNMENT\n      }\n    }\n\n    switch (alignment) {\n      case START_ALIGNMENT: {\n        return maxOffset\n      }\n      case END_ALIGNMENT: {\n        return minOffset\n      }\n      case CENTERED_ALIGNMENT: {\n        return Math.round(minOffset + (maxOffset - minOffset) / 2)\n      }\n      case AUTO_ALIGNMENT:\n      default: {\n        if (scrollOffset >= minOffset && scrollOffset <= maxOffset) {\n          return scrollOffset\n        } else if (scrollOffset < minOffset) {\n          return minOffset\n        } else {\n          return maxOffset\n        }\n      }\n    }\n  },\n\n  getStartIndexForOffset: (props, offset, listCache) =>\n    findItem(props, listCache, offset),\n\n  getStopIndexForStartIndex: (props, startIndex, scrollOffset, listCache) => {\n    const { height, total, layout, width } = props\n\n    const size = (isHorizontal(layout) ? width : height) as number\n    const item = getItemFromCache(props, startIndex, listCache)\n    const maxOffset = scrollOffset + size\n\n    let offset = item.offset + item.size\n    let stopIndex = startIndex\n\n    while (stopIndex < total - 1 && offset < maxOffset) {\n      stopIndex++\n      offset += getItemFromCache(props, stopIndex, listCache).size\n    }\n\n    return stopIndex\n  },\n\n  initCache({ estimatedItemSize = DEFAULT_DYNAMIC_LIST_ITEM_SIZE }, instance) {\n    const cache = {\n      items: {},\n      estimatedItemSize,\n      lastVisitedIndex: -1,\n    } as ListCache\n\n    cache.clearCacheAfterIndex = (index: number, forceUpdate = true) => {\n      cache.lastVisitedIndex = Math.min(cache.lastVisitedIndex, index - 1)\n      instance.exposed?.getItemStyleCache(-1)\n\n      if (forceUpdate) {\n        instance.proxy?.$forceUpdate()\n      }\n    }\n\n    return cache\n  },\n\n  clearCache: false,\n\n  validateProps: ({ itemSize }) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof itemSize !== 'function') {\n        throwError(\n          SCOPE,\n          `\n          itemSize is required as function, but the given value was ${typeof itemSize}\n        `\n        )\n      }\n    }\n  },\n})\n\nexport default DynamicSizeList\n"]},"metadata":{},"sourceType":"module"}