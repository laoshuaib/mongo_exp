{"ast":null,"code":"import { isVNode, defineComponent, provide, unref, createVNode, mergeProps } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { useTable } from './use-table.mjs';\nimport { TableV2InjectionKey } from './tokens.mjs';\nimport { tableV2Props } from './table.mjs';\nimport MainTable from './renderers/main-table.mjs';\nimport LeftTable from './renderers/left-table.mjs';\nimport LeftTable$1 from './renderers/right-table.mjs';\nimport RowRenderer from './renderers/row.mjs';\nimport CellRenderer from './renderers/cell.mjs';\nimport HeaderRenderer from './renderers/header.mjs';\nimport HeaderCellRenderer from './renderers/header-cell.mjs';\nimport Footer from './renderers/footer.mjs';\nimport Footer$1 from './renderers/empty.mjs';\nimport Overlay from './renderers/overlay.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nfunction _isSlot(s) {\n  return typeof s === \"function\" || Object.prototype.toString.call(s) === \"[object Object]\" && !isVNode(s);\n}\n\nconst COMPONENT_NAME = \"ElTableV2\";\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const ns = useNamespace(\"table-v2\");\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      hoveringRowKey,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n      showEmpty,\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll\n    } = useTable(props);\n    expose({\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow\n    });\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      hoveringRowKey,\n      isScrolling\n    });\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width\n      } = props;\n\n      const _data = unref(data);\n\n      const mainTableProps = {\n        cache,\n        class: ns.e(\"main\"),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth),\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll\n      };\n      const leftColumnsWidth = unref(leftTableWidth);\n\n      const _fixedTableHeight = unref(fixedTableHeight);\n\n      const leftTableProps = {\n        cache,\n        class: ns.e(\"left\"),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll\n      };\n      const rightColumnsWidth = unref(rightTableWidth);\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize;\n      const rightTableProps = {\n        cache,\n        class: ns.e(\"right\"),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(ns.namespace)}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll\n      };\n\n      const _columnsStyles = unref(columnsStyles);\n\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        hoveringRowKey: unref(hoveringRowKey),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange\n      };\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns\n      };\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles\n      };\n      const tableHeaderCellProps = {\n        ns,\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted\n      };\n      const tableSlots = {\n        row: props2 => createVNode(RowRenderer, mergeProps(props2, tableRowProps), {\n          row: slots.row,\n          cell: props3 => slots.cell ? createVNode(CellRenderer, mergeProps(props3, tableCellProps, {\n            \"style\": _columnsStyles[props3.column.key]\n          }), {\n            default: () => [slots.cell]\n          }) : createVNode(CellRenderer, mergeProps(props3, tableCellProps, {\n            \"style\": _columnsStyles[props3.column.key]\n          }), null)\n        }),\n        header: props2 => createVNode(HeaderRenderer, mergeProps(props2, tableHeaderProps), {\n          header: slots.header,\n          cell: props3 => slots[\"header-cell\"] ? createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {\n            \"style\": _columnsStyles[props3.column.key]\n          }), {\n            default: () => [slots[\"header-cell\"]]\n          }) : createVNode(HeaderCellRenderer, mergeProps(props3, tableHeaderCellProps, {\n            \"style\": _columnsStyles[props3.column.key]\n          }), null)\n        })\n      };\n      const rootKls = [props.class, ns.b(), ns.e(\"root\"), {\n        [ns.is(\"dynamic\")]: unref(isDynamic)\n      }];\n      const footerProps = {\n        class: ns.e(\"footer\"),\n        style: unref(footerHeight)\n      };\n      return createVNode(\"div\", {\n        \"class\": rootKls,\n        \"style\": unref(rootStyle)\n      }, [createVNode(MainTable, mainTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), createVNode(LeftTable, leftTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), createVNode(LeftTable$1, rightTableProps, _isSlot(tableSlots) ? tableSlots : {\n        default: () => [tableSlots]\n      }), slots.footer && createVNode(Footer, footerProps, {\n        default: slots.footer\n      }), unref(showEmpty) && createVNode(Footer$1, {\n        \"class\": ns.e(\"empty\"),\n        \"style\": unref(emptyStyle)\n      }, {\n        default: slots.empty\n      }), slots.overlay && createVNode(Overlay, {\n        \"class\": ns.e(\"overlay\")\n      }, {\n        default: slots.overlay\n      })]);\n    };\n  }\n\n});\nexport { TableV2 as default };","map":{"version":3,"mappings":"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","names":["Empty","Overlay","Object","COMPONENT_NAME","TableV2","name","props","columnsStyles","expose","fixedColumnsOnRight","mainColumns","mainTableHeight","fixedColumnsOnLeft","fixedTableHeight","leftTableWidth","rightTableWidth","data","depthMap","expandedRowKeys","hasFixedColumns","hoveringRowKey","mainTableRef","leftTableRef","rightTableRef","isDynamic","isResetting","isScrolling","bodyWidth","emptyStyle","rootStyle","headerWidth","footerHeight","showEmpty","onColumnSorted","scrollTo","scrollToLeft","scrollToTop","scrollToRow","getRowHeight","useTable","onRowExpanded","onRowsRendered","onScroll","onVerticalScroll","ns","cache","cellProps","estimatedRowHeight","expandColumnKey","headerHeight","headerClass","headerProps","headerCellProps","sortBy","rowHeight","rowClass","rowEventHandlers","rowKey","rowProps","indentSize","iconSize","useIsScrolling","vScrollbarSize","width","mainTableProps","fixedData","sortState","scrollbarAlwaysOn","_fixedTableHeight","columns","class","height","scrollbarStartGap","scrollbarEndGap","rightColumnsWidth","rightColumnsWidthWithScrollbar","rightTableProps","_data","tableRowProps","tableCellProps","style","tableHeaderProps","unref","row","cell","default","onRowHeightChange","header","rootKls","_columnsStyles","tableHeaderCellProps","_createVNode","MainTable","_isSlot","slots","column"],"sources":["../../../../../../packages/components/table-v2/src/table-v2.tsx"],"sourcesContent":["// @ts-nocheck\nimport { defineComponent, provide, unref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useTable } from './use-table'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2Props } from './table'\n// renderers\nimport MainTable from './renderers/main-table'\nimport LeftTable from './renderers/left-table'\nimport RightTable from './renderers/right-table'\nimport Row from './renderers/row'\nimport Cell from './renderers/cell'\nimport Header from './renderers/header'\nimport HeaderCell from './renderers/header-cell'\nimport Footer from './renderers/footer'\nimport Empty from './renderers/empty'\nimport Overlay from './renderers/overlay'\n\nimport type { TableGridRowSlotParams } from './table-grid'\nimport type { ScrollStrategy } from './composables/use-scrollbar'\nimport type {\n  TableV2HeaderRendererParams,\n  TableV2HeaderRowCellRendererParams,\n  TableV2RowCellRenderParam,\n} from './components'\n\nconst COMPONENT_NAME = 'ElTableV2'\n\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n  setup(props, { slots, expose }) {\n    const ns = useNamespace('table-v2')\n\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      hoveringRowKey,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n\n      showEmpty,\n\n      // exposes\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll,\n    } = useTable(props)\n\n    expose({\n      /**\n       * @description scroll to a given position\n       * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n       */\n      scrollTo,\n      /**\n       * @description scroll to a given position horizontally\n       * @params scrollLeft {Number} where to scroll to.\n       */\n      scrollToLeft,\n      /**\n       * @description scroll to a given position vertically\n       * @params scrollTop { Number } where to scroll to.\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n    })\n\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      hoveringRowKey,\n      isScrolling,\n    })\n\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width,\n      } = props\n\n      const _data = unref(data)\n\n      const mainTableProps = {\n        cache,\n        class: ns.e('main'),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth),\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll,\n      }\n\n      const leftColumnsWidth = unref(leftTableWidth)\n      const _fixedTableHeight = unref(fixedTableHeight)\n\n      const leftTableProps = {\n        cache,\n        class: ns.e('left'),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n\n      const rightColumnsWidth = unref(rightTableWidth)\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize\n\n      const rightTableProps = {\n        cache,\n        class: ns.e('right'),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(\n          ns.namespace\n        )}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n      const _columnsStyles = unref(columnsStyles)\n\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        hoveringRowKey: unref(hoveringRowKey),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange,\n      }\n\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns,\n      }\n\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles,\n      }\n\n      const tableHeaderCellProps = {\n        ns,\n\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted,\n      }\n\n      const tableSlots = {\n        row: (props: TableGridRowSlotParams) => (\n          <Row {...props} {...tableRowProps}>\n            {{\n              row: slots.row,\n              cell: (props: TableV2RowCellRenderParam) =>\n                slots.cell ? (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots.cell}\n                  </Cell>\n                ) : (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Row>\n        ),\n        header: (props: TableV2HeaderRendererParams) => (\n          <Header {...props} {...tableHeaderProps}>\n            {{\n              header: slots.header,\n              cell: (props: TableV2HeaderRowCellRendererParams) =>\n                slots['header-cell'] ? (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots['header-cell']}\n                  </HeaderCell>\n                ) : (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Header>\n        ),\n      }\n\n      const rootKls = [\n        props.class,\n        ns.b(),\n        ns.e('root'),\n        {\n          [ns.is('dynamic')]: unref(isDynamic),\n        },\n      ]\n\n      const footerProps = {\n        class: ns.e('footer'),\n        style: unref(footerHeight),\n      }\n\n      return (\n        <div class={rootKls} style={unref(rootStyle)}>\n          <MainTable {...mainTableProps}>{tableSlots}</MainTable>\n          <LeftTable {...leftTableProps}>{tableSlots}</LeftTable>\n          <RightTable {...rightTableProps}>{tableSlots}</RightTable>\n          {slots.footer && (\n            <Footer {...footerProps}>{{ default: slots.footer }}</Footer>\n          )}\n          {unref(showEmpty) && (\n            <Empty class={ns.e('empty')} style={unref(emptyStyle)}>\n              {{ default: slots.empty }}\n            </Empty>\n          )}\n          {slots.overlay && (\n            <Overlay class={ns.e('overlay')}>\n              {{ default: slots.overlay }}\n            </Overlay>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2\n\nexport type TableV2Instance = InstanceType<typeof TableV2> & {\n  /**\n   * @description scroll to a given position\n   * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n   */\n  scrollTo: (param: { scrollLeft?: number; scrollTop?: number }) => void\n  /**\n   * @description scroll to a given position horizontally\n   * @params scrollLeft {Number} where to scroll to.\n   */\n  scrollToLeft: (scrollLeft: number) => void\n  /**\n   * @description scroll to a given position vertically\n   * @params scrollTop { Number } where to scroll to.\n   */\n  scrollToTop: (scrollTop: number) => void\n  /**\n   * @description scroll to a given row\n   * @params row {Number} which row to scroll to\n   * @params strategy {ScrollStrategy} use what strategy to scroll to\n   */\n  scrollToRow(row: number, strategy?: ScrollStrategy): void\n}\n"]},"metadata":{},"sourceType":"module"}