{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { ref, isRef, nextTick } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport { parseHeight } from './util.mjs';\nimport { hasOwn } from '@vue/shared';\n\nclass TableLayout {\n  constructor(options) {\n    this.observers = [];\n    this.table = null;\n    this.store = null;\n    this.columns = [];\n    this.fit = true;\n    this.showHeader = true;\n    this.height = ref(null);\n    this.scrollX = ref(false);\n    this.scrollY = ref(false);\n    this.bodyWidth = ref(null);\n    this.fixedWidth = ref(null);\n    this.rightFixedWidth = ref(null);\n    this.gutterWidth = 0;\n\n    for (const name in options) {\n      if (hasOwn(options, name)) {\n        if (isRef(this[name])) {\n          this[name].value = options[name];\n        } else {\n          this[name] = options[name];\n        }\n      }\n    }\n\n    if (!this.table) {\n      throw new Error(\"Table is required for Table Layout\");\n    }\n\n    if (!this.store) {\n      throw new Error(\"Store is required for Table Layout\");\n    }\n  }\n\n  updateScrollY() {\n    const height = this.height.value;\n    if (height === null) return false;\n    const scrollBarRef = this.table.refs.scrollBarRef;\n\n    if (this.table.vnode.el && scrollBarRef) {\n      let scrollY = true;\n      const prevScrollY = this.scrollY.value;\n      scrollY = scrollBarRef.wrap$.scrollHeight > scrollBarRef.wrap$.clientHeight;\n      this.scrollY.value = scrollY;\n      return prevScrollY !== scrollY;\n    }\n\n    return false;\n  }\n\n  setHeight(value, prop = \"height\") {\n    if (!isClient) return;\n    const el = this.table.vnode.el;\n    value = parseHeight(value);\n    this.height.value = Number(value);\n    if (!el && (value || value === 0)) return nextTick(() => this.setHeight(value, prop));\n\n    if (typeof value === \"number\") {\n      el.style[prop] = `${value}px`;\n      this.updateElsHeight();\n    } else if (typeof value === \"string\") {\n      el.style[prop] = value;\n      this.updateElsHeight();\n    }\n  }\n\n  setMaxHeight(value) {\n    this.setHeight(value, \"max-height\");\n  }\n\n  getFlattenColumns() {\n    const flattenColumns = [];\n    const columns = this.table.store.states.columns.value;\n    columns.forEach(column => {\n      if (column.isColumnGroup) {\n        flattenColumns.push.apply(flattenColumns, column.columns);\n      } else {\n        flattenColumns.push(column);\n      }\n    });\n    return flattenColumns;\n  }\n\n  updateElsHeight() {\n    this.updateScrollY();\n    this.notifyObservers(\"scrollable\");\n  }\n\n  headerDisplayNone(elm) {\n    if (!elm) return true;\n    let headerChild = elm;\n\n    while (headerChild.tagName !== \"DIV\") {\n      if (getComputedStyle(headerChild).display === \"none\") {\n        return true;\n      }\n\n      headerChild = headerChild.parentElement;\n    }\n\n    return false;\n  }\n\n  updateColumnsWidth() {\n    if (!isClient) return;\n    const fit = this.fit;\n    const bodyWidth = this.table.vnode.el.clientWidth;\n    let bodyMinWidth = 0;\n    const flattenColumns = this.getFlattenColumns();\n    const flexColumns = flattenColumns.filter(column => typeof column.width !== \"number\");\n    flattenColumns.forEach(column => {\n      if (typeof column.width === \"number\" && column.realWidth) column.realWidth = null;\n    });\n\n    if (flexColumns.length > 0 && fit) {\n      flattenColumns.forEach(column => {\n        bodyMinWidth += Number(column.width || column.minWidth || 80);\n      });\n\n      if (bodyMinWidth <= bodyWidth) {\n        this.scrollX.value = false;\n        const totalFlexWidth = bodyWidth - bodyMinWidth;\n\n        if (flexColumns.length === 1) {\n          flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth;\n        } else {\n          const allColumnsWidth = flexColumns.reduce((prev, column) => prev + Number(column.minWidth || 80), 0);\n          const flexWidthPerPixel = totalFlexWidth / allColumnsWidth;\n          let noneFirstWidth = 0;\n          flexColumns.forEach((column, index) => {\n            if (index === 0) return;\n            const flexWidth = Math.floor(Number(column.minWidth || 80) * flexWidthPerPixel);\n            noneFirstWidth += flexWidth;\n            column.realWidth = Number(column.minWidth || 80) + flexWidth;\n          });\n          flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;\n        }\n      } else {\n        this.scrollX.value = true;\n        flexColumns.forEach(column => {\n          column.realWidth = Number(column.minWidth);\n        });\n      }\n\n      this.bodyWidth.value = Math.max(bodyMinWidth, bodyWidth);\n      this.table.state.resizeState.value.width = this.bodyWidth.value;\n    } else {\n      flattenColumns.forEach(column => {\n        if (!column.width && !column.minWidth) {\n          column.realWidth = 80;\n        } else {\n          column.realWidth = Number(column.width || column.minWidth);\n        }\n\n        bodyMinWidth += column.realWidth;\n      });\n      this.scrollX.value = bodyMinWidth > bodyWidth;\n      this.bodyWidth.value = bodyMinWidth;\n    }\n\n    const fixedColumns = this.store.states.fixedColumns.value;\n\n    if (fixedColumns.length > 0) {\n      let fixedWidth = 0;\n      fixedColumns.forEach(column => {\n        fixedWidth += Number(column.realWidth || column.width);\n      });\n      this.fixedWidth.value = fixedWidth;\n    }\n\n    const rightFixedColumns = this.store.states.rightFixedColumns.value;\n\n    if (rightFixedColumns.length > 0) {\n      let rightFixedWidth = 0;\n      rightFixedColumns.forEach(column => {\n        rightFixedWidth += Number(column.realWidth || column.width);\n      });\n      this.rightFixedWidth.value = rightFixedWidth;\n    }\n\n    this.notifyObservers(\"columns\");\n  }\n\n  addObserver(observer) {\n    this.observers.push(observer);\n  }\n\n  removeObserver(observer) {\n    const index = this.observers.indexOf(observer);\n\n    if (index !== -1) {\n      this.observers.splice(index, 1);\n    }\n  }\n\n  notifyObservers(event) {\n    const observers = this.observers;\n    observers.forEach(observer => {\n      var _a, _b;\n\n      switch (event) {\n        case \"columns\":\n          (_a = observer.state) == null ? void 0 : _a.onColumnsChange(this);\n          break;\n\n        case \"scrollable\":\n          (_b = observer.state) == null ? void 0 : _b.onScrollableChange(this);\n          break;\n\n        default:\n          throw new Error(`Table Layout don't have event ${event}.`);\n      }\n    });\n  }\n\n}\n\nexport { TableLayout as default };","map":{"version":3,"mappings":";;;;;;;AAIA,MAAMA,WAAN,CAAkB;EAChBC,WAAW,CAACC,OAAD,EAAU;IACnB,KAAKC,SAAL,GAAiB,EAAjB;IACA,KAAKC,KAAL,GAAa,IAAb;IACA,KAAKC,KAAL,GAAa,IAAb;IACA,KAAKC,OAAL,GAAe,EAAf;IACA,KAAKC,GAAL,GAAW,IAAX;IACA,KAAKC,UAAL,GAAkB,IAAlB;IACA,KAAKC,MAAL,GAAcC,GAAG,CAAC,IAAD,CAAjB;IACA,KAAKC,OAAL,GAAeD,GAAG,CAAC,KAAD,CAAlB;IACA,KAAKE,OAAL,GAAeF,GAAG,CAAC,KAAD,CAAlB;IACA,KAAKG,SAAL,GAAiBH,GAAG,CAAC,IAAD,CAApB;IACA,KAAKI,UAAL,GAAkBJ,GAAG,CAAC,IAAD,CAArB;IACA,KAAKK,eAAL,GAAuBL,GAAG,CAAC,IAAD,CAA1B;IACA,KAAKM,WAAL,GAAmB,CAAnB;;IACA,KAAK,MAAMC,IAAX,IAAmBf,OAAnB,EAA4B;MAC1B,IAAIgB,MAAM,CAAChB,OAAD,EAAUe,IAAV,CAAV,EAA2B;QACzB,IAAIE,KAAK,CAAC,KAAKF,IAAL,CAAD,CAAT,EAAuB;UACrB,KAAKA,IAAL,EAAWG,KAAX,GAAmBlB,OAAO,CAACe,IAAD,CAA1B;QACD,CAFD,MAEO;UACL,KAAKA,IAAL,IAAaf,OAAO,CAACe,IAAD,CAApB;QACD;MACF;IACF;;IACD,IAAI,CAAC,KAAKb,KAAV,EAAiB;MACf,MAAM,IAAIiB,KAAJ,CAAU,oCAAV,CAAN;IACD;;IACD,IAAI,CAAC,KAAKhB,KAAV,EAAiB;MACf,MAAM,IAAIgB,KAAJ,CAAU,oCAAV,CAAN;IACD;EACF;;EACDC,aAAa,GAAG;IACd,MAAMb,MAAM,GAAG,KAAKA,MAAL,CAAYW,KAA3B;IACA,IAAIX,MAAM,KAAK,IAAf,EACE,OAAO,KAAP;IACF,MAAMc,YAAY,GAAG,KAAKnB,KAAL,CAAWoB,IAAX,CAAgBD,YAArC;;IACA,IAAI,KAAKnB,KAAL,CAAWqB,KAAX,CAAiBC,EAAjB,IAAuBH,YAA3B,EAAyC;MACvC,IAAIX,OAAO,GAAG,IAAd;MACA,MAAMe,WAAW,GAAG,KAAKf,OAAL,CAAaQ,KAAjC;MACAR,OAAO,GAAGW,YAAY,CAACK,KAAb,CAAmBC,YAAnB,GAAkCN,YAAY,CAACK,KAAb,CAAmBE,YAA/D;MACA,KAAKlB,OAAL,CAAaQ,KAAb,GAAqBR,OAArB;MACA,OAAOe,WAAW,KAAKf,OAAvB;IACD;;IACD,OAAO,KAAP;EACD;;EACDmB,SAAS,CAACX,KAAD,EAAQY,IAAI,GAAG,QAAf,EAAyB;IAChC,IAAI,CAACC,QAAL,EACE;IACF,MAAMP,EAAE,GAAG,KAAKtB,KAAL,CAAWqB,KAAX,CAAiBC,EAA5B;IACAN,KAAK,GAAGc,WAAW,CAACd,KAAD,CAAnB;IACA,KAAKX,MAAL,CAAYW,KAAZ,GAAoBe,MAAM,CAACf,KAAD,CAA1B;IACA,IAAI,CAACM,EAAD,KAAQN,KAAK,IAAIA,KAAK,KAAK,CAA3B,CAAJ,EACE,OAAOgB,QAAQ,CAAC,MAAM,KAAKL,SAAL,CAAeX,KAAf,EAAsBY,IAAtB,CAAP,CAAf;;IACF,IAAI,OAAOZ,KAAP,KAAiB,QAArB,EAA+B;MAC7BM,EAAE,CAACW,KAAH,CAASL,IAAT,IAAkB,GAAEZ,KAAM,IAA1B;MACA,KAAKkB,eAAL;IACD,CAHD,MAGO,IAAI,OAAOlB,KAAP,KAAiB,QAArB,EAA+B;MACpCM,EAAE,CAACW,KAAH,CAASL,IAAT,IAAiBZ,KAAjB;MACA,KAAKkB,eAAL;IACD;EACF;;EACDC,YAAY,CAACnB,KAAD,EAAQ;IAClB,KAAKW,SAAL,CAAeX,KAAf,EAAsB,YAAtB;EACD;;EACDoB,iBAAiB,GAAG;IAClB,MAAMC,cAAc,GAAG,EAAvB;IACA,MAAMnC,OAAO,GAAG,KAAKF,KAAL,CAAWC,KAAX,CAAiBqC,MAAjB,CAAwBpC,OAAxB,CAAgCc,KAAhD;IACAd,OAAO,CAACqC,OAAR,CAAiBC,MAAD,IAAY;MAC1B,IAAIA,MAAM,CAACC,aAAX,EAA0B;QACxBJ,cAAc,CAACK,IAAf,CAAoBC,KAApB,CAA0BN,cAA1B,EAA0CG,MAAM,CAACtC,OAAjD;MACD,CAFD,MAEO;QACLmC,cAAc,CAACK,IAAf,CAAoBF,MAApB;MACD;IACF,CAND;IAOA,OAAOH,cAAP;EACD;;EACDH,eAAe,GAAG;IAChB,KAAKhB,aAAL;IACA,KAAK0B,eAAL,CAAqB,YAArB;EACD;;EACDC,iBAAiB,CAACC,GAAD,EAAM;IACrB,IAAI,CAACA,GAAL,EACE,OAAO,IAAP;IACF,IAAIC,WAAW,GAAGD,GAAlB;;IACA,OAAOC,WAAW,CAACC,OAAZ,KAAwB,KAA/B,EAAsC;MACpC,IAAIC,gBAAgB,CAACF,WAAD,CAAhB,CAA8BG,OAA9B,KAA0C,MAA9C,EAAsD;QACpD,OAAO,IAAP;MACD;;MACDH,WAAW,GAAGA,WAAW,CAACI,aAA1B;IACD;;IACD,OAAO,KAAP;EACD;;EACDC,kBAAkB,GAAG;IACnB,IAAI,CAACvB,QAAL,EACE;IACF,MAAM1B,GAAG,GAAG,KAAKA,GAAjB;IACA,MAAMM,SAAS,GAAG,KAAKT,KAAL,CAAWqB,KAAX,CAAiBC,EAAjB,CAAoB+B,WAAtC;IACA,IAAIC,YAAY,GAAG,CAAnB;IACA,MAAMjB,cAAc,GAAG,KAAKD,iBAAL,EAAvB;IACA,MAAMmB,WAAW,GAAGlB,cAAc,CAACmB,MAAf,CAAuBhB,MAAD,IAAY,OAAOA,MAAM,CAACiB,KAAd,KAAwB,QAA1D,CAApB;IACApB,cAAc,CAACE,OAAf,CAAwBC,MAAD,IAAY;MACjC,IAAI,OAAOA,MAAM,CAACiB,KAAd,KAAwB,QAAxB,IAAoCjB,MAAM,CAACkB,SAA/C,EACElB,MAAM,CAACkB,SAAP,GAAmB,IAAnB;IACH,CAHD;;IAIA,IAAIH,WAAW,CAACI,MAAZ,GAAqB,CAArB,IAA0BxD,GAA9B,EAAmC;MACjCkC,cAAc,CAACE,OAAf,CAAwBC,MAAD,IAAY;QACjCc,YAAY,IAAIvB,MAAM,CAACS,MAAM,CAACiB,KAAP,IAAgBjB,MAAM,CAACoB,QAAvB,IAAmC,EAApC,CAAtB;MACD,CAFD;;MAGA,IAAIN,YAAY,IAAI7C,SAApB,EAA+B;QAC7B,KAAKF,OAAL,CAAaS,KAAb,GAAqB,KAArB;QACA,MAAM6C,cAAc,GAAGpD,SAAS,GAAG6C,YAAnC;;QACA,IAAIC,WAAW,CAACI,MAAZ,KAAuB,CAA3B,EAA8B;UAC5BJ,WAAW,CAAC,CAAD,CAAX,CAAeG,SAAf,GAA2B3B,MAAM,CAACwB,WAAW,CAAC,CAAD,CAAX,CAAeK,QAAf,IAA2B,EAA5B,CAAN,GAAwCC,cAAnE;QACD,CAFD,MAEO;UACL,MAAMC,eAAe,GAAGP,WAAW,CAACQ,MAAZ,CAAmB,CAACC,IAAD,EAAOxB,MAAP,KAAkBwB,IAAI,GAAGjC,MAAM,CAACS,MAAM,CAACoB,QAAP,IAAmB,EAApB,CAAlD,EAA2E,CAA3E,CAAxB;UACA,MAAMK,iBAAiB,GAAGJ,cAAc,GAAGC,eAA3C;UACA,IAAII,cAAc,GAAG,CAArB;UACAX,WAAW,CAAChB,OAAZ,CAAoB,CAACC,MAAD,EAAS2B,KAAT,KAAmB;YACrC,IAAIA,KAAK,KAAK,CAAd,EACE;YACF,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWvC,MAAM,CAACS,MAAM,CAACoB,QAAP,IAAmB,EAApB,CAAN,GAAgCK,iBAA3C,CAAlB;YACAC,cAAc,IAAIE,SAAlB;YACA5B,MAAM,CAACkB,SAAP,GAAmB3B,MAAM,CAACS,MAAM,CAACoB,QAAP,IAAmB,EAApB,CAAN,GAAgCQ,SAAnD;UACD,CAND;UAOAb,WAAW,CAAC,CAAD,CAAX,CAAeG,SAAf,GAA2B3B,MAAM,CAACwB,WAAW,CAAC,CAAD,CAAX,CAAeK,QAAf,IAA2B,EAA5B,CAAN,GAAwCC,cAAxC,GAAyDK,cAApF;QACD;MACF,CAlBD,MAkBO;QACL,KAAK3D,OAAL,CAAaS,KAAb,GAAqB,IAArB;QACAuC,WAAW,CAAChB,OAAZ,CAAqBC,MAAD,IAAY;UAC9BA,MAAM,CAACkB,SAAP,GAAmB3B,MAAM,CAACS,MAAM,CAACoB,QAAR,CAAzB;QACD,CAFD;MAGD;;MACD,KAAKnD,SAAL,CAAeO,KAAf,GAAuBqD,IAAI,CAACE,GAAL,CAASjB,YAAT,EAAuB7C,SAAvB,CAAvB;MACA,KAAKT,KAAL,CAAWwE,KAAX,CAAiBC,WAAjB,CAA6BzD,KAA7B,CAAmCyC,KAAnC,GAA2C,KAAKhD,SAAL,CAAeO,KAA1D;IACD,CA9BD,MA8BO;MACLqB,cAAc,CAACE,OAAf,CAAwBC,MAAD,IAAY;QACjC,IAAI,CAACA,MAAM,CAACiB,KAAR,IAAiB,CAACjB,MAAM,CAACoB,QAA7B,EAAuC;UACrCpB,MAAM,CAACkB,SAAP,GAAmB,EAAnB;QACD,CAFD,MAEO;UACLlB,MAAM,CAACkB,SAAP,GAAmB3B,MAAM,CAACS,MAAM,CAACiB,KAAP,IAAgBjB,MAAM,CAACoB,QAAxB,CAAzB;QACD;;QACDN,YAAY,IAAId,MAAM,CAACkB,SAAvB;MACD,CAPD;MAQA,KAAKnD,OAAL,CAAaS,KAAb,GAAqBsC,YAAY,GAAG7C,SAApC;MACA,KAAKA,SAAL,CAAeO,KAAf,GAAuBsC,YAAvB;IACD;;IACD,MAAMoB,YAAY,GAAG,KAAKzE,KAAL,CAAWqC,MAAX,CAAkBoC,YAAlB,CAA+B1D,KAApD;;IACA,IAAI0D,YAAY,CAACf,MAAb,GAAsB,CAA1B,EAA6B;MAC3B,IAAIjD,UAAU,GAAG,CAAjB;MACAgE,YAAY,CAACnC,OAAb,CAAsBC,MAAD,IAAY;QAC/B9B,UAAU,IAAIqB,MAAM,CAACS,MAAM,CAACkB,SAAP,IAAoBlB,MAAM,CAACiB,KAA5B,CAApB;MACD,CAFD;MAGA,KAAK/C,UAAL,CAAgBM,KAAhB,GAAwBN,UAAxB;IACD;;IACD,MAAMiE,iBAAiB,GAAG,KAAK1E,KAAL,CAAWqC,MAAX,CAAkBqC,iBAAlB,CAAoC3D,KAA9D;;IACA,IAAI2D,iBAAiB,CAAChB,MAAlB,GAA2B,CAA/B,EAAkC;MAChC,IAAIhD,eAAe,GAAG,CAAtB;MACAgE,iBAAiB,CAACpC,OAAlB,CAA2BC,MAAD,IAAY;QACpC7B,eAAe,IAAIoB,MAAM,CAACS,MAAM,CAACkB,SAAP,IAAoBlB,MAAM,CAACiB,KAA5B,CAAzB;MACD,CAFD;MAGA,KAAK9C,eAAL,CAAqBK,KAArB,GAA6BL,eAA7B;IACD;;IACD,KAAKiC,eAAL,CAAqB,SAArB;EACD;;EACDgC,WAAW,CAACC,QAAD,EAAW;IACpB,KAAK9E,SAAL,CAAe2C,IAAf,CAAoBmC,QAApB;EACD;;EACDC,cAAc,CAACD,QAAD,EAAW;IACvB,MAAMV,KAAK,GAAG,KAAKpE,SAAL,CAAegF,OAAf,CAAuBF,QAAvB,CAAd;;IACA,IAAIV,KAAK,KAAK,CAAC,CAAf,EAAkB;MAChB,KAAKpE,SAAL,CAAeiF,MAAf,CAAsBb,KAAtB,EAA6B,CAA7B;IACD;EACF;;EACDvB,eAAe,CAACqC,KAAD,EAAQ;IACrB,MAAMlF,SAAS,GAAG,KAAKA,SAAvB;IACAA,SAAS,CAACwC,OAAV,CAAmBsC,QAAD,IAAc;MAC9B,IAAIK,EAAJ,EAAQC,EAAR;;MACA,QAAQF,KAAR;QACE,KAAK,SAAL;UACE,CAACC,EAAE,GAAGL,QAAQ,CAACL,KAAf,KAAyB,IAAzB,GAAgC,KAAK,CAArC,GAAyCU,EAAE,CAACE,eAAH,CAAmB,IAAnB,CAAzC;UACA;;QACF,KAAK,YAAL;UACE,CAACD,EAAE,GAAGN,QAAQ,CAACL,KAAf,KAAyB,IAAzB,GAAgC,KAAK,CAArC,GAAyCW,EAAE,CAACE,kBAAH,CAAsB,IAAtB,CAAzC;UACA;;QACF;UACE,MAAM,IAAIpE,KAAJ,CAAW,iCAAgCgE,KAAM,GAAjD,CAAN;MARJ;IAUD,CAZD;EAaD;;AA5Le","names":["TableLayout","constructor","options","observers","table","store","columns","fit","showHeader","height","ref","scrollX","scrollY","bodyWidth","fixedWidth","rightFixedWidth","gutterWidth","name","hasOwn","isRef","value","Error","updateScrollY","scrollBarRef","refs","vnode","el","prevScrollY","wrap$","scrollHeight","clientHeight","setHeight","prop","isClient","parseHeight","Number","nextTick","style","updateElsHeight","setMaxHeight","getFlattenColumns","flattenColumns","states","forEach","column","isColumnGroup","push","apply","notifyObservers","headerDisplayNone","elm","headerChild","tagName","getComputedStyle","display","parentElement","updateColumnsWidth","clientWidth","bodyMinWidth","flexColumns","filter","width","realWidth","length","minWidth","totalFlexWidth","allColumnsWidth","reduce","prev","flexWidthPerPixel","noneFirstWidth","index","flexWidth","Math","floor","max","state","resizeState","fixedColumns","rightFixedColumns","addObserver","observer","removeObserver","indexOf","splice","event","_a","_b","onColumnsChange","onScrollableChange"],"sources":["../../../../../../packages/components/table/src/table-layout.ts"],"sourcesContent":["// @ts-nocheck\nimport { isRef, nextTick, ref } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { hasOwn } from '@element-plus/utils'\nimport { parseHeight } from './util'\nimport type { Ref } from 'vue'\n\nimport type { TableColumnCtx } from './table-column/defaults'\nimport type { TableHeader } from './table-header'\nimport type { Table } from './table/defaults'\nimport type { Store } from './store'\nclass TableLayout<T> {\n  observers: TableHeader[]\n  table: Table<T>\n  store: Store<T>\n  columns: TableColumnCtx<T>[]\n  fit: boolean\n  showHeader: boolean\n\n  height: Ref<null | number>\n  scrollX: Ref<boolean>\n  scrollY: Ref<boolean>\n  bodyWidth: Ref<null | number>\n  fixedWidth: Ref<null | number>\n  rightFixedWidth: Ref<null | number>\n  tableHeight: Ref<null | number>\n  headerHeight: Ref<null | number> // Table Header Height\n  appendHeight: Ref<null | number> // Append Slot Height\n  footerHeight: Ref<null | number> // Table Footer Height\n  gutterWidth: number\n  constructor(options: Record<string, any>) {\n    this.observers = []\n    this.table = null\n    this.store = null\n    this.columns = []\n    this.fit = true\n    this.showHeader = true\n    this.height = ref(null)\n    this.scrollX = ref(false)\n    this.scrollY = ref(false)\n    this.bodyWidth = ref(null)\n    this.fixedWidth = ref(null)\n    this.rightFixedWidth = ref(null)\n    this.gutterWidth = 0\n    for (const name in options) {\n      if (hasOwn(options, name)) {\n        if (isRef(this[name])) {\n          this[name as string].value = options[name]\n        } else {\n          this[name as string] = options[name]\n        }\n      }\n    }\n    if (!this.table) {\n      throw new Error('Table is required for Table Layout')\n    }\n    if (!this.store) {\n      throw new Error('Store is required for Table Layout')\n    }\n  }\n\n  updateScrollY() {\n    const height = this.height.value\n    /**\n     * When the height is not initialized, it is null.\n     * After the table is initialized, when the height is not configured, the height is 0.\n     */\n    if (height === null) return false\n    const scrollBarRef = this.table.refs.scrollBarRef\n    if (this.table.vnode.el && scrollBarRef) {\n      let scrollY = true\n      const prevScrollY = this.scrollY.value\n      scrollY =\n        scrollBarRef.wrap$.scrollHeight > scrollBarRef.wrap$.clientHeight\n      this.scrollY.value = scrollY\n      return prevScrollY !== scrollY\n    }\n    return false\n  }\n\n  setHeight(value: string | number, prop = 'height') {\n    if (!isClient) return\n    const el = this.table.vnode.el\n    value = parseHeight(value)\n    this.height.value = Number(value)\n\n    if (!el && (value || value === 0))\n      return nextTick(() => this.setHeight(value, prop))\n\n    if (typeof value === 'number') {\n      el.style[prop] = `${value}px`\n      this.updateElsHeight()\n    } else if (typeof value === 'string') {\n      el.style[prop] = value\n      this.updateElsHeight()\n    }\n  }\n\n  setMaxHeight(value: string | number) {\n    this.setHeight(value, 'max-height')\n  }\n\n  getFlattenColumns(): TableColumnCtx<T>[] {\n    const flattenColumns = []\n    const columns = this.table.store.states.columns.value\n    columns.forEach((column) => {\n      if (column.isColumnGroup) {\n        // eslint-disable-next-line prefer-spread\n        flattenColumns.push.apply(flattenColumns, column.columns)\n      } else {\n        flattenColumns.push(column)\n      }\n    })\n\n    return flattenColumns\n  }\n\n  updateElsHeight() {\n    this.updateScrollY()\n    this.notifyObservers('scrollable')\n  }\n\n  headerDisplayNone(elm: HTMLElement) {\n    if (!elm) return true\n    let headerChild = elm\n    while (headerChild.tagName !== 'DIV') {\n      if (getComputedStyle(headerChild).display === 'none') {\n        return true\n      }\n      headerChild = headerChild.parentElement\n    }\n    return false\n  }\n\n  updateColumnsWidth() {\n    if (!isClient) return\n    const fit = this.fit\n    const bodyWidth = this.table.vnode.el.clientWidth\n    let bodyMinWidth = 0\n\n    const flattenColumns = this.getFlattenColumns()\n    const flexColumns = flattenColumns.filter(\n      (column) => typeof column.width !== 'number'\n    )\n    flattenColumns.forEach((column) => {\n      // Clean those columns whose width changed from flex to unflex\n      if (typeof column.width === 'number' && column.realWidth)\n        column.realWidth = null\n    })\n    if (flexColumns.length > 0 && fit) {\n      flattenColumns.forEach((column) => {\n        bodyMinWidth += Number(column.width || column.minWidth || 80)\n      })\n      if (bodyMinWidth <= bodyWidth) {\n        // DON'T HAVE SCROLL BAR\n        this.scrollX.value = false\n\n        const totalFlexWidth = bodyWidth - bodyMinWidth\n\n        if (flexColumns.length === 1) {\n          flexColumns[0].realWidth =\n            Number(flexColumns[0].minWidth || 80) + totalFlexWidth\n        } else {\n          const allColumnsWidth = flexColumns.reduce(\n            (prev, column) => prev + Number(column.minWidth || 80),\n            0\n          )\n          const flexWidthPerPixel = totalFlexWidth / allColumnsWidth\n          let noneFirstWidth = 0\n\n          flexColumns.forEach((column, index) => {\n            if (index === 0) return\n            const flexWidth = Math.floor(\n              Number(column.minWidth || 80) * flexWidthPerPixel\n            )\n            noneFirstWidth += flexWidth\n            column.realWidth = Number(column.minWidth || 80) + flexWidth\n          })\n\n          flexColumns[0].realWidth =\n            Number(flexColumns[0].minWidth || 80) +\n            totalFlexWidth -\n            noneFirstWidth\n        }\n      } else {\n        // HAVE HORIZONTAL SCROLL BAR\n        this.scrollX.value = true\n        flexColumns.forEach((column) => {\n          column.realWidth = Number(column.minWidth)\n        })\n      }\n\n      this.bodyWidth.value = Math.max(bodyMinWidth, bodyWidth)\n      this.table.state.resizeState.value.width = this.bodyWidth.value\n    } else {\n      flattenColumns.forEach((column) => {\n        if (!column.width && !column.minWidth) {\n          column.realWidth = 80\n        } else {\n          column.realWidth = Number(column.width || column.minWidth)\n        }\n        bodyMinWidth += column.realWidth\n      })\n      this.scrollX.value = bodyMinWidth > bodyWidth\n\n      this.bodyWidth.value = bodyMinWidth\n    }\n\n    const fixedColumns = this.store.states.fixedColumns.value\n\n    if (fixedColumns.length > 0) {\n      let fixedWidth = 0\n      fixedColumns.forEach((column) => {\n        fixedWidth += Number(column.realWidth || column.width)\n      })\n\n      this.fixedWidth.value = fixedWidth\n    }\n\n    const rightFixedColumns = this.store.states.rightFixedColumns.value\n    if (rightFixedColumns.length > 0) {\n      let rightFixedWidth = 0\n      rightFixedColumns.forEach((column) => {\n        rightFixedWidth += Number(column.realWidth || column.width)\n      })\n\n      this.rightFixedWidth.value = rightFixedWidth\n    }\n    this.notifyObservers('columns')\n  }\n\n  addObserver(observer: TableHeader) {\n    this.observers.push(observer)\n  }\n\n  removeObserver(observer: TableHeader) {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.observers.splice(index, 1)\n    }\n  }\n\n  notifyObservers(event: string) {\n    const observers = this.observers\n    observers.forEach((observer) => {\n      switch (event) {\n        case 'columns':\n          observer.state?.onColumnsChange(this)\n          break\n        case 'scrollable':\n          observer.state?.onScrollableChange(this)\n          break\n        default:\n          throw new Error(`Table Layout don't have event ${event}.`)\n      }\n    })\n  }\n}\n\nexport default TableLayout\n"]},"metadata":{},"sourceType":"module"}