{"ast":null,"code":"import { ref, getCurrentInstance, inject, computed, provide, unref } from 'vue';\nimport '../../tokens/index.mjs';\nimport '../../utils/index.mjs';\nimport { configProviderContextKey } from '../../tokens/config-provider.mjs';\nimport { debugWarn } from '../../utils/error.mjs';\nimport { keysOf } from '../../utils/objects.mjs';\nconst globalConfig = ref();\n\nfunction useGlobalConfig(key, defaultValue = void 0) {\n  const config = getCurrentInstance() ? inject(configProviderContextKey, globalConfig) : globalConfig;\n\n  if (key) {\n    return computed(() => {\n      var _a, _b;\n\n      return (_b = (_a = config.value) == null ? void 0 : _a[key]) != null ? _b : defaultValue;\n    });\n  } else {\n    return config;\n  }\n}\n\nconst provideGlobalConfig = (config, app, global = false) => {\n  var _a;\n\n  const inSetup = !!getCurrentInstance();\n  const oldConfig = inSetup ? useGlobalConfig() : void 0;\n  const provideFn = (_a = app == null ? void 0 : app.provide) != null ? _a : inSetup ? provide : void 0;\n\n  if (!provideFn) {\n    debugWarn(\"provideGlobalConfig\", \"provideGlobalConfig() can only be used inside setup().\");\n    return;\n  }\n\n  const context = computed(() => {\n    const cfg = unref(config);\n    if (!(oldConfig == null ? void 0 : oldConfig.value)) return cfg;\n    return mergeConfig(oldConfig.value, cfg);\n  });\n  provideFn(configProviderContextKey, context);\n\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value;\n  }\n\n  return context;\n};\n\nconst mergeConfig = (a, b) => {\n  var _a;\n\n  const keys = [... /* @__PURE__ */new Set([...keysOf(a), ...keysOf(b)])];\n  const obj = {};\n\n  for (const key of keys) {\n    obj[key] = (_a = b[key]) != null ? _a : a[key];\n  }\n\n  return obj;\n};\n\nexport { provideGlobalConfig, useGlobalConfig };","map":{"version":3,"mappings":";;;;;;AAGA,MAAMA,YAAY,GAAGC,GAAG,EAAxB;;AACO,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAAY,GAAG,KAAK,CAAlD,EAAqD;EAC1D,MAAMC,MAAM,GAAGC,kBAAkB,KAAKC,MAAM,CAACC,wBAAD,EAA2BR,YAA3B,CAAX,GAAsDA,YAAvF;;EACA,IAAIG,GAAJ,EAAS;IACP,OAAOM,QAAQ,CAAC,MAAM;MACpB,IAAIC,EAAJ,EAAQC,EAAR;;MACA,OAAO,CAACA,EAAE,GAAG,CAACD,EAAE,GAAGL,MAAM,CAACO,KAAb,KAAuB,IAAvB,GAA8B,KAAK,CAAnC,GAAuCF,EAAE,CAACP,GAAD,CAA/C,KAAyD,IAAzD,GAAgEQ,EAAhE,GAAqEP,YAA5E;IACD,CAHc,CAAf;EAID,CALD,MAKO;IACL,OAAOC,MAAP;EACD;AACF;;AACW,MAACQ,mBAAmB,GAAG,CAACR,MAAD,EAASS,GAAT,EAAcC,MAAM,GAAG,KAAvB,KAAiC;EAClE,IAAIL,EAAJ;;EACA,MAAMM,OAAO,GAAG,CAAC,CAACV,kBAAkB,EAApC;EACA,MAAMW,SAAS,GAAGD,OAAO,GAAGd,eAAe,EAAlB,GAAuB,KAAK,CAArD;EACA,MAAMgB,SAAS,GAAG,CAACR,EAAE,GAAGI,GAAG,IAAI,IAAP,GAAc,KAAK,CAAnB,GAAuBA,GAAG,CAACK,OAAjC,KAA6C,IAA7C,GAAoDT,EAApD,GAAyDM,OAAO,GAAGG,OAAH,GAAa,KAAK,CAApG;;EACA,IAAI,CAACD,SAAL,EAAgB;IACdE,SAAS,CAAC,qBAAD,EAAwB,wDAAxB,CAAT;IACA;EACD;;EACD,MAAMC,OAAO,GAAGZ,QAAQ,CAAC,MAAM;IAC7B,MAAMa,GAAG,GAAGC,KAAK,CAAClB,MAAD,CAAjB;IACA,IAAI,EAAEY,SAAS,IAAI,IAAb,GAAoB,KAAK,CAAzB,GAA6BA,SAAS,CAACL,KAAzC,CAAJ,EACE,OAAOU,GAAP;IACF,OAAOE,WAAW,CAACP,SAAS,CAACL,KAAX,EAAkBU,GAAlB,CAAlB;EACD,CALuB,CAAxB;EAMAJ,SAAS,CAACV,wBAAD,EAA2Ba,OAA3B,CAAT;;EACA,IAAIN,MAAM,IAAI,CAACf,YAAY,CAACY,KAA5B,EAAmC;IACjCZ,YAAY,CAACY,KAAb,GAAqBS,OAAO,CAACT,KAA7B;EACD;;EACD,OAAOS,OAAP;AACF,CApBY;;AAqBZ,MAAMG,WAAW,GAAG,CAACC,CAAD,EAAIC,CAAJ,KAAU;EAC5B,IAAIhB,EAAJ;;EACA,MAAMiB,IAAI,GAAG,CAAC,mBAAmB,IAAIC,GAAJ,CAAQ,CAAC,GAAGC,MAAM,CAACJ,CAAD,CAAV,EAAe,GAAGI,MAAM,CAACH,CAAD,CAAxB,CAAR,CAApB,CAAb;EACA,MAAMI,GAAG,GAAG,EAAZ;;EACA,KAAK,MAAM3B,GAAX,IAAkBwB,IAAlB,EAAwB;IACtBG,GAAG,CAAC3B,GAAD,CAAH,GAAW,CAACO,EAAE,GAAGgB,CAAC,CAACvB,GAAD,CAAP,KAAiB,IAAjB,GAAwBO,EAAxB,GAA6Be,CAAC,CAACtB,GAAD,CAAzC;EACD;;EACD,OAAO2B,GAAP;AACD,CARD","names":["globalConfig","ref","useGlobalConfig","key","defaultValue","config","getCurrentInstance","inject","configProviderContextKey","computed","_a","_b","value","provideGlobalConfig","app","global","inSetup","oldConfig","provideFn","provide","debugWarn","context","cfg","unref","mergeConfig","a","b","keys","Set","keysOf","obj"],"sources":["../../../../../packages/hooks/use-global-config/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, inject, provide, ref, unref } from 'vue'\nimport { configProviderContextKey } from '@element-plus/tokens'\nimport { debugWarn, keysOf } from '@element-plus/utils'\n\nimport type { MaybeRef } from '@vueuse/core'\nimport type { App, Ref } from 'vue'\nimport type { ConfigProviderContext } from '@element-plus/tokens'\n\n// this is meant to fix global methods like `ElMessage(opts)`, this way we can inject current locale\n// into the component as default injection value.\n// refer to: https://github.com/element-plus/element-plus/issues/2610#issuecomment-887965266\nconst globalConfig = ref<ConfigProviderContext>()\n\nexport function useGlobalConfig<\n  K extends keyof ConfigProviderContext,\n  D extends ConfigProviderContext[K]\n>(\n  key: K,\n  defaultValue?: D\n): Ref<Exclude<ConfigProviderContext[K], undefined> | D>\nexport function useGlobalConfig(): Ref<ConfigProviderContext>\nexport function useGlobalConfig(\n  key?: keyof ConfigProviderContext,\n  defaultValue = undefined\n) {\n  const config = getCurrentInstance()\n    ? inject(configProviderContextKey, globalConfig)\n    : globalConfig\n  if (key) {\n    return computed(() => config.value?.[key] ?? defaultValue)\n  } else {\n    return config\n  }\n}\n\nexport const provideGlobalConfig = (\n  config: MaybeRef<ConfigProviderContext>,\n  app?: App,\n  global = false\n) => {\n  const inSetup = !!getCurrentInstance()\n  const oldConfig = inSetup ? useGlobalConfig() : undefined\n\n  const provideFn = app?.provide ?? (inSetup ? provide : undefined)\n  if (!provideFn) {\n    debugWarn(\n      'provideGlobalConfig',\n      'provideGlobalConfig() can only be used inside setup().'\n    )\n    return\n  }\n\n  const context = computed(() => {\n    const cfg = unref(config)\n    if (!oldConfig?.value) return cfg\n    return mergeConfig(oldConfig.value, cfg)\n  })\n  provideFn(configProviderContextKey, context)\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value\n  }\n  return context\n}\n\nconst mergeConfig = (\n  a: ConfigProviderContext,\n  b: ConfigProviderContext\n): ConfigProviderContext => {\n  const keys = [...new Set([...keysOf(a), ...keysOf(b)])]\n  const obj: Record<string, any> = {}\n  for (const key of keys) {\n    obj[key] = b[key] ?? a[key]\n  }\n  return obj\n}\n"]},"metadata":{},"sourceType":"module"}