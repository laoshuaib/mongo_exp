{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { computed, watch } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { CHECKED_CHANGE_EVENT } from '../transfer-panel.mjs';\nimport { usePropsAlias } from './use-props-alias.mjs';\nimport { isFunction } from '@vue/shared';\n\nconst useCheck = (props, panelState, emit) => {\n  const propsAlias = usePropsAlias(props);\n  const filteredData = computed(() => {\n    return props.data.filter(item => {\n      if (isFunction(props.filterMethod)) {\n        return props.filterMethod(panelState.query, item);\n      } else {\n        const label = String(item[propsAlias.value.label] || item[propsAlias.value.key]);\n        return label.toLowerCase().includes(panelState.query.toLowerCase());\n      }\n    });\n  });\n  const checkableData = computed(() => filteredData.value.filter(item => !item[propsAlias.value.disabled]));\n  const checkedSummary = computed(() => {\n    const checkedLength = panelState.checked.length;\n    const dataLength = props.data.length;\n    const {\n      noChecked,\n      hasChecked\n    } = props.format;\n\n    if (noChecked && hasChecked) {\n      return checkedLength > 0 ? hasChecked.replace(/\\${checked}/g, checkedLength.toString()).replace(/\\${total}/g, dataLength.toString()) : noChecked.replace(/\\${total}/g, dataLength.toString());\n    } else {\n      return `${checkedLength}/${dataLength}`;\n    }\n  });\n  const isIndeterminate = computed(() => {\n    const checkedLength = panelState.checked.length;\n    return checkedLength > 0 && checkedLength < checkableData.value.length;\n  });\n\n  const updateAllChecked = () => {\n    const checkableDataKeys = checkableData.value.map(item => item[propsAlias.value.key]);\n    panelState.allChecked = checkableDataKeys.length > 0 && checkableDataKeys.every(item => panelState.checked.includes(item));\n  };\n\n  const handleAllCheckedChange = value => {\n    panelState.checked = value ? checkableData.value.map(item => item[propsAlias.value.key]) : [];\n  };\n\n  watch(() => panelState.checked, (val, oldVal) => {\n    updateAllChecked();\n\n    if (panelState.checkChangeByUser) {\n      const movedKeys = val.concat(oldVal).filter(v => !val.includes(v) || !oldVal.includes(v));\n      emit(CHECKED_CHANGE_EVENT, val, movedKeys);\n    } else {\n      emit(CHECKED_CHANGE_EVENT, val);\n      panelState.checkChangeByUser = true;\n    }\n  });\n  watch(checkableData, () => {\n    updateAllChecked();\n  });\n  watch(() => props.data, () => {\n    const checked = [];\n    const filteredDataKeys = filteredData.value.map(item => item[propsAlias.value.key]);\n    panelState.checked.forEach(item => {\n      if (filteredDataKeys.includes(item)) {\n        checked.push(item);\n      }\n    });\n    panelState.checkChangeByUser = false;\n    panelState.checked = checked;\n  });\n  watch(() => props.defaultChecked, (val, oldVal) => {\n    if (oldVal && val.length === oldVal.length && val.every(item => oldVal.includes(item))) return;\n    const checked = [];\n    const checkableDataKeys = checkableData.value.map(item => item[propsAlias.value.key]);\n    val.forEach(item => {\n      if (checkableDataKeys.includes(item)) {\n        checked.push(item);\n      }\n    });\n    panelState.checkChangeByUser = false;\n    panelState.checked = checked;\n  }, {\n    immediate: true\n  });\n  return {\n    filteredData,\n    checkableData,\n    checkedSummary,\n    isIndeterminate,\n    updateAllChecked,\n    handleAllCheckedChange\n  };\n};\n\nexport { useCheck };","map":{"version":3,"mappings":"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","names":["useCheck","props","panelState","emit","propsAlias","usePropsAlias","filteredData","computed","data","filter","item","isFunction","filterMethod","query","label","String","value","key","toLowerCase","includes","checkableData","disabled","checkedSummary","checkedLength","checked","length","dataLength","noChecked","hasChecked","format","replace","toString","isIndeterminate","updateAllChecked","checkableDataKeys","map","allChecked","every","handleAllCheckedChange","watch","val","oldVal","checkChangeByUser","movedKeys","concat","v","CHECKED_CHANGE_EVENT","filteredDataKeys","forEach","push","defaultChecked","immediate"],"sources":["../../../../../../../packages/components/transfer/src/composables/use-check.ts"],"sourcesContent":["import { computed, watch } from 'vue'\nimport { isFunction } from '@element-plus/utils'\nimport { CHECKED_CHANGE_EVENT } from '../transfer-panel'\nimport { usePropsAlias } from './use-props-alias'\n\nimport type { SetupContext } from 'vue'\nimport type { CheckboxValueType } from '@element-plus/components/checkbox'\nimport type { TransferKey } from '../transfer'\nimport type {\n  TransferPanelEmits,\n  TransferPanelProps,\n  TransferPanelState,\n} from '../transfer-panel'\n\nexport const useCheck = (\n  props: TransferPanelProps,\n  panelState: TransferPanelState,\n  emit: SetupContext<TransferPanelEmits>['emit']\n) => {\n  const propsAlias = usePropsAlias(props)\n\n  const filteredData = computed(() => {\n    return props.data.filter((item) => {\n      if (isFunction(props.filterMethod)) {\n        return props.filterMethod(panelState.query, item)\n      } else {\n        const label = String(\n          item[propsAlias.value.label] || item[propsAlias.value.key]\n        )\n        return label.toLowerCase().includes(panelState.query.toLowerCase())\n      }\n    })\n  })\n\n  const checkableData = computed(() =>\n    filteredData.value.filter((item) => !item[propsAlias.value.disabled])\n  )\n\n  const checkedSummary = computed(() => {\n    const checkedLength = panelState.checked.length\n    const dataLength = props.data.length\n    const { noChecked, hasChecked } = props.format\n\n    if (noChecked && hasChecked) {\n      return checkedLength > 0\n        ? hasChecked\n            .replace(/\\${checked}/g, checkedLength.toString())\n            .replace(/\\${total}/g, dataLength.toString())\n        : noChecked.replace(/\\${total}/g, dataLength.toString())\n    } else {\n      return `${checkedLength}/${dataLength}`\n    }\n  })\n\n  const isIndeterminate = computed(() => {\n    const checkedLength = panelState.checked.length\n    return checkedLength > 0 && checkedLength < checkableData.value.length\n  })\n\n  const updateAllChecked = () => {\n    const checkableDataKeys = checkableData.value.map(\n      (item) => item[propsAlias.value.key]\n    )\n    panelState.allChecked =\n      checkableDataKeys.length > 0 &&\n      checkableDataKeys.every((item) => panelState.checked.includes(item))\n  }\n\n  const handleAllCheckedChange = (value: CheckboxValueType) => {\n    panelState.checked = value\n      ? checkableData.value.map((item) => item[propsAlias.value.key])\n      : []\n  }\n\n  watch(\n    () => panelState.checked,\n    (val, oldVal) => {\n      updateAllChecked()\n\n      if (panelState.checkChangeByUser) {\n        const movedKeys = val\n          .concat(oldVal)\n          .filter((v) => !val.includes(v) || !oldVal.includes(v))\n        emit(CHECKED_CHANGE_EVENT, val, movedKeys)\n      } else {\n        emit(CHECKED_CHANGE_EVENT, val)\n        panelState.checkChangeByUser = true\n      }\n    }\n  )\n\n  watch(checkableData, () => {\n    updateAllChecked()\n  })\n\n  watch(\n    () => props.data,\n    () => {\n      const checked: TransferKey[] = []\n      const filteredDataKeys = filteredData.value.map(\n        (item) => item[propsAlias.value.key]\n      )\n      panelState.checked.forEach((item) => {\n        if (filteredDataKeys.includes(item)) {\n          checked.push(item)\n        }\n      })\n      panelState.checkChangeByUser = false\n      panelState.checked = checked\n    }\n  )\n\n  watch(\n    () => props.defaultChecked,\n    (val, oldVal) => {\n      if (\n        oldVal &&\n        val.length === oldVal.length &&\n        val.every((item) => oldVal.includes(item))\n      )\n        return\n\n      const checked: TransferKey[] = []\n      const checkableDataKeys = checkableData.value.map(\n        (item) => item[propsAlias.value.key]\n      )\n\n      val.forEach((item) => {\n        if (checkableDataKeys.includes(item)) {\n          checked.push(item)\n        }\n      })\n      panelState.checkChangeByUser = false\n      panelState.checked = checked\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  return {\n    filteredData,\n    checkableData,\n    checkedSummary,\n    isIndeterminate,\n    updateAllChecked,\n    handleAllCheckedChange,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}