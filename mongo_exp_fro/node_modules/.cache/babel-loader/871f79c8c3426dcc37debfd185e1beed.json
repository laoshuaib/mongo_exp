{"ast":null,"code":"import { shallowReactive } from 'vue';\nconst instances = shallowReactive([]);\n\nconst getInstance = id => {\n  const idx = instances.findIndex(instance => instance.id === id);\n  const current = instances[idx];\n  let prev;\n\n  if (idx > 0) {\n    prev = instances[idx - 1];\n  }\n\n  return {\n    current,\n    prev\n  };\n};\n\nconst getLastOffset = id => {\n  const {\n    prev\n  } = getInstance(id);\n  if (!prev) return 0;\n  return prev.vm.exposeProxy.bottom;\n};\n\nexport { getInstance, getLastOffset, instances };","map":{"version":3,"mappings":";AACY,MAACA,SAAS,GAAGC,eAAe,CAAC,EAAD,CAA5B;;AACA,MAACC,WAAW,GAAIC,EAAD,IAAQ;EACjC,MAAMC,GAAG,GAAGJ,SAAS,CAACK,SAAV,CAAqBC,QAAD,IAAcA,QAAQ,CAACH,EAAT,KAAgBA,EAAlD,CAAZ;EACA,MAAMI,OAAO,GAAGP,SAAS,CAACI,GAAD,CAAzB;EACA,IAAII,IAAJ;;EACA,IAAIJ,GAAG,GAAG,CAAV,EAAa;IACXI,IAAI,GAAGR,SAAS,CAACI,GAAG,GAAG,CAAP,CAAhB;EACD;;EACD,OAAO;IAAEG,OAAF;IAAWC;EAAX,CAAP;AACF,CARY;;AASA,MAACC,aAAa,GAAIN,EAAD,IAAQ;EACnC,MAAM;IAAEK;EAAF,IAAWN,WAAW,CAACC,EAAD,CAA5B;EACA,IAAI,CAACK,IAAL,EACE,OAAO,CAAP;EACF,OAAOA,IAAI,CAACE,EAAL,CAAQC,WAAR,CAAoBC,MAA3B;AACF,CALY","names":["instances","shallowReactive","getInstance","id","idx","findIndex","instance","current","prev","getLastOffset","vm","exposeProxy","bottom"],"sources":["../../../../../../packages/components/message/src/instance.ts"],"sourcesContent":["import { shallowReactive } from 'vue'\nimport type { ComponentInternalInstance, VNode } from 'vue'\nimport type { Mutable } from '@element-plus/utils'\nimport type { MessageHandler, MessageProps } from './message'\n\nexport type MessageContext = {\n  id: string\n  vnode: VNode\n  handler: MessageHandler\n  vm: ComponentInternalInstance\n  props: Mutable<MessageProps>\n}\n\nexport const instances: MessageContext[] = shallowReactive([])\n\nexport const getInstance = (id: string) => {\n  const idx = instances.findIndex((instance) => instance.id === id)\n  const current = instances[idx]\n  let prev: MessageContext | undefined\n  if (idx > 0) {\n    prev = instances[idx - 1]\n  }\n  return { current, prev }\n}\n\nexport const getLastOffset = (id: string): number => {\n  const { prev } = getInstance(id)\n  if (!prev) return 0\n  return prev.vm.exposeProxy!.bottom\n}\n"]},"metadata":{},"sourceType":"module"}