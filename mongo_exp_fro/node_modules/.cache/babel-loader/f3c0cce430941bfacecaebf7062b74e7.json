{"ast":null,"code":"import { defineComponent, inject, ref, getCurrentInstance, provide, watch, nextTick, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode, Fragment, renderList, vShow } from 'vue';\nimport { isFunction, isString } from '@vue/shared';\nimport _CollapseTransition from '../../collapse-transition/index.mjs';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading, CaretRight } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport NodeContent from './tree-node-content.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { dragEventsKey } from './model/useDragNode.mjs';\nimport Node from './model/node.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElCollapseTransition: _CollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({})\n    },\n    props: {\n      type: Object,\n      default: () => ({})\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"node-expand\"],\n\n  setup(props, ctx) {\n    const ns = useNamespace(\"tree\");\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const tree = inject(\"RootTree\");\n    const expanded = ref(false);\n    const childNodeRendered = ref(false);\n    const oldChecked = ref(null);\n    const oldIndeterminate = ref(null);\n    const node$ = ref(null);\n    const dragEvents = inject(dragEventsKey);\n    const instance = getCurrentInstance();\n    provide(\"NodeInstance\", instance);\n\n    if (!tree) {\n      debugWarn(\"Tree\", \"Can not find node's tree.\");\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true;\n      childNodeRendered.value = true;\n    }\n\n    const childrenKey = tree.props[\"children\"] || \"children\";\n    watch(() => {\n      const children = props.node.data[childrenKey];\n      return children && [...children];\n    }, () => {\n      props.node.updateChildren();\n    });\n    watch(() => props.node.indeterminate, val => {\n      handleSelectChange(props.node.checked, val);\n    });\n    watch(() => props.node.checked, val => {\n      handleSelectChange(val, props.node.indeterminate);\n    });\n    watch(() => props.node.expanded, val => {\n      nextTick(() => expanded.value = val);\n\n      if (val) {\n        childNodeRendered.value = true;\n      }\n    });\n\n    const getNodeKey$1 = node => {\n      return getNodeKey(tree.props.nodeKey, node.data);\n    };\n\n    const getNodeClass = node => {\n      const nodeClassFunc = props.props.class;\n\n      if (!nodeClassFunc) {\n        return {};\n      }\n\n      let className;\n\n      if (isFunction(nodeClassFunc)) {\n        const {\n          data\n        } = node;\n        className = nodeClassFunc(data, node);\n      } else {\n        className = nodeClassFunc;\n      }\n\n      if (isString(className)) {\n        return {\n          [className]: true\n        };\n      } else {\n        return className;\n      }\n    };\n\n    const handleSelectChange = (checked, indeterminate) => {\n      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {\n        tree.ctx.emit(\"check-change\", props.node.data, checked, indeterminate);\n      }\n\n      oldChecked.value = checked;\n      oldIndeterminate.value = indeterminate;\n    };\n\n    const handleClick = e => {\n      const store = tree.store.value;\n      store.setCurrentNode(props.node);\n      tree.ctx.emit(\"current-change\", store.currentNode ? store.currentNode.data : null, store.currentNode);\n      tree.currentNode.value = props.node;\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick();\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: {\n            checked: !props.node.checked\n          }\n        });\n      }\n\n      tree.ctx.emit(\"node-click\", props.node.data, props.node, instance, e);\n    };\n\n    const handleContextMenu = event => {\n      if (tree.instance.vnode.props[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n\n      tree.ctx.emit(\"node-contextmenu\", event, props.node.data, props.node, instance);\n    };\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return;\n\n      if (expanded.value) {\n        tree.ctx.emit(\"node-collapse\", props.node.data, props.node, instance);\n        props.node.collapse();\n      } else {\n        props.node.expand();\n        ctx.emit(\"node-expand\", props.node.data, props.node, instance);\n      }\n    };\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);\n      nextTick(() => {\n        const store = tree.store.value;\n        tree.ctx.emit(\"check\", props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    };\n\n    const handleChildNodeExpand = (nodeData, node, instance2) => {\n      broadcastExpanded(node);\n      tree.ctx.emit(\"node-expand\", nodeData, node, instance2);\n    };\n\n    const handleDragStart = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragStart({\n        event,\n        treeNode: props\n      });\n    };\n\n    const handleDragOver = event => {\n      event.preventDefault();\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: {\n          $el: node$.value,\n          node: props.node\n        }\n      });\n    };\n\n    const handleDrop = event => {\n      event.preventDefault();\n    };\n\n    const handleDragEnd = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragEnd(event);\n    };\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey: getNodeKey$1,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight\n    };\n  }\n\n});\n\nconst _hoisted_1 = [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\"];\nconst _hoisted_2 = [\"aria-expanded\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  const _component_loading = resolveComponent(\"loading\");\n\n  const _component_node_content = resolveComponent(\"node-content\");\n\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  const _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.node.isCurrent), _ctx.ns.is(\"hidden\", !_ctx.node.visible), _ctx.ns.is(\"focusable\", !_ctx.node.disabled), _ctx.ns.is(\"checked\", !_ctx.node.disabled && _ctx.node.checked), _ctx.getNodeClass(_ctx.node)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: _cache[1] || (_cache[1] = withModifiers((...args) => _ctx.handleClick && _ctx.handleClick(...args), [\"stop\"])),\n    onContextmenu: _cache[2] || (_cache[2] = (...args) => _ctx.handleContextMenu && _ctx.handleContextMenu(...args)),\n    onDragstart: _cache[3] || (_cache[3] = withModifiers((...args) => _ctx.handleDragStart && _ctx.handleDragStart(...args), [\"stop\"])),\n    onDragover: _cache[4] || (_cache[4] = withModifiers((...args) => _ctx.handleDragOver && _ctx.handleDragOver(...args), [\"stop\"])),\n    onDragend: _cache[5] || (_cache[5] = withModifiers((...args) => _ctx.handleDragEnd && _ctx.handleDragEnd(...args), [\"stop\"])),\n    onDrop: _cache[6] || (_cache[6] = withModifiers((...args) => _ctx.handleDrop && _ctx.handleDrop(...args), [\"stop\"]))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: normalizeStyle({\n      paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    })\n  }, [_ctx.tree.props.icon || _ctx.CaretRight ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"expand-icon\"), _ctx.ns.is(\"leaf\", _ctx.node.isLeaf), {\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: _cache[0] || (_cache[0] = withModifiers(() => {}, [\"stop\"])),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onChange\"])) : createCommentVNode(\"v-if\", true), _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"loading-icon\"), _ctx.ns.is(\"loading\")])\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 6), createVNode(_component_el_collapse_transition, null, {\n    default: withCtx(() => [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"node\", \"children\")),\n      role: \"group\",\n      \"aria-expanded\": _ctx.expanded\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.node.childNodes, child => {\n      return openBlock(), createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        \"render-content\": _ctx.renderContent,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        node: child,\n        accordion: _ctx.accordion,\n        props: _ctx.props,\n        onNodeExpand: _ctx.handleChildNodeExpand\n      }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"accordion\", \"props\", \"onNodeExpand\"]);\n    }), 128))], 10, _hoisted_2)), [[vShow, _ctx.expanded]]) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  })], 42, _hoisted_1)), [[vShow, _ctx.node.visible]]);\n}\n\nvar ElTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree-node.vue\"]]);\n\nexport { ElTreeNode as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElCollapseTransition","ElCheckbox","NodeContent","ElIcon","Loading","props","node","type","default","accordion","renderContent","renderAfterExpand","showCheckbox","emits","setup","ctx","useNamespace","broadcastExpanded","useNodeExpandEventBroadcast","inject","ref","dragEventsKey","instance","getCurrentInstance","provide","tree","debugWarn","expanded","value","childNodeRendered","watch","data","childrenKey","children","updateChildren","indeterminate","val","handleSelectChange","checked","nextTick","getNodeKeyUtil","nodeKey","class","nodeClassFunc","className","oldChecked","oldIndeterminate","emit","e","store","currentNode","expandOnClickNode","handleExpandIconClick","checkOnClickNode","disabled","handleCheckChange","target","event","vnode","stopPropagation","preventDefault","isLeaf","collapse","expand","ev","setChecked","checkStrictly","checkedNodes","getCheckedNodes","checkedKeys","getCheckedKeys","halfCheckedNodes","getHalfCheckedNodes","halfCheckedKeys","getHalfCheckedKeys","handleChildNodeExpand","nodeData","instance2","draggable","dragEvents","treeNodeDragStart","treeNode","treeNodeDragOver","$el","node$","treeNodeDragEnd","ns","getNodeKey","getNodeClass","handleClick","handleContextMenu","handleDragStart","handleDragOver","handleDrop","handleDragEnd","CaretRight","_createElementBlock","_ctx","b","is","isCurrent","visible","role","tabindex","onClick","_cache","onContextmenu","onDragstart","onDragover","onDragend","onDrop","_createElementVNode","_normalizeClass","be","style","_normalizeStyle","paddingLeft","level","indent","icon","_openBlock","_createBlock","key","_withModifiers","onChange","_createCommentVNode","loading","openBlock","_createVNode","withDirectives","_Fragment","_renderList","childNodes","child","onNodeExpand"],"sources":["../../../../../../packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { isFunction, isString } from '@vue/shared'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { RootTreeType, TreeNodeData, TreeOptionProps } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      const store = tree.store.value\n      store.setCurrentNode(props.node)\n      tree.ctx.emit(\n        'current-change',\n        store.currentNode ? store.currentNode.data : null,\n        store.currentNode\n      )\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand()\n        ctx.emit('node-expand', props.node.data, props.node, instance)\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}