{"ast":null,"code":"import { getCurrentInstance, inject, ref, unref, watch } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../tokens/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { isValidRange, getDefaultValue } from '../utils.mjs';\nimport { useShortcut } from './use-shortcut.mjs';\nimport { ROOT_PICKER_INJECTION_KEY } from '../../../../tokens/date-picker.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { isArray } from '@vue/shared';\n\nconst useRangePicker = (props, {\n  defaultValue,\n  leftDate,\n  rightDate,\n  unit,\n  onParsedValueChanged\n}) => {\n  const {\n    emit\n  } = getCurrentInstance();\n  const {\n    pickerNs\n  } = inject(ROOT_PICKER_INJECTION_KEY);\n  const drpNs = useNamespace(\"date-range-picker\");\n  const {\n    t,\n    lang\n  } = useLocale();\n  const handleShortcutClick = useShortcut(lang);\n  const minDate = ref();\n  const maxDate = ref();\n  const rangeState = ref({\n    endDate: null,\n    selecting: false\n  });\n\n  const handleChangeRange = val => {\n    rangeState.value = val;\n  };\n\n  const handleRangeConfirm = (visible = false) => {\n    const _minDate = unref(minDate);\n\n    const _maxDate = unref(maxDate);\n\n    if (isValidRange([_minDate, _maxDate])) {\n      emit(\"pick\", [_minDate, _maxDate], visible);\n    }\n  };\n\n  const onSelect = selecting => {\n    rangeState.value.selecting = selecting;\n\n    if (!selecting) {\n      rangeState.value.endDate = null;\n    }\n  };\n\n  const restoreDefault = () => {\n    const [start, end] = getDefaultValue(unref(defaultValue), {\n      lang: unref(lang),\n      unit,\n      unlinkPanels: props.unlinkPanels\n    });\n    minDate.value = void 0;\n    maxDate.value = void 0;\n    leftDate.value = start;\n    rightDate.value = end;\n  };\n\n  watch(defaultValue, val => {\n    if (val) {\n      restoreDefault();\n    }\n  }, {\n    immediate: true\n  });\n  watch(() => props.parsedValue, parsedValue => {\n    if (isArray(parsedValue) && parsedValue.length === 2) {\n      const [start, end] = parsedValue;\n      minDate.value = start;\n      leftDate.value = start;\n      maxDate.value = end;\n      onParsedValueChanged(unref(minDate), unref(maxDate));\n    } else {\n      restoreDefault();\n    }\n  }, {\n    immediate: true\n  });\n  return {\n    minDate,\n    maxDate,\n    rangeState,\n    lang,\n    ppNs: pickerNs,\n    drpNs,\n    handleChangeRange,\n    handleRangeConfirm,\n    handleShortcutClick,\n    onSelect,\n    t\n  };\n};\n\nexport { useRangePicker };","map":{"version":3,"mappings":"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","names":["useRangePicker","props","defaultValue","leftDate","rightDate","unit","onParsedValueChanged","emit","getCurrentInstance","pickerNs","inject","ROOT_PICKER_INJECTION_KEY","drpNs","useNamespace","t","lang","useLocale","handleShortcutClick","useShortcut","minDate","ref","maxDate","rangeState","endDate","selecting","handleChangeRange","val","value","handleRangeConfirm","visible","_minDate","unref","_maxDate","isValidRange","onSelect","restoreDefault","start","end","getDefaultValue","unlinkPanels","watch","immediate","parsedValue","isArray","length","ppNs"],"sources":["../../../../../../../packages/components/date-picker/src/composables/use-range-picker.ts"],"sourcesContent":["import { getCurrentInstance, inject, ref, unref, watch } from 'vue'\nimport { isArray } from '@element-plus/utils'\nimport { ROOT_PICKER_INJECTION_KEY } from '@element-plus/tokens'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { getDefaultValue, isValidRange } from '../utils'\nimport { useShortcut } from './use-shortcut'\n\nimport type { Ref } from 'vue'\nimport type { Dayjs } from 'dayjs'\nimport type { PanelRangeSharedProps, RangeState } from '../props/shared'\nimport type { DefaultValue } from '../utils'\n\ntype UseRangePickerProps = {\n  onParsedValueChanged: (\n    minDate: Dayjs | undefined,\n    maxDate: Dayjs | undefined\n  ) => void\n  defaultValue: Ref<DefaultValue>\n  leftDate: Ref<Dayjs>\n  rightDate: Ref<Dayjs>\n  unit: 'month' | 'year'\n}\n\nexport const useRangePicker = (\n  props: PanelRangeSharedProps,\n  {\n    defaultValue,\n    leftDate,\n    rightDate,\n    unit,\n\n    onParsedValueChanged,\n  }: UseRangePickerProps\n) => {\n  const { emit } = getCurrentInstance()!\n\n  const { pickerNs } = inject(ROOT_PICKER_INJECTION_KEY)!\n  const drpNs = useNamespace('date-range-picker')\n  const { t, lang } = useLocale()\n  const handleShortcutClick = useShortcut(lang)\n  const minDate = ref<Dayjs>()\n  const maxDate = ref<Dayjs>()\n  const rangeState = ref<RangeState>({\n    endDate: null,\n    selecting: false,\n  })\n\n  const handleChangeRange = (val: RangeState) => {\n    rangeState.value = val\n  }\n\n  const handleRangeConfirm = (visible = false) => {\n    const _minDate = unref(minDate)\n    const _maxDate = unref(maxDate)\n\n    if (isValidRange([_minDate, _maxDate])) {\n      emit('pick', [_minDate, _maxDate], visible)\n    }\n  }\n\n  const onSelect = (selecting: boolean) => {\n    rangeState.value.selecting = selecting\n    if (!selecting) {\n      rangeState.value.endDate = null\n    }\n  }\n\n  const restoreDefault = () => {\n    const [start, end] = getDefaultValue(unref(defaultValue), {\n      lang: unref(lang),\n      unit,\n      unlinkPanels: props.unlinkPanels,\n    })\n    minDate.value = undefined\n    maxDate.value = undefined\n    leftDate.value = start\n    rightDate.value = end\n  }\n\n  watch(\n    defaultValue,\n    (val) => {\n      if (val) {\n        restoreDefault()\n      }\n    },\n    { immediate: true }\n  )\n\n  watch(\n    () => props.parsedValue,\n    (parsedValue) => {\n      if (isArray(parsedValue) && parsedValue.length === 2) {\n        const [start, end] = parsedValue\n        minDate.value = start\n        leftDate.value = start\n        maxDate.value = end\n        onParsedValueChanged(unref(minDate), unref(maxDate))\n      } else {\n        restoreDefault()\n      }\n    },\n    { immediate: true }\n  )\n\n  return {\n    minDate,\n    maxDate,\n    rangeState,\n    lang,\n    ppNs: pickerNs,\n    drpNs,\n\n    handleChangeRange,\n    handleRangeConfirm,\n    handleShortcutClick,\n    onSelect,\n    t,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}