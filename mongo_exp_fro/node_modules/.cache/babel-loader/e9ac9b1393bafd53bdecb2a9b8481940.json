{"ast":null,"code":"import '../../../utils/index.mjs';\nimport { isNumber } from '@vueuse/core';\nlet hiddenTextarea = void 0;\nconst HIDDEN_STYLE = `\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`;\nconst CONTEXT_STYLE = [\"letter-spacing\", \"line-height\", \"padding-top\", \"padding-bottom\", \"font-family\", \"font-weight\", \"font-size\", \"text-rendering\", \"text-transform\", \"width\", \"text-indent\", \"padding-left\", \"padding-right\", \"border-width\", \"box-sizing\"];\n\nfunction calculateNodeStyling(targetElement) {\n  const style = window.getComputedStyle(targetElement);\n  const boxSizing = style.getPropertyValue(\"box-sizing\");\n  const paddingSize = Number.parseFloat(style.getPropertyValue(\"padding-bottom\")) + Number.parseFloat(style.getPropertyValue(\"padding-top\"));\n  const borderSize = Number.parseFloat(style.getPropertyValue(\"border-bottom-width\")) + Number.parseFloat(style.getPropertyValue(\"border-top-width\"));\n  const contextStyle = CONTEXT_STYLE.map(name => `${name}:${style.getPropertyValue(name)}`).join(\";\");\n  return {\n    contextStyle,\n    paddingSize,\n    borderSize,\n    boxSizing\n  };\n}\n\nfunction calcTextareaHeight(targetElement, minRows = 1, maxRows) {\n  var _a;\n\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement(\"textarea\");\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  const {\n    paddingSize,\n    borderSize,\n    boxSizing,\n    contextStyle\n  } = calculateNodeStyling(targetElement);\n  hiddenTextarea.setAttribute(\"style\", `${contextStyle};${HIDDEN_STYLE}`);\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || \"\";\n  let height = hiddenTextarea.scrollHeight;\n  const result = {};\n\n  if (boxSizing === \"border-box\") {\n    height = height + borderSize;\n  } else if (boxSizing === \"content-box\") {\n    height = height - paddingSize;\n  }\n\n  hiddenTextarea.value = \"\";\n  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n\n  if (isNumber(minRows)) {\n    let minHeight = singleRowHeight * minRows;\n\n    if (boxSizing === \"border-box\") {\n      minHeight = minHeight + paddingSize + borderSize;\n    }\n\n    height = Math.max(minHeight, height);\n    result.minHeight = `${minHeight}px`;\n  }\n\n  if (isNumber(maxRows)) {\n    let maxHeight = singleRowHeight * maxRows;\n\n    if (boxSizing === \"border-box\") {\n      maxHeight = maxHeight + paddingSize + borderSize;\n    }\n\n    height = Math.min(maxHeight, height);\n  }\n\n  result.height = `${height}px`;\n  (_a = hiddenTextarea.parentNode) == null ? void 0 : _a.removeChild(hiddenTextarea);\n  hiddenTextarea = void 0;\n  return result;\n}\n\nexport { calcTextareaHeight };","map":{"version":3,"mappings":"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","names":["hiddenTextarea","HIDDEN_STYLE","CONTEXT_STYLE","calculateNodeStyling","targetElement","style","window","getComputedStyle","boxSizing","getPropertyValue","paddingSize","Number","parseFloat","borderSize","contextStyle","map","name","join","calcTextareaHeight","minRows","maxRows","_a","document","createElement","body","appendChild","setAttribute","value","placeholder","height","scrollHeight","result","singleRowHeight","isNumber","minHeight","Math","max","maxHeight","min","parentNode","removeChild"],"sources":["../../../../../../packages/components/input/src/utils.ts"],"sourcesContent":["import { isNumber } from '@element-plus/utils'\n\nlet hiddenTextarea: HTMLTextAreaElement | undefined = undefined\n\nconst HIDDEN_STYLE = `\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`\n\nconst CONTEXT_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\ntype NodeStyle = {\n  contextStyle: string\n  boxSizing: string\n  paddingSize: number\n  borderSize: number\n}\n\ntype TextAreaHeight = {\n  height: string\n  minHeight?: string\n}\n\nfunction calculateNodeStyling(targetElement: Element): NodeStyle {\n  const style = window.getComputedStyle(targetElement)\n\n  const boxSizing = style.getPropertyValue('box-sizing')\n\n  const paddingSize =\n    Number.parseFloat(style.getPropertyValue('padding-bottom')) +\n    Number.parseFloat(style.getPropertyValue('padding-top'))\n\n  const borderSize =\n    Number.parseFloat(style.getPropertyValue('border-bottom-width')) +\n    Number.parseFloat(style.getPropertyValue('border-top-width'))\n\n  const contextStyle = CONTEXT_STYLE.map(\n    (name) => `${name}:${style.getPropertyValue(name)}`\n  ).join(';')\n\n  return { contextStyle, paddingSize, borderSize, boxSizing }\n}\n\nexport function calcTextareaHeight(\n  targetElement: HTMLTextAreaElement,\n  minRows = 1,\n  maxRows?: number\n): TextAreaHeight {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea')\n    document.body.appendChild(hiddenTextarea)\n  }\n\n  const { paddingSize, borderSize, boxSizing, contextStyle } =\n    calculateNodeStyling(targetElement)\n\n  hiddenTextarea.setAttribute('style', `${contextStyle};${HIDDEN_STYLE}`)\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || ''\n\n  let height = hiddenTextarea.scrollHeight\n  const result = {} as TextAreaHeight\n\n  if (boxSizing === 'border-box') {\n    height = height + borderSize\n  } else if (boxSizing === 'content-box') {\n    height = height - paddingSize\n  }\n\n  hiddenTextarea.value = ''\n  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize\n\n  if (isNumber(minRows)) {\n    let minHeight = singleRowHeight * minRows\n    if (boxSizing === 'border-box') {\n      minHeight = minHeight + paddingSize + borderSize\n    }\n    height = Math.max(minHeight, height)\n    result.minHeight = `${minHeight}px`\n  }\n  if (isNumber(maxRows)) {\n    let maxHeight = singleRowHeight * maxRows\n    if (boxSizing === 'border-box') {\n      maxHeight = maxHeight + paddingSize + borderSize\n    }\n    height = Math.min(maxHeight, height)\n  }\n  result.height = `${height}px`\n  hiddenTextarea.parentNode?.removeChild(hiddenTextarea)\n  hiddenTextarea = undefined\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}