{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { inject, computed, h } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { getRowIdentity } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport useEvents from './events-helper.mjs';\nimport useStyles from './styles-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nfunction useRender(props) {\n  const parent = inject(TABLE_INJECTION_KEY);\n  const ns = useNamespace(\"table\");\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger\n  } = useEvents(props);\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth\n  } = useStyles(props);\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store.states.columns.value.findIndex(({\n      type\n    }) => type === \"default\");\n  });\n\n  const getKeyOfRow = (row, index) => {\n    const rowKey = parent.props.rowKey;\n\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n\n    return index;\n  };\n\n  const rowRender = (row, $index, treeRowData, expanded = false) => {\n    const {\n      tooltipEffect,\n      store\n    } = props;\n    const {\n      indent,\n      columns\n    } = store.states;\n    const rowClasses = getRowClass(row, $index);\n    let display = true;\n\n    if (treeRowData) {\n      rowClasses.push(ns.em(\"row\", `level-${treeRowData.level}`));\n      display = treeRowData.display;\n    }\n\n    const displayStyle = display ? null : {\n      display: \"none\"\n    };\n    return h(\"tr\", {\n      style: [displayStyle, getRowStyle(row, $index)],\n      class: rowClasses,\n      key: getKeyOfRow(row, $index),\n      onDblclick: $event => handleDoubleClick($event, row),\n      onClick: $event => handleClick($event, row),\n      onContextmenu: $event => handleContextMenu($event, row),\n      onMouseenter: () => handleMouseEnter($index),\n      onMouseleave: handleMouseLeave\n    }, columns.value.map((column, cellIndex) => {\n      const {\n        rowspan,\n        colspan\n      } = getSpan(row, column, $index, cellIndex);\n\n      if (!rowspan || !colspan) {\n        return null;\n      }\n\n      const columnData = { ...column\n      };\n      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);\n      const data = {\n        store: props.store,\n        _self: props.context || parent,\n        column: columnData,\n        row,\n        $index,\n        cellIndex,\n        expanded\n      };\n\n      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n        data.treeNode = {\n          indent: treeRowData.level * indent.value,\n          level: treeRowData.level\n        };\n\n        if (typeof treeRowData.expanded === \"boolean\") {\n          data.treeNode.expanded = treeRowData.expanded;\n\n          if (\"loading\" in treeRowData) {\n            data.treeNode.loading = treeRowData.loading;\n          }\n\n          if (\"noLazyChildren\" in treeRowData) {\n            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n          }\n        }\n      }\n\n      const baseKey = `${$index},${cellIndex}`;\n      const patchKey = columnData.columnKey || columnData.rawColumnKey || \"\";\n      const tdChildren = cellChildren(cellIndex, column, data);\n      return h(\"td\", {\n        style: getCellStyle($index, cellIndex, row, column),\n        class: getCellClass($index, cellIndex, row, column),\n        key: `${patchKey}${baseKey}`,\n        rowspan,\n        colspan,\n        onMouseenter: $event => handleCellMouseEnter($event, { ...row,\n          tooltipEffect\n        }),\n        onMouseleave: handleCellMouseLeave\n      }, [tdChildren]);\n    }));\n  };\n\n  const cellChildren = (cellIndex, column, data) => {\n    return column.renderCell(data);\n  };\n\n  const wrappedRowRender = (row, $index) => {\n    const store = props.store;\n    const {\n      isRowExpanded,\n      assertRowKey\n    } = store;\n    const {\n      treeData,\n      lazyTreeNodeMap,\n      childrenColumnName,\n      rowKey\n    } = store.states;\n    const columns = store.states.columns.value;\n    const hasExpandColumn = columns.some(({\n      type\n    }) => type === \"expand\");\n\n    if (hasExpandColumn) {\n      const expanded = isRowExpanded(row);\n      const tr = rowRender(row, $index, void 0, expanded);\n      const renderExpanded = parent.renderExpanded;\n\n      if (expanded) {\n        if (!renderExpanded) {\n          console.error(\"[Element Error]renderExpanded is required.\");\n          return tr;\n        }\n\n        return [[tr, h(\"tr\", {\n          key: `expanded-row__${tr.key}`\n        }, [h(\"td\", {\n          colspan: columns.length,\n          class: \"el-table__cell el-table__expanded-cell\"\n        }, [renderExpanded({\n          row,\n          $index,\n          store,\n          expanded\n        })])])]];\n      } else {\n        return [[tr]];\n      }\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey();\n      const key = getRowIdentity(row, rowKey.value);\n      let cur = treeData.value[key];\n      let treeRowData = null;\n\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true\n        };\n\n        if (typeof cur.lazy === \"boolean\") {\n          if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n          }\n\n          treeRowData.loading = cur.loading;\n        }\n      }\n\n      const tmp = [rowRender(row, $index, treeRowData)];\n\n      if (cur) {\n        let i = 0;\n\n        const traverse = (children, parent2) => {\n          if (!(children && children.length && parent2)) return;\n          children.forEach(node => {\n            const innerTreeRowData = {\n              display: parent2.display && parent2.expanded,\n              level: parent2.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false\n            };\n            const childKey = getRowIdentity(node, rowKey.value);\n\n            if (childKey === void 0 || childKey === null) {\n              throw new Error(\"For nested data item, row-key is required.\");\n            }\n\n            cur = { ...treeData.value[childKey]\n            };\n\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded;\n              cur.level = cur.level || innerTreeRowData.level;\n              cur.display = !!(cur.expanded && innerTreeRowData.display);\n\n              if (typeof cur.lazy === \"boolean\") {\n                if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                }\n\n                innerTreeRowData.loading = cur.loading;\n              }\n            }\n\n            i++;\n            tmp.push(rowRender(node, $index + i, innerTreeRowData));\n\n            if (cur) {\n              const nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];\n              traverse(nodes2, cur);\n            }\n          });\n        };\n\n        cur.display = true;\n        const nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];\n        traverse(nodes, cur);\n      }\n\n      return tmp;\n    } else {\n      return rowRender(row, $index, void 0);\n    }\n  };\n\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger\n  };\n}\n\nexport { useRender as default };","map":{"version":3,"mappings":"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","names":["useRender","props","parent","inject","TABLE_INJECTION_KEY","ns","useNamespace","handleDoubleClick","handleClick","handleContextMenu","handleMouseEnter","handleMouseLeave","handleCellMouseEnter","handleCellMouseLeave","tooltipContent","tooltipTrigger","useEvents","getRowStyle","getRowClass","getCellStyle","getCellClass","getSpan","getColspanRealWidth","useStyles","firstDefaultColumnIndex","computed","store","states","columns","value","findIndex","type","getKeyOfRow","row","index","rowKey","getRowIdentity","rowRender","$index","treeRowData","expanded","tooltipEffect","indent","rowClasses","display","push","em","level","displayStyle","h","style","class","key","onDblclick","$event","onClick","onContextmenu","onMouseenter","onMouseleave","map","column","cellIndex","rowspan","colspan","columnData","realWidth","data","_self","context","treeNode","loading","noLazyChildren","baseKey","patchKey","columnKey","rawColumnKey","tdChildren","cellChildren","renderCell","wrappedRowRender","isRowExpanded","assertRowKey","treeData","lazyTreeNodeMap","childrenColumnName","hasExpandColumn","some","tr","renderExpanded","console","error","length","Object","keys","cur","lazy","loaded","children","tmp","i","traverse","parent2","forEach","node","innerTreeRowData","childKey","Error","nodes2","nodes"],"sources":["../../../../../../../packages/components/table/src/table-body/render-helper.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, h, inject } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { getRowIdentity } from '../util'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport useEvents from './events-helper'\nimport useStyles from './styles-helper'\nimport type { TableBodyProps } from './defaults'\nimport type { RenderRowData, TableProps, TreeNode } from '../table/defaults'\n\nfunction useRender<T>(props: Partial<TableBodyProps<T>>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const ns = useNamespace('table')\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger,\n  } = useEvents(props)\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n  } = useStyles(props)\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store.states.columns.value.findIndex(\n      ({ type }) => type === 'default'\n    )\n  })\n  const getKeyOfRow = (row: T, index: number) => {\n    const rowKey = (parent.props as Partial<TableProps<T>>).rowKey\n    if (rowKey) {\n      return getRowIdentity(row, rowKey)\n    }\n    return index\n  }\n  const rowRender = (\n    row: T,\n    $index: number,\n    treeRowData?: TreeNode,\n    expanded = false\n  ) => {\n    const { tooltipEffect, store } = props\n    const { indent, columns } = store.states\n    const rowClasses = getRowClass(row, $index)\n    let display = true\n    if (treeRowData) {\n      rowClasses.push(ns.em('row', `level-${treeRowData.level}`))\n      display = treeRowData.display\n    }\n    const displayStyle = display\n      ? null\n      : {\n          display: 'none',\n        }\n    return h(\n      'tr',\n      {\n        style: [displayStyle, getRowStyle(row, $index)],\n        class: rowClasses,\n        key: getKeyOfRow(row, $index),\n        onDblclick: ($event) => handleDoubleClick($event, row),\n        onClick: ($event) => handleClick($event, row),\n        onContextmenu: ($event) => handleContextMenu($event, row),\n        onMouseenter: () => handleMouseEnter($index),\n        onMouseleave: handleMouseLeave,\n      },\n      columns.value.map((column, cellIndex) => {\n        const { rowspan, colspan } = getSpan(row, column, $index, cellIndex)\n        if (!rowspan || !colspan) {\n          return null\n        }\n        const columnData = { ...column }\n        columnData.realWidth = getColspanRealWidth(\n          columns.value,\n          colspan,\n          cellIndex\n        )\n        const data: RenderRowData<T> = {\n          store: props.store,\n          _self: props.context || parent,\n          column: columnData,\n          row,\n          $index,\n          cellIndex,\n          expanded,\n        }\n        if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n          data.treeNode = {\n            indent: treeRowData.level * indent.value,\n            level: treeRowData.level,\n          }\n          if (typeof treeRowData.expanded === 'boolean') {\n            data.treeNode.expanded = treeRowData.expanded\n            // 表明是懒加载\n            if ('loading' in treeRowData) {\n              data.treeNode.loading = treeRowData.loading\n            }\n            if ('noLazyChildren' in treeRowData) {\n              data.treeNode.noLazyChildren = treeRowData.noLazyChildren\n            }\n          }\n        }\n        const baseKey = `${$index},${cellIndex}`\n        const patchKey = columnData.columnKey || columnData.rawColumnKey || ''\n        const tdChildren = cellChildren(cellIndex, column, data)\n        return h(\n          'td',\n          {\n            style: getCellStyle($index, cellIndex, row, column),\n            class: getCellClass($index, cellIndex, row, column),\n            key: `${patchKey}${baseKey}`,\n            rowspan,\n            colspan,\n            onMouseenter: ($event) =>\n              handleCellMouseEnter($event, { ...row, tooltipEffect }),\n            onMouseleave: handleCellMouseLeave,\n          },\n          [tdChildren]\n        )\n      })\n    )\n  }\n  const cellChildren = (cellIndex, column, data) => {\n    return column.renderCell(data)\n  }\n\n  const wrappedRowRender = (row: T, $index: number) => {\n    const store = props.store\n    const { isRowExpanded, assertRowKey } = store\n    const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey } =\n      store.states\n    const columns = store.states.columns.value\n    const hasExpandColumn = columns.some(({ type }) => type === 'expand')\n    if (hasExpandColumn) {\n      const expanded = isRowExpanded(row)\n      const tr = rowRender(row, $index, undefined, expanded)\n      const renderExpanded = parent.renderExpanded\n      if (expanded) {\n        if (!renderExpanded) {\n          console.error('[Element Error]renderExpanded is required.')\n          return tr\n        }\n        // 使用二维数组，避免修改 $index\n        // Use a matrix to avoid modifying $index\n        return [\n          [\n            tr,\n            h(\n              'tr',\n              {\n                key: `expanded-row__${tr.key as string}`,\n              },\n              [\n                h(\n                  'td',\n                  {\n                    colspan: columns.length,\n                    class: 'el-table__cell el-table__expanded-cell',\n                  },\n                  [renderExpanded({ row, $index, store, expanded })]\n                ),\n              ]\n            ),\n          ],\n        ]\n      } else {\n        // 使用二维数组，避免修改 $index\n        // Use a two dimensional array avoid modifying $index\n        return [[tr]]\n      }\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey()\n      // TreeTable 时，rowKey 必须由用户设定，不使用 getKeyOfRow 计算\n      // 在调用 rowRender 函数时，仍然会计算 rowKey，不太好的操作\n      const key = getRowIdentity(row, rowKey.value)\n      let cur = treeData.value[key]\n      let treeRowData = null\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true,\n        }\n        if (typeof cur.lazy === 'boolean') {\n          if (typeof cur.loaded === 'boolean' && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length)\n          }\n          treeRowData.loading = cur.loading\n        }\n      }\n      const tmp = [rowRender(row, $index, treeRowData)]\n      // 渲染嵌套数据\n      if (cur) {\n        // currentRow 记录的是 index，所以还需主动增加 TreeTable 的 index\n        let i = 0\n        const traverse = (children, parent) => {\n          if (!(children && children.length && parent)) return\n          children.forEach((node) => {\n            // 父节点的 display 状态影响子节点的显示状态\n            const innerTreeRowData = {\n              display: parent.display && parent.expanded,\n              level: parent.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false,\n            }\n            const childKey = getRowIdentity(node, rowKey.value)\n            if (childKey === undefined || childKey === null) {\n              throw new Error('For nested data item, row-key is required.')\n            }\n            cur = { ...treeData.value[childKey] }\n            // 对于当前节点，分成有无子节点两种情况。\n            // 如果包含子节点的，设置 expanded 属性。\n            // 对于它子节点的 display 属性由它本身的 expanded 与 display 共同决定。\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded\n              // 懒加载的某些节点，level 未知\n              cur.level = cur.level || innerTreeRowData.level\n              cur.display = !!(cur.expanded && innerTreeRowData.display)\n              if (typeof cur.lazy === 'boolean') {\n                if (typeof cur.loaded === 'boolean' && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(\n                    cur.children && cur.children.length\n                  )\n                }\n                innerTreeRowData.loading = cur.loading\n              }\n            }\n            i++\n            tmp.push(rowRender(node, $index + i, innerTreeRowData))\n            if (cur) {\n              const nodes =\n                lazyTreeNodeMap.value[childKey] ||\n                node[childrenColumnName.value]\n              traverse(nodes, cur)\n            }\n          })\n        }\n        // 对于 root 节点，display 一定为 true\n        cur.display = true\n        const nodes =\n          lazyTreeNodeMap.value[key] || row[childrenColumnName.value]\n        traverse(nodes, cur)\n      }\n      return tmp\n    } else {\n      return rowRender(row, $index, undefined)\n    }\n  }\n\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger,\n  }\n}\n\nexport default useRender\n"]},"metadata":{},"sourceType":"module"}