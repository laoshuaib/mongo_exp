{"ast":null,"code":"import { computed } from 'vue';\nimport { TinyColor } from '@ctrl/tinycolor';\nimport '../../../hooks/index.mjs';\nimport { useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nfunction darken(color, amount = 20) {\n  return color.mix(\"#141414\", amount).toString();\n}\n\nfunction useButtonCustomStyle(props) {\n  const _disabled = useDisabled();\n\n  const ns = useNamespace(\"button\");\n  return computed(() => {\n    let styles = {};\n    const buttonColor = props.color;\n\n    if (buttonColor) {\n      const color = new TinyColor(buttonColor);\n      const activeBgColor = props.dark ? color.tint(20).toString() : darken(color, 20);\n\n      if (props.plain) {\n        styles = ns.cssVarBlock({\n          \"bg-color\": props.dark ? darken(color, 90) : color.tint(90).toString(),\n          \"text-color\": buttonColor,\n          \"border-color\": props.dark ? darken(color, 50) : color.tint(50).toString(),\n          \"hover-text-color\": `var(${ns.cssVarName(\"color-white\")})`,\n          \"hover-bg-color\": buttonColor,\n          \"hover-border-color\": buttonColor,\n          \"active-bg-color\": activeBgColor,\n          \"active-text-color\": `var(${ns.cssVarName(\"color-white\")})`,\n          \"active-border-color\": activeBgColor\n        });\n\n        if (_disabled.value) {\n          styles[ns.cssVarBlockName(\"disabled-bg-color\")] = props.dark ? darken(color, 90) : color.tint(90).toString();\n          styles[ns.cssVarBlockName(\"disabled-text-color\")] = props.dark ? darken(color, 50) : color.tint(50).toString();\n          styles[ns.cssVarBlockName(\"disabled-border-color\")] = props.dark ? darken(color, 80) : color.tint(80).toString();\n        }\n      } else {\n        const hoverBgColor = props.dark ? darken(color, 30) : color.tint(30).toString();\n        const textColor = color.isDark() ? `var(${ns.cssVarName(\"color-white\")})` : `var(${ns.cssVarName(\"color-black\")})`;\n        styles = ns.cssVarBlock({\n          \"bg-color\": buttonColor,\n          \"text-color\": textColor,\n          \"border-color\": buttonColor,\n          \"hover-bg-color\": hoverBgColor,\n          \"hover-text-color\": textColor,\n          \"hover-border-color\": hoverBgColor,\n          \"active-bg-color\": activeBgColor,\n          \"active-border-color\": activeBgColor\n        });\n\n        if (_disabled.value) {\n          const disabledButtonColor = props.dark ? darken(color, 50) : color.tint(50).toString();\n          styles[ns.cssVarBlockName(\"disabled-bg-color\")] = disabledButtonColor;\n          styles[ns.cssVarBlockName(\"disabled-text-color\")] = props.dark ? \"rgba(255, 255, 255, 0.5)\" : `var(${ns.cssVarName(\"color-white\")})`;\n          styles[ns.cssVarBlockName(\"disabled-border-color\")] = disabledButtonColor;\n        }\n      }\n    }\n\n    return styles;\n  });\n}\n\nexport { darken, useButtonCustomStyle };","map":{"version":3,"mappings":"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","names":["darken","color","amount","mix","toString","useButtonCustomStyle","props","_disabled","useDisabled","ns","useNamespace","computed","styles","buttonColor","TinyColor","activeBgColor","dark","tint","plain","cssVarBlock","cssVarName","value","cssVarBlockName","hoverBgColor","textColor","isDark","disabledButtonColor"],"sources":["../../../../../../packages/components/button/src/button-custom.ts"],"sourcesContent":["import { computed } from 'vue'\nimport { TinyColor } from '@ctrl/tinycolor'\nimport { useDisabled, useNamespace } from '@element-plus/hooks'\nimport type { ButtonProps } from './button'\n\nexport function darken(color: TinyColor, amount = 20) {\n  return color.mix('#141414', amount).toString()\n}\n\nexport function useButtonCustomStyle(props: ButtonProps) {\n  const _disabled = useDisabled()\n  const ns = useNamespace('button')\n\n  // calculate hover & active color by custom color\n  // only work when custom color\n  return computed(() => {\n    let styles: Record<string, string> = {}\n\n    const buttonColor = props.color\n\n    if (buttonColor) {\n      const color = new TinyColor(buttonColor)\n      const activeBgColor = props.dark\n        ? color.tint(20).toString()\n        : darken(color, 20)\n\n      if (props.plain) {\n        styles = ns.cssVarBlock({\n          'bg-color': props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString(),\n          'text-color': buttonColor,\n          'border-color': props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString(),\n          'hover-text-color': `var(${ns.cssVarName('color-white')})`,\n          'hover-bg-color': buttonColor,\n          'hover-border-color': buttonColor,\n          'active-bg-color': activeBgColor,\n          'active-text-color': `var(${ns.cssVarName('color-white')})`,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          styles[ns.cssVarBlockName('disabled-bg-color')] = props.dark\n            ? darken(color, 90)\n            : color.tint(90).toString()\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-border-color')] = props.dark\n            ? darken(color, 80)\n            : color.tint(80).toString()\n        }\n      } else {\n        const hoverBgColor = props.dark\n          ? darken(color, 30)\n          : color.tint(30).toString()\n        const textColor = color.isDark()\n          ? `var(${ns.cssVarName('color-white')})`\n          : `var(${ns.cssVarName('color-black')})`\n        styles = ns.cssVarBlock({\n          'bg-color': buttonColor,\n          'text-color': textColor,\n          'border-color': buttonColor,\n          'hover-bg-color': hoverBgColor,\n          'hover-text-color': textColor,\n          'hover-border-color': hoverBgColor,\n          'active-bg-color': activeBgColor,\n          'active-border-color': activeBgColor,\n        })\n\n        if (_disabled.value) {\n          const disabledButtonColor = props.dark\n            ? darken(color, 50)\n            : color.tint(50).toString()\n          styles[ns.cssVarBlockName('disabled-bg-color')] = disabledButtonColor\n          styles[ns.cssVarBlockName('disabled-text-color')] = props.dark\n            ? 'rgba(255, 255, 255, 0.5)'\n            : `var(${ns.cssVarName('color-white')})`\n          styles[ns.cssVarBlockName('disabled-border-color')] =\n            disabledButtonColor\n        }\n      }\n    }\n\n    return styles\n  })\n}\n"]},"metadata":{},"sourceType":"module"}