{"ast":null,"code":"import '../../../utils/index.mjs';\nimport { isLeaf } from '../../../utils/dom/aria.mjs';\n\nconst getMenuIndex = el => {\n  if (!el) return 0;\n  const pieces = el.id.split(\"-\");\n  return Number(pieces[pieces.length - 2]);\n};\n\nconst checkNode = el => {\n  if (!el) return;\n  const input = el.querySelector(\"input\");\n\n  if (input) {\n    input.click();\n  } else if (isLeaf(el)) {\n    el.click();\n  }\n};\n\nconst sortByOriginalOrder = (oldNodes, newNodes) => {\n  const newNodesCopy = newNodes.slice(0);\n  const newIds = newNodesCopy.map(node => node.uid);\n  const res = oldNodes.reduce((acc, item) => {\n    const index = newIds.indexOf(item.uid);\n\n    if (index > -1) {\n      acc.push(item);\n      newNodesCopy.splice(index, 1);\n      newIds.splice(index, 1);\n    }\n\n    return acc;\n  }, []);\n  res.push(...newNodesCopy);\n  return res;\n};\n\nexport { checkNode, getMenuIndex, sortByOriginalOrder };","map":{"version":3,"mappings":";;;AACY,MAACA,YAAY,GAAIC,EAAD,IAAQ;EAClC,IAAI,CAACA,EAAL,EACE,OAAO,CAAP;EACF,MAAMC,MAAM,GAAGD,EAAE,CAACE,EAAH,CAAMC,KAAN,CAAY,GAAZ,CAAf;EACA,OAAOC,MAAM,CAACH,MAAM,CAACA,MAAM,CAACI,MAAP,GAAgB,CAAjB,CAAP,CAAb;AACF,CALY;;AAMA,MAACC,SAAS,GAAIN,EAAD,IAAQ;EAC/B,IAAI,CAACA,EAAL,EACE;EACF,MAAMO,KAAK,GAAGP,EAAE,CAACQ,aAAH,CAAiB,OAAjB,CAAd;;EACA,IAAID,KAAJ,EAAW;IACTA,KAAK,CAACE,KAAN;EACD,CAFD,MAEO,IAAIC,MAAM,CAACV,EAAD,CAAV,EAAgB;IACrBA,EAAE,CAACS,KAAH;EACD;AACH,CATY;;AAUA,MAACE,mBAAmB,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;EACzD,MAAMC,YAAY,GAAGD,QAAQ,CAACE,KAAT,CAAe,CAAf,CAArB;EACA,MAAMC,MAAM,GAAGF,YAAY,CAACG,GAAb,CAAkBC,IAAD,IAAUA,IAAI,CAACC,GAAhC,CAAf;EACA,MAAMC,GAAG,GAAGR,QAAQ,CAACS,MAAT,CAAgB,CAACC,GAAD,EAAMC,IAAN,KAAe;IACzC,MAAMC,KAAK,GAAGR,MAAM,CAACS,OAAP,CAAeF,IAAI,CAACJ,GAApB,CAAd;;IACA,IAAIK,KAAK,GAAG,CAAC,CAAb,EAAgB;MACdF,GAAG,CAACI,IAAJ,CAASH,IAAT;MACAT,YAAY,CAACa,MAAb,CAAoBH,KAApB,EAA2B,CAA3B;MACAR,MAAM,CAACW,MAAP,CAAcH,KAAd,EAAqB,CAArB;IACD;;IACD,OAAOF,GAAP;EACD,CARW,EAQT,EARS,CAAZ;EASAF,GAAG,CAACM,IAAJ,CAAS,GAAGZ,YAAZ;EACA,OAAOM,GAAP;AACF,CAdY","names":["getMenuIndex","el","pieces","id","split","Number","length","checkNode","input","querySelector","click","isLeaf","sortByOriginalOrder","oldNodes","newNodes","newNodesCopy","slice","newIds","map","node","uid","res","reduce","acc","item","index","indexOf","push","splice"],"sources":["../../../../../../packages/components/cascader-panel/src/utils.ts"],"sourcesContent":["// @ts-nocheck\nimport { isLeaf } from '@element-plus/utils'\nimport type { default as CascaderNode } from './node'\n\nexport const getMenuIndex = (el: HTMLElement) => {\n  if (!el) return 0\n  const pieces = el.id.split('-')\n  return Number(pieces[pieces.length - 2])\n}\n\nexport const checkNode = (el) => {\n  if (!el) return\n\n  const input = el.querySelector('input')\n  if (input) {\n    input.click()\n  } else if (isLeaf(el)) {\n    el.click()\n  }\n}\n\nexport const sortByOriginalOrder = (\n  oldNodes: CascaderNode[],\n  newNodes: CascaderNode[]\n) => {\n  const newNodesCopy = newNodes.slice(0)\n  const newIds = newNodesCopy.map((node) => node.uid)\n  const res = oldNodes.reduce((acc, item) => {\n    const index = newIds.indexOf(item.uid)\n    if (index > -1) {\n      acc.push(item)\n      newNodesCopy.splice(index, 1)\n      newIds.splice(index, 1)\n    }\n    return acc\n  }, [] as CascaderNode[])\n\n  res.push(...newNodesCopy)\n\n  return res\n}\n"]},"metadata":{},"sourceType":"module"}