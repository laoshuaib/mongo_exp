{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, unref, nextTick, onMounted, h, resolveDynamicComponent } from 'vue';\nimport { isNumber, isClient } from '@vueuse/core';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport ScrollBar from '../components/scrollbar.mjs';\nimport { useGridWheel } from '../hooks/use-grid-wheel.mjs';\nimport { useCache } from '../hooks/use-cache.mjs';\nimport { virtualizedGridProps } from '../props.mjs';\nimport { isRTL, getRTLOffsetType, getScrollDir } from '../utils.mjs';\nimport { ITEM_RENDER_EVT, SCROLL_EVT, FORWARD, BACKWARD, RTL_OFFSET_POS_DESC, RTL_OFFSET_NAG, AUTO_ALIGNMENT, RTL, RTL_OFFSET_POS_ASC } from '../defaults.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getScrollBarWidth } from '../../../../utils/dom/scroll.mjs';\nimport { hasOwn, isString } from '@vue/shared';\n\nconst createGrid = ({\n  name,\n  clearCache,\n  getColumnPosition,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getColumnOffset,\n  getRowOffset,\n  getRowPosition,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n  initCache,\n  injectToInstance,\n  validateProps\n}) => {\n  return defineComponent({\n    name: name != null ? name : \"ElVirtualList\",\n    props: virtualizedGridProps,\n    emits: [ITEM_RENDER_EVT, SCROLL_EVT],\n\n    setup(props, {\n      emit,\n      expose,\n      slots\n    }) {\n      const ns = useNamespace(\"vl\");\n      validateProps(props);\n      const instance = getCurrentInstance();\n      const cache = ref(initCache(props, instance));\n      injectToInstance == null ? void 0 : injectToInstance(instance, cache);\n      const windowRef = ref();\n      const hScrollbar = ref();\n      const vScrollbar = ref();\n      const innerRef = ref(null);\n      const states = ref({\n        isScrolling: false,\n        scrollLeft: isNumber(props.initScrollLeft) ? props.initScrollLeft : 0,\n        scrollTop: isNumber(props.initScrollTop) ? props.initScrollTop : 0,\n        updateRequested: false,\n        xAxisScrollDir: FORWARD,\n        yAxisScrollDir: FORWARD\n      });\n      const getItemStyleCache = useCache();\n      const parsedHeight = computed(() => Number.parseInt(`${props.height}`, 10));\n      const parsedWidth = computed(() => Number.parseInt(`${props.width}`, 10));\n      const columnsToRender = computed(() => {\n        const {\n          totalColumn,\n          totalRow,\n          columnCache\n        } = props;\n        const {\n          isScrolling,\n          xAxisScrollDir,\n          scrollLeft\n        } = unref(states);\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0];\n        }\n\n        const startIndex = getColumnStartIndexForOffset(props, scrollLeft, unref(cache));\n        const stopIndex = getColumnStopIndexForStartIndex(props, startIndex, scrollLeft, unref(cache));\n        const cacheBackward = !isScrolling || xAxisScrollDir === BACKWARD ? Math.max(1, columnCache) : 1;\n        const cacheForward = !isScrolling || xAxisScrollDir === FORWARD ? Math.max(1, columnCache) : 1;\n        return [Math.max(0, startIndex - cacheBackward), Math.max(0, Math.min(totalColumn - 1, stopIndex + cacheForward)), startIndex, stopIndex];\n      });\n      const rowsToRender = computed(() => {\n        const {\n          totalColumn,\n          totalRow,\n          rowCache\n        } = props;\n        const {\n          isScrolling,\n          yAxisScrollDir,\n          scrollTop\n        } = unref(states);\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0];\n        }\n\n        const startIndex = getRowStartIndexForOffset(props, scrollTop, unref(cache));\n        const stopIndex = getRowStopIndexForStartIndex(props, startIndex, scrollTop, unref(cache));\n        const cacheBackward = !isScrolling || yAxisScrollDir === BACKWARD ? Math.max(1, rowCache) : 1;\n        const cacheForward = !isScrolling || yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1;\n        return [Math.max(0, startIndex - cacheBackward), Math.max(0, Math.min(totalRow - 1, stopIndex + cacheForward)), startIndex, stopIndex];\n      });\n      const estimatedTotalHeight = computed(() => getEstimatedTotalHeight(props, unref(cache)));\n      const estimatedTotalWidth = computed(() => getEstimatedTotalWidth(props, unref(cache)));\n      const windowStyle = computed(() => {\n        var _a;\n\n        return [{\n          position: \"relative\",\n          overflow: \"hidden\",\n          WebkitOverflowScrolling: \"touch\",\n          willChange: \"transform\"\n        }, {\n          direction: props.direction,\n          height: isNumber(props.height) ? `${props.height}px` : props.height,\n          width: isNumber(props.width) ? `${props.width}px` : props.width\n        }, (_a = props.style) != null ? _a : {}];\n      });\n      const innerStyle = computed(() => {\n        const width = `${unref(estimatedTotalWidth)}px`;\n        const height = `${unref(estimatedTotalHeight)}px`;\n        return {\n          height,\n          pointerEvents: unref(states).isScrolling ? \"none\" : void 0,\n          width\n        };\n      });\n\n      const emitEvents = () => {\n        const {\n          totalColumn,\n          totalRow\n        } = props;\n\n        if (totalColumn > 0 && totalRow > 0) {\n          const [columnCacheStart, columnCacheEnd, columnVisibleStart, columnVisibleEnd] = unref(columnsToRender);\n          const [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd] = unref(rowsToRender);\n          emit(ITEM_RENDER_EVT, {\n            columnCacheStart,\n            columnCacheEnd,\n            rowCacheStart,\n            rowCacheEnd,\n            columnVisibleStart,\n            columnVisibleEnd,\n            rowVisibleStart,\n            rowVisibleEnd\n          });\n        }\n\n        const {\n          scrollLeft,\n          scrollTop,\n          updateRequested,\n          xAxisScrollDir,\n          yAxisScrollDir\n        } = unref(states);\n        emit(SCROLL_EVT, {\n          xAxisScrollDir,\n          scrollLeft,\n          yAxisScrollDir,\n          scrollTop,\n          updateRequested\n        });\n      };\n\n      const onScroll = e => {\n        const {\n          clientHeight,\n          clientWidth,\n          scrollHeight,\n          scrollLeft,\n          scrollTop,\n          scrollWidth\n        } = e.currentTarget;\n\n        const _states = unref(states);\n\n        if (_states.scrollTop === scrollTop && _states.scrollLeft === scrollLeft) {\n          return;\n        }\n\n        let _scrollLeft = scrollLeft;\n\n        if (isRTL(props.direction)) {\n          switch (getRTLOffsetType()) {\n            case RTL_OFFSET_NAG:\n              _scrollLeft = -scrollLeft;\n              break;\n\n            case RTL_OFFSET_POS_DESC:\n              _scrollLeft = scrollWidth - clientWidth - scrollLeft;\n              break;\n          }\n        }\n\n        states.value = { ..._states,\n          isScrolling: true,\n          scrollLeft: _scrollLeft,\n          scrollTop: Math.max(0, Math.min(scrollTop, scrollHeight - clientHeight)),\n          updateRequested: true,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop)\n        };\n        nextTick(() => resetIsScrolling());\n        onUpdated();\n        emitEvents();\n      };\n\n      const onVerticalScroll = (distance, totalSteps) => {\n        const height = unref(parsedHeight);\n        const offset = (estimatedTotalHeight.value - height) / totalSteps * distance;\n        scrollTo({\n          scrollTop: Math.min(estimatedTotalHeight.value - height, offset)\n        });\n      };\n\n      const onHorizontalScroll = (distance, totalSteps) => {\n        const width = unref(parsedWidth);\n        const offset = (estimatedTotalWidth.value - width) / totalSteps * distance;\n        scrollTo({\n          scrollLeft: Math.min(estimatedTotalWidth.value - width, offset)\n        });\n      };\n\n      const {\n        onWheel\n      } = useGridWheel({\n        atXStartEdge: computed(() => states.value.scrollLeft <= 0),\n        atXEndEdge: computed(() => states.value.scrollLeft >= estimatedTotalWidth.value),\n        atYStartEdge: computed(() => states.value.scrollTop <= 0),\n        atYEndEdge: computed(() => states.value.scrollTop >= estimatedTotalHeight.value)\n      }, (x, y) => {\n        var _a, _b, _c, _d;\n\n        (_b = (_a = hScrollbar.value) == null ? void 0 : _a.onMouseUp) == null ? void 0 : _b.call(_a);\n        (_d = (_c = hScrollbar.value) == null ? void 0 : _c.onMouseUp) == null ? void 0 : _d.call(_c);\n        const width = unref(parsedWidth);\n        const height = unref(parsedHeight);\n        scrollTo({\n          scrollLeft: Math.min(states.value.scrollLeft + x, estimatedTotalWidth.value - width),\n          scrollTop: Math.min(states.value.scrollTop + y, estimatedTotalHeight.value - height)\n        });\n      });\n\n      const scrollTo = ({\n        scrollLeft = states.value.scrollLeft,\n        scrollTop = states.value.scrollTop\n      }) => {\n        scrollLeft = Math.max(scrollLeft, 0);\n        scrollTop = Math.max(scrollTop, 0);\n\n        const _states = unref(states);\n\n        if (scrollTop === _states.scrollTop && scrollLeft === _states.scrollLeft) {\n          return;\n        }\n\n        states.value = { ..._states,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),\n          scrollLeft,\n          scrollTop,\n          updateRequested: true\n        };\n        nextTick(() => resetIsScrolling());\n        onUpdated();\n        emitEvents();\n      };\n\n      const scrollToItem = (rowIndex = 0, columnIdx = 0, alignment = AUTO_ALIGNMENT) => {\n        const _states = unref(states);\n\n        columnIdx = Math.max(0, Math.min(columnIdx, props.totalColumn - 1));\n        rowIndex = Math.max(0, Math.min(rowIndex, props.totalRow - 1));\n        const scrollBarWidth = getScrollBarWidth(ns.namespace.value);\n\n        const _cache = unref(cache);\n\n        const estimatedHeight = getEstimatedTotalHeight(props, _cache);\n        const estimatedWidth = getEstimatedTotalWidth(props, _cache);\n        scrollTo({\n          scrollLeft: getColumnOffset(props, columnIdx, alignment, _states.scrollLeft, _cache, estimatedWidth > props.width ? scrollBarWidth : 0),\n          scrollTop: getRowOffset(props, rowIndex, alignment, _states.scrollTop, _cache, estimatedHeight > props.height ? scrollBarWidth : 0)\n        });\n      };\n\n      const getItemStyle = (rowIndex, columnIndex) => {\n        const {\n          columnWidth,\n          direction,\n          rowHeight\n        } = props;\n        const itemStyleCache = getItemStyleCache.value(clearCache && columnWidth, clearCache && rowHeight, clearCache && direction);\n        const key = `${rowIndex},${columnIndex}`;\n\n        if (hasOwn(itemStyleCache, key)) {\n          return itemStyleCache[key];\n        } else {\n          const [, left] = getColumnPosition(props, columnIndex, unref(cache));\n\n          const _cache = unref(cache);\n\n          const rtl = isRTL(direction);\n          const [height, top] = getRowPosition(props, rowIndex, _cache);\n          const [width] = getColumnPosition(props, columnIndex, _cache);\n          itemStyleCache[key] = {\n            position: \"absolute\",\n            left: rtl ? void 0 : `${left}px`,\n            right: rtl ? `${left}px` : void 0,\n            top: `${top}px`,\n            height: `${height}px`,\n            width: `${width}px`\n          };\n          return itemStyleCache[key];\n        }\n      };\n\n      const resetIsScrolling = () => {\n        states.value.isScrolling = false;\n        nextTick(() => {\n          getItemStyleCache.value(-1, null, null);\n        });\n      };\n\n      onMounted(() => {\n        if (!isClient) return;\n        const {\n          initScrollLeft,\n          initScrollTop\n        } = props;\n        const windowElement = unref(windowRef);\n\n        if (windowElement) {\n          if (isNumber(initScrollLeft)) {\n            windowElement.scrollLeft = initScrollLeft;\n          }\n\n          if (isNumber(initScrollTop)) {\n            windowElement.scrollTop = initScrollTop;\n          }\n        }\n\n        emitEvents();\n      });\n\n      const onUpdated = () => {\n        const {\n          direction\n        } = props;\n        const {\n          scrollLeft,\n          scrollTop,\n          updateRequested\n        } = unref(states);\n        const windowElement = unref(windowRef);\n\n        if (updateRequested && windowElement) {\n          if (direction === RTL) {\n            switch (getRTLOffsetType()) {\n              case RTL_OFFSET_NAG:\n                {\n                  windowElement.scrollLeft = -scrollLeft;\n                  break;\n                }\n\n              case RTL_OFFSET_POS_ASC:\n                {\n                  windowElement.scrollLeft = scrollLeft;\n                  break;\n                }\n\n              default:\n                {\n                  const {\n                    clientWidth,\n                    scrollWidth\n                  } = windowElement;\n                  windowElement.scrollLeft = scrollWidth - clientWidth - scrollLeft;\n                  break;\n                }\n            }\n          } else {\n            windowElement.scrollLeft = Math.max(0, scrollLeft);\n          }\n\n          windowElement.scrollTop = Math.max(0, scrollTop);\n        }\n      };\n\n      const {\n        resetAfterColumnIndex,\n        resetAfterRowIndex,\n        resetAfter\n      } = instance.proxy;\n      expose({\n        windowRef,\n        innerRef,\n        getItemStyleCache,\n        scrollTo,\n        scrollToItem,\n        states,\n        resetAfterColumnIndex,\n        resetAfterRowIndex,\n        resetAfter\n      });\n\n      const renderScrollbars = () => {\n        const {\n          scrollbarAlwaysOn,\n          scrollbarStartGap,\n          scrollbarEndGap,\n          totalColumn,\n          totalRow\n        } = props;\n        const width = unref(parsedWidth);\n        const height = unref(parsedHeight);\n        const estimatedWidth = unref(estimatedTotalWidth);\n        const estimatedHeight = unref(estimatedTotalHeight);\n        const {\n          scrollLeft,\n          scrollTop\n        } = unref(states);\n        const horizontalScrollbar = h(ScrollBar, {\n          ref: hScrollbar,\n          alwaysOn: scrollbarAlwaysOn,\n          startGap: scrollbarStartGap,\n          endGap: scrollbarEndGap,\n          class: ns.e(\"horizontal\"),\n          clientSize: width,\n          layout: \"horizontal\",\n          onScroll: onHorizontalScroll,\n          ratio: width * 100 / estimatedWidth,\n          scrollFrom: scrollLeft / (estimatedWidth - width),\n          total: totalRow,\n          visible: true\n        });\n        const verticalScrollbar = h(ScrollBar, {\n          ref: vScrollbar,\n          alwaysOn: scrollbarAlwaysOn,\n          startGap: scrollbarStartGap,\n          endGap: scrollbarEndGap,\n          class: ns.e(\"vertical\"),\n          clientSize: height,\n          layout: \"vertical\",\n          onScroll: onVerticalScroll,\n          ratio: height * 100 / estimatedHeight,\n          scrollFrom: scrollTop / (estimatedHeight - height),\n          total: totalColumn,\n          visible: true\n        });\n        return {\n          horizontalScrollbar,\n          verticalScrollbar\n        };\n      };\n\n      const renderItems = () => {\n        var _a;\n\n        const [columnStart, columnEnd] = unref(columnsToRender);\n        const [rowStart, rowEnd] = unref(rowsToRender);\n        const {\n          data,\n          totalColumn,\n          totalRow,\n          useIsScrolling,\n          itemKey\n        } = props;\n        const children = [];\n\n        if (totalRow > 0 && totalColumn > 0) {\n          for (let row = rowStart; row <= rowEnd; row++) {\n            for (let column = columnStart; column <= columnEnd; column++) {\n              children.push((_a = slots.default) == null ? void 0 : _a.call(slots, {\n                columnIndex: column,\n                data,\n                key: itemKey({\n                  columnIndex: column,\n                  data,\n                  rowIndex: row\n                }),\n                isScrolling: useIsScrolling ? unref(states).isScrolling : void 0,\n                style: getItemStyle(row, column),\n                rowIndex: row\n              }));\n            }\n          }\n        }\n\n        return children;\n      };\n\n      const renderInner = () => {\n        const Inner = resolveDynamicComponent(props.innerElement);\n        const children = renderItems();\n        return [h(Inner, {\n          style: unref(innerStyle),\n          ref: innerRef\n        }, !isString(Inner) ? {\n          default: () => children\n        } : children)];\n      };\n\n      const renderWindow = () => {\n        const Container = resolveDynamicComponent(props.containerElement);\n        const {\n          horizontalScrollbar,\n          verticalScrollbar\n        } = renderScrollbars();\n        const Inner = renderInner();\n        return h(\"div\", {\n          key: 0,\n          class: ns.e(\"wrapper\")\n        }, [h(Container, {\n          class: props.className,\n          style: unref(windowStyle),\n          onScroll,\n          onWheel,\n          ref: windowRef\n        }, !isString(Container) ? {\n          default: () => Inner\n        } : Inner), horizontalScrollbar, verticalScrollbar]);\n      };\n\n      return renderWindow;\n    }\n\n  });\n};\n\nexport { createGrid as default };","map":{"version":3,"mappings":"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","names":["createGrid","name","clearCache","getColumnPosition","getColumnStartIndexForOffset","getColumnStopIndexForStartIndex","getEstimatedTotalHeight","getEstimatedTotalWidth","getColumnOffset","getRowOffset","getRowPosition","getRowStartIndexForOffset","getRowStopIndexForStartIndex","initCache","injectToInstance","validateProps","defineComponent","props","virtualizedGridProps","emits","ITEM_RENDER_EVT","SCROLL_EVT","setup","emit","expose","slots","ns","useNamespace","instance","getCurrentInstance","cache","ref","windowRef","hScrollbar","vScrollbar","innerRef","states","isScrolling","scrollLeft","isNumber","initScrollLeft","scrollTop","initScrollTop","updateRequested","xAxisScrollDir","FORWARD","yAxisScrollDir","getItemStyleCache","useCache","parsedHeight","computed","Number","parseInt","height","parsedWidth","width","columnsToRender","totalColumn","totalRow","columnCache","unref","startIndex","stopIndex","cacheBackward","BACKWARD","Math","max","cacheForward","min","rowsToRender","rowCache","estimatedTotalHeight","estimatedTotalWidth","windowStyle","_a","position","overflow","WebkitOverflowScrolling","willChange","direction","style","innerStyle","pointerEvents","emitEvents","columnCacheStart","columnCacheEnd","columnVisibleStart","columnVisibleEnd","rowCacheStart","rowCacheEnd","rowVisibleStart","rowVisibleEnd","onScroll","e","clientHeight","clientWidth","scrollHeight","scrollWidth","currentTarget","_states","_scrollLeft","isRTL","getRTLOffsetType","RTL_OFFSET_NAG","RTL_OFFSET_POS_DESC","value","getScrollDir","nextTick","resetIsScrolling","onUpdated","onVerticalScroll","distance","totalSteps","offset","scrollTo","onHorizontalScroll","onWheel","useGridWheel","atXStartEdge","atXEndEdge","atYStartEdge","atYEndEdge","x","y","_b","_c","_d","onMouseUp","call","scrollToItem","rowIndex","columnIdx","alignment","AUTO_ALIGNMENT","scrollBarWidth","getScrollBarWidth","namespace","_cache","estimatedHeight","estimatedWidth","getItemStyle","columnIndex","columnWidth","rowHeight","itemStyleCache","key","hasOwn","left","rtl","top","right","onMounted","isClient","windowElement","RTL","RTL_OFFSET_POS_ASC","resetAfterColumnIndex","resetAfterRowIndex","resetAfter","proxy","renderScrollbars","scrollbarAlwaysOn","scrollbarStartGap","scrollbarEndGap","horizontalScrollbar","h","Scrollbar","alwaysOn","startGap","endGap","class","clientSize","layout","ratio","scrollFrom","total","visible","verticalScrollbar","renderItems","columnStart","columnEnd","rowStart","rowEnd","data","useIsScrolling","itemKey","children","row","column","push","default","renderInner","Inner","resolveDynamicComponent","innerElement","isString","renderWindow","Container","containerElement","className"],"sources":["../../../../../../../packages/components/virtual-list/src/builders/build-grid.ts"],"sourcesContent":["// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  h,\n  nextTick,\n  onMounted,\n  ref,\n  resolveDynamicComponent,\n  unref,\n} from 'vue'\nimport { isClient } from '@vueuse/core'\nimport {\n  getScrollBarWidth,\n  hasOwn,\n  isNumber,\n  isString,\n} from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport Scrollbar from '../components/scrollbar'\nimport { useGridWheel } from '../hooks/use-grid-wheel'\nimport { useCache } from '../hooks/use-cache'\nimport { virtualizedGridProps } from '../props'\nimport { getRTLOffsetType, getScrollDir, isRTL } from '../utils'\nimport {\n  AUTO_ALIGNMENT,\n  BACKWARD,\n  FORWARD,\n  ITEM_RENDER_EVT,\n  RTL,\n  RTL_OFFSET_NAG,\n  RTL_OFFSET_POS_ASC,\n  RTL_OFFSET_POS_DESC,\n  SCROLL_EVT,\n} from '../defaults'\nimport type {\n  CSSProperties,\n  Ref,\n  StyleValue,\n  UnwrapRef,\n  VNode,\n  VNodeChild,\n} from 'vue'\nimport type {\n  Alignment,\n  GridConstructorProps,\n  GridScrollOptions,\n  ScrollbarExpose,\n} from '../types'\nimport type { VirtualizedGridProps } from '../props'\n\nconst createGrid = ({\n  name,\n  clearCache,\n  getColumnPosition,\n  getColumnStartIndexForOffset,\n  getColumnStopIndexForStartIndex,\n  getEstimatedTotalHeight,\n  getEstimatedTotalWidth,\n  getColumnOffset,\n  getRowOffset,\n  getRowPosition,\n  getRowStartIndexForOffset,\n  getRowStopIndexForStartIndex,\n\n  initCache,\n  injectToInstance,\n  validateProps,\n}: GridConstructorProps<VirtualizedGridProps>) => {\n  return defineComponent({\n    name: name ?? 'ElVirtualList',\n    props: virtualizedGridProps,\n    emits: [ITEM_RENDER_EVT, SCROLL_EVT],\n    setup(props, { emit, expose, slots }) {\n      const ns = useNamespace('vl')\n\n      validateProps(props)\n      const instance = getCurrentInstance()!\n      const cache = ref(initCache(props, instance))\n      injectToInstance?.(instance, cache)\n      // refs\n      // here windowRef and innerRef can be type of HTMLElement\n      // or user defined component type, depends on the type passed\n      // by user\n      const windowRef = ref<HTMLElement>()\n      const hScrollbar = ref<ScrollbarExpose>()\n      const vScrollbar = ref<ScrollbarExpose>()\n      // innerRef is the actual container element which contains all the elements\n      const innerRef = ref(null)\n      const states = ref({\n        isScrolling: false,\n        scrollLeft: isNumber(props.initScrollLeft) ? props.initScrollLeft : 0,\n        scrollTop: isNumber(props.initScrollTop) ? props.initScrollTop : 0,\n        updateRequested: false,\n        xAxisScrollDir: FORWARD,\n        yAxisScrollDir: FORWARD,\n      })\n\n      const getItemStyleCache = useCache()\n\n      // computed\n      const parsedHeight = computed(() =>\n        Number.parseInt(`${props.height}`, 10)\n      )\n      const parsedWidth = computed(() => Number.parseInt(`${props.width}`, 10))\n      const columnsToRender = computed(() => {\n        const { totalColumn, totalRow, columnCache } = props\n        const { isScrolling, xAxisScrollDir, scrollLeft } = unref(states)\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0]\n        }\n\n        const startIndex = getColumnStartIndexForOffset(\n          props,\n          scrollLeft,\n          unref(cache)\n        )\n        const stopIndex = getColumnStopIndexForStartIndex(\n          props,\n          startIndex,\n          scrollLeft,\n          unref(cache)\n        )\n\n        const cacheBackward =\n          !isScrolling || xAxisScrollDir === BACKWARD\n            ? Math.max(1, columnCache)\n            : 1\n        const cacheForward =\n          !isScrolling || xAxisScrollDir === FORWARD\n            ? Math.max(1, columnCache)\n            : 1\n\n        return [\n          Math.max(0, startIndex - cacheBackward),\n          Math.max(0, Math.min(totalColumn! - 1, stopIndex + cacheForward)),\n          startIndex,\n          stopIndex,\n        ]\n      })\n\n      const rowsToRender = computed(() => {\n        const { totalColumn, totalRow, rowCache } = props\n        const { isScrolling, yAxisScrollDir, scrollTop } = unref(states)\n\n        if (totalColumn === 0 || totalRow === 0) {\n          return [0, 0, 0, 0]\n        }\n\n        const startIndex = getRowStartIndexForOffset(\n          props,\n          scrollTop,\n          unref(cache)\n        )\n        const stopIndex = getRowStopIndexForStartIndex(\n          props,\n          startIndex,\n          scrollTop,\n          unref(cache)\n        )\n\n        const cacheBackward =\n          !isScrolling || yAxisScrollDir === BACKWARD\n            ? Math.max(1, rowCache)\n            : 1\n        const cacheForward =\n          !isScrolling || yAxisScrollDir === FORWARD ? Math.max(1, rowCache) : 1\n\n        return [\n          Math.max(0, startIndex - cacheBackward),\n          Math.max(0, Math.min(totalRow! - 1, stopIndex + cacheForward)),\n          startIndex,\n          stopIndex,\n        ]\n      })\n\n      const estimatedTotalHeight = computed(() =>\n        getEstimatedTotalHeight(props, unref(cache))\n      )\n      const estimatedTotalWidth = computed(() =>\n        getEstimatedTotalWidth(props, unref(cache))\n      )\n\n      const windowStyle = computed<StyleValue>(() => [\n        {\n          position: 'relative',\n          overflow: 'hidden',\n          WebkitOverflowScrolling: 'touch',\n          willChange: 'transform',\n        },\n        {\n          direction: props.direction,\n          height: isNumber(props.height) ? `${props.height}px` : props.height,\n          width: isNumber(props.width) ? `${props.width}px` : props.width,\n        },\n        props.style ?? {},\n      ])\n\n      const innerStyle = computed(() => {\n        const width = `${unref(estimatedTotalWidth)}px`\n        const height = `${unref(estimatedTotalHeight)}px`\n\n        return {\n          height,\n          pointerEvents: unref(states).isScrolling ? 'none' : undefined,\n          width,\n        }\n      })\n\n      // methods\n      const emitEvents = () => {\n        const { totalColumn, totalRow } = props\n\n        if (totalColumn! > 0 && totalRow! > 0) {\n          const [\n            columnCacheStart,\n            columnCacheEnd,\n            columnVisibleStart,\n            columnVisibleEnd,\n          ] = unref(columnsToRender)\n          const [rowCacheStart, rowCacheEnd, rowVisibleStart, rowVisibleEnd] =\n            unref(rowsToRender)\n          // emit the render item event with\n          // [xAxisInvisibleStart, xAxisInvisibleEnd, xAxisVisibleStart, xAxisVisibleEnd]\n          // [yAxisInvisibleStart, yAxisInvisibleEnd, yAxisVisibleStart, yAxisVisibleEnd]\n          emit(ITEM_RENDER_EVT, {\n            columnCacheStart,\n            columnCacheEnd,\n            rowCacheStart,\n            rowCacheEnd,\n            columnVisibleStart,\n            columnVisibleEnd,\n            rowVisibleStart,\n            rowVisibleEnd,\n          })\n        }\n\n        const {\n          scrollLeft,\n          scrollTop,\n          updateRequested,\n          xAxisScrollDir,\n          yAxisScrollDir,\n        } = unref(states)\n        emit(SCROLL_EVT, {\n          xAxisScrollDir,\n          scrollLeft,\n          yAxisScrollDir,\n          scrollTop,\n          updateRequested,\n        })\n      }\n\n      const onScroll = (e: Event) => {\n        const {\n          clientHeight,\n          clientWidth,\n          scrollHeight,\n          scrollLeft,\n          scrollTop,\n          scrollWidth,\n        } = e.currentTarget as HTMLElement\n\n        const _states = unref(states)\n\n        if (\n          _states.scrollTop === scrollTop &&\n          _states.scrollLeft === scrollLeft\n        ) {\n          return\n        }\n\n        let _scrollLeft = scrollLeft\n\n        if (isRTL(props.direction)) {\n          switch (getRTLOffsetType()) {\n            case RTL_OFFSET_NAG:\n              _scrollLeft = -scrollLeft\n              break\n            case RTL_OFFSET_POS_DESC:\n              _scrollLeft = scrollWidth - clientWidth - scrollLeft\n              break\n          }\n        }\n\n        states.value = {\n          ..._states,\n          isScrolling: true,\n          scrollLeft: _scrollLeft,\n          scrollTop: Math.max(\n            0,\n            Math.min(scrollTop, scrollHeight - clientHeight)\n          ),\n          updateRequested: true,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, _scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),\n        }\n\n        nextTick(() => resetIsScrolling())\n\n        onUpdated()\n        emitEvents()\n      }\n\n      const onVerticalScroll = (distance: number, totalSteps: number) => {\n        const height = unref(parsedHeight)\n        const offset =\n          ((estimatedTotalHeight.value - height) / totalSteps) * distance\n        scrollTo({\n          scrollTop: Math.min(estimatedTotalHeight.value - height, offset),\n        })\n      }\n\n      const onHorizontalScroll = (distance: number, totalSteps: number) => {\n        const width = unref(parsedWidth)\n        const offset =\n          ((estimatedTotalWidth.value - width) / totalSteps) * distance\n        scrollTo({\n          scrollLeft: Math.min(estimatedTotalWidth.value - width, offset),\n        })\n      }\n\n      const { onWheel } = useGridWheel(\n        {\n          atXStartEdge: computed(() => states.value.scrollLeft <= 0),\n          atXEndEdge: computed(\n            () => states.value.scrollLeft >= estimatedTotalWidth.value\n          ),\n          atYStartEdge: computed(() => states.value.scrollTop <= 0),\n          atYEndEdge: computed(\n            () => states.value.scrollTop >= estimatedTotalHeight.value\n          ),\n        },\n        (x: number, y: number) => {\n          hScrollbar.value?.onMouseUp?.()\n          hScrollbar.value?.onMouseUp?.()\n          const width = unref(parsedWidth)\n          const height = unref(parsedHeight)\n          scrollTo({\n            scrollLeft: Math.min(\n              states.value.scrollLeft + x,\n              estimatedTotalWidth.value - width\n            ),\n            scrollTop: Math.min(\n              states.value.scrollTop + y,\n              estimatedTotalHeight.value - height\n            ),\n          })\n        }\n      )\n\n      const scrollTo = ({\n        scrollLeft = states.value.scrollLeft,\n        scrollTop = states.value.scrollTop,\n      }: GridScrollOptions) => {\n        scrollLeft = Math.max(scrollLeft, 0)\n        scrollTop = Math.max(scrollTop, 0)\n        const _states = unref(states)\n        if (\n          scrollTop === _states.scrollTop &&\n          scrollLeft === _states.scrollLeft\n        ) {\n          return\n        }\n\n        states.value = {\n          ..._states,\n          xAxisScrollDir: getScrollDir(_states.scrollLeft, scrollLeft),\n          yAxisScrollDir: getScrollDir(_states.scrollTop, scrollTop),\n          scrollLeft,\n          scrollTop,\n          updateRequested: true,\n        }\n\n        nextTick(() => resetIsScrolling())\n\n        onUpdated()\n        emitEvents()\n      }\n\n      const scrollToItem = (\n        rowIndex = 0,\n        columnIdx = 0,\n        alignment: Alignment = AUTO_ALIGNMENT\n      ) => {\n        const _states = unref(states)\n        columnIdx = Math.max(0, Math.min(columnIdx, props.totalColumn! - 1))\n        rowIndex = Math.max(0, Math.min(rowIndex, props.totalRow! - 1))\n        const scrollBarWidth = getScrollBarWidth(ns.namespace.value)\n\n        const _cache = unref(cache)\n        const estimatedHeight = getEstimatedTotalHeight(props, _cache)\n        const estimatedWidth = getEstimatedTotalWidth(props, _cache)\n\n        scrollTo({\n          scrollLeft: getColumnOffset(\n            props,\n            columnIdx,\n            alignment,\n            _states.scrollLeft,\n            _cache,\n            estimatedWidth > props.width! ? scrollBarWidth : 0\n          ),\n          scrollTop: getRowOffset(\n            props,\n            rowIndex,\n            alignment,\n            _states.scrollTop,\n            _cache,\n            estimatedHeight > props.height! ? scrollBarWidth : 0\n          ),\n        })\n      }\n\n      const getItemStyle = (\n        rowIndex: number,\n        columnIndex: number\n      ): CSSProperties => {\n        const { columnWidth, direction, rowHeight } = props\n        const itemStyleCache = getItemStyleCache.value(\n          clearCache && columnWidth,\n          clearCache && rowHeight,\n          clearCache && direction\n        )\n        // since there was no need to introduce an nested array into cache object\n        // we use row,column to construct the key for indexing the map.\n        const key = `${rowIndex},${columnIndex}`\n\n        if (hasOwn(itemStyleCache, key)) {\n          return itemStyleCache[key]\n        } else {\n          const [, left] = getColumnPosition(props, columnIndex, unref(cache))\n          const _cache = unref(cache)\n\n          const rtl = isRTL(direction)\n          const [height, top] = getRowPosition(props, rowIndex, _cache)\n          const [width] = getColumnPosition(props, columnIndex, _cache)\n\n          itemStyleCache[key] = {\n            position: 'absolute',\n            left: rtl ? undefined : `${left}px`,\n            right: rtl ? `${left}px` : undefined,\n            top: `${top}px`,\n            height: `${height}px`,\n            width: `${width}px`,\n          }\n\n          return itemStyleCache[key]\n        }\n      }\n\n      // TODO: debounce setting is scrolling.\n\n      const resetIsScrolling = () => {\n        // timer = null\n\n        states.value.isScrolling = false\n        nextTick(() => {\n          getItemStyleCache.value(-1, null, null)\n        })\n      }\n\n      // life cycles\n      onMounted(() => {\n        // for SSR\n        if (!isClient) return\n        const { initScrollLeft, initScrollTop } = props\n        const windowElement = unref(windowRef)\n        if (windowElement) {\n          if (isNumber(initScrollLeft)) {\n            windowElement.scrollLeft = initScrollLeft\n          }\n          if (isNumber(initScrollTop)) {\n            windowElement.scrollTop = initScrollTop\n          }\n        }\n        emitEvents()\n      })\n\n      const onUpdated = () => {\n        const { direction } = props\n        const { scrollLeft, scrollTop, updateRequested } = unref(states)\n\n        const windowElement = unref(windowRef)\n        if (updateRequested && windowElement) {\n          if (direction === RTL) {\n            switch (getRTLOffsetType()) {\n              case RTL_OFFSET_NAG: {\n                windowElement.scrollLeft = -scrollLeft\n                break\n              }\n              case RTL_OFFSET_POS_ASC: {\n                windowElement.scrollLeft = scrollLeft\n                break\n              }\n              default: {\n                const { clientWidth, scrollWidth } = windowElement\n                windowElement.scrollLeft =\n                  scrollWidth - clientWidth - scrollLeft\n                break\n              }\n            }\n          } else {\n            windowElement.scrollLeft = Math.max(0, scrollLeft)\n          }\n\n          windowElement.scrollTop = Math.max(0, scrollTop)\n        }\n      }\n\n      const { resetAfterColumnIndex, resetAfterRowIndex, resetAfter } =\n        instance.proxy as any\n\n      expose({\n        windowRef,\n        innerRef,\n        getItemStyleCache,\n        scrollTo,\n        scrollToItem,\n        states,\n        resetAfterColumnIndex,\n        resetAfterRowIndex,\n        resetAfter,\n      })\n\n      // rendering part\n\n      const renderScrollbars = () => {\n        const {\n          scrollbarAlwaysOn,\n          scrollbarStartGap,\n          scrollbarEndGap,\n          totalColumn,\n          totalRow,\n        } = props\n\n        const width = unref(parsedWidth)\n        const height = unref(parsedHeight)\n        const estimatedWidth = unref(estimatedTotalWidth)\n        const estimatedHeight = unref(estimatedTotalHeight)\n        const { scrollLeft, scrollTop } = unref(states)\n        const horizontalScrollbar = h(Scrollbar, {\n          ref: hScrollbar,\n          alwaysOn: scrollbarAlwaysOn,\n          startGap: scrollbarStartGap,\n          endGap: scrollbarEndGap,\n          class: ns.e('horizontal'),\n          clientSize: width,\n          layout: 'horizontal',\n          onScroll: onHorizontalScroll,\n          ratio: (width * 100) / estimatedWidth,\n          scrollFrom: scrollLeft / (estimatedWidth - width),\n          total: totalRow,\n          visible: true,\n        })\n\n        const verticalScrollbar = h(Scrollbar, {\n          ref: vScrollbar,\n          alwaysOn: scrollbarAlwaysOn,\n          startGap: scrollbarStartGap,\n          endGap: scrollbarEndGap,\n          class: ns.e('vertical'),\n          clientSize: height,\n          layout: 'vertical',\n          onScroll: onVerticalScroll,\n          ratio: (height * 100) / estimatedHeight,\n          scrollFrom: scrollTop / (estimatedHeight - height),\n\n          total: totalColumn,\n          visible: true,\n        })\n\n        return {\n          horizontalScrollbar,\n          verticalScrollbar,\n        }\n      }\n\n      const renderItems = () => {\n        const [columnStart, columnEnd] = unref(columnsToRender)\n        const [rowStart, rowEnd] = unref(rowsToRender)\n        const { data, totalColumn, totalRow, useIsScrolling, itemKey } = props\n        const children: VNodeChild[] = []\n        if (totalRow > 0 && totalColumn > 0) {\n          for (let row = rowStart; row <= rowEnd; row++) {\n            for (let column = columnStart; column <= columnEnd; column++) {\n              children.push(\n                slots.default?.({\n                  columnIndex: column,\n                  data,\n                  key: itemKey({ columnIndex: column, data, rowIndex: row }),\n                  isScrolling: useIsScrolling\n                    ? unref(states).isScrolling\n                    : undefined,\n                  style: getItemStyle(row, column),\n                  rowIndex: row,\n                })\n              )\n            }\n          }\n        }\n        return children\n      }\n\n      const renderInner = () => {\n        const Inner = resolveDynamicComponent(props.innerElement) as VNode\n        const children = renderItems()\n        return [\n          h(\n            Inner,\n            {\n              style: unref(innerStyle),\n              ref: innerRef,\n            },\n            !isString(Inner)\n              ? {\n                  default: () => children,\n                }\n              : children\n          ),\n        ]\n      }\n\n      const renderWindow = () => {\n        const Container = resolveDynamicComponent(\n          props.containerElement\n        ) as VNode\n        const { horizontalScrollbar, verticalScrollbar } = renderScrollbars()\n        const Inner = renderInner()\n\n        return h(\n          'div',\n          {\n            key: 0,\n            class: ns.e('wrapper'),\n          },\n          [\n            h(\n              Container,\n              {\n                class: props.className,\n                style: unref(windowStyle),\n                onScroll,\n                onWheel,\n                ref: windowRef,\n              },\n              !isString(Container) ? { default: () => Inner } : Inner\n            ),\n            horizontalScrollbar,\n            verticalScrollbar,\n          ]\n        )\n      }\n\n      return renderWindow\n    },\n  })\n}\n\nexport default createGrid\n\ntype Dir = typeof FORWARD | typeof BACKWARD\n\nexport type GridInstance = InstanceType<ReturnType<typeof createGrid>> &\n  UnwrapRef<{\n    windowRef: Ref<HTMLElement>\n    innerRef: Ref<HTMLElement>\n    getItemStyleCache: ReturnType<typeof useCache>\n    scrollTo: (scrollOptions: GridScrollOptions) => void\n    scrollToItem: (\n      rowIndex: number,\n      columnIndex: number,\n      alignment: Alignment\n    ) => void\n    states: Ref<{\n      isScrolling: boolean\n      scrollLeft: number\n      scrollTop: number\n      updateRequested: boolean\n      xAxisScrollDir: Dir\n      yAxisScrollDir: Dir\n    }>\n  }>\n"]},"metadata":{},"sourceType":"module"}