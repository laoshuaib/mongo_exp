{"ast":null,"code":"import { defineComponent, ref, computed, unref, nextTick, onMounted, watch, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../directives/index.mjs';\nimport { ElScrollbar } from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport '../../../../hooks/index.mjs';\nimport { timeUnits } from '../constants.mjs';\nimport { buildTimeList } from '../utils.mjs';\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner.mjs';\nimport { getTimeLists } from '../composables/use-time-picker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport RepeatClick from '../../../../directives/repeat-click/index.mjs';\nconst _hoisted_1 = [\"onClick\"];\nconst _hoisted_2 = [\"onMouseenter\"];\n\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-time-spinner\",\n  props: basicTimeSpinnerProps,\n  emits: [\"change\", \"select-range\", \"set-option\"],\n\n  setup(__props, {\n    emit\n  }) {\n    const props = __props;\n    const ns = useNamespace(\"time\");\n    const {\n      getHoursList,\n      getMinutesList,\n      getSecondsList\n    } = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds);\n    let isScrolling = false;\n    const currentScrollbar = ref();\n    const listHoursRef = ref();\n    const listMinutesRef = ref();\n    const listSecondsRef = ref();\n    const listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    const spinnerItems = computed(() => {\n      return props.showSeconds ? timeUnits : timeUnits.slice(0, 2);\n    });\n    const timePartials = computed(() => {\n      const {\n        spinnerDate\n      } = props;\n      const hours = spinnerDate.hour();\n      const minutes = spinnerDate.minute();\n      const seconds = spinnerDate.second();\n      return {\n        hours,\n        minutes,\n        seconds\n      };\n    });\n    const timeList = computed(() => {\n      const {\n        hours,\n        minutes\n      } = unref(timePartials);\n      return {\n        hours: getHoursList(props.role),\n        minutes: getMinutesList(hours, props.role),\n        seconds: getSecondsList(hours, minutes, props.role)\n      };\n    });\n    const arrowControlTimeList = computed(() => {\n      const {\n        hours,\n        minutes,\n        seconds\n      } = unref(timePartials);\n      return {\n        hours: buildTimeList(hours, 23),\n        minutes: buildTimeList(minutes, 59),\n        seconds: buildTimeList(seconds, 59)\n      };\n    });\n    const debouncedResetScroll = debounce(type => {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n\n    const getAmPmFlag = hour => {\n      const shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      const isCapital = props.amPmMode === \"A\";\n      let content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n\n    const emitSelectRange = type => {\n      let range;\n\n      switch (type) {\n        case \"hours\":\n          range = [0, 2];\n          break;\n\n        case \"minutes\":\n          range = [3, 5];\n          break;\n\n        case \"seconds\":\n          range = [6, 8];\n          break;\n      }\n\n      const [left, right] = range;\n      emit(\"select-range\", left, right);\n      currentScrollbar.value = type;\n    };\n\n    const adjustCurrentSpinner = type => {\n      adjustSpinner(type, unref(timePartials)[type]);\n    };\n\n    const adjustSpinners = () => {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n\n    const getScrollbarElement = el => el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`);\n\n    const adjustSpinner = (type, value) => {\n      if (props.arrowControl) return;\n      const scrollbar = unref(listRefsMap[type]);\n\n      if (scrollbar && scrollbar.$el) {\n        getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n\n    const typeItemHeight = type => {\n      const scrollbar = unref(listRefsMap[type]);\n      return (scrollbar == null ? void 0 : scrollbar.$el.querySelector(\"li\").offsetHeight) || 0;\n    };\n\n    const onIncrement = () => {\n      scrollDown(1);\n    };\n\n    const onDecrement = () => {\n      scrollDown(-1);\n    };\n\n    const scrollDown = step => {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n\n      const label = currentScrollbar.value;\n      let now = unref(timePartials)[label];\n      const total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      now = (now + step + total) % total;\n      modifyDateField(label, now);\n      adjustSpinner(label, now);\n      nextTick(() => emitSelectRange(label));\n    };\n\n    const modifyDateField = (type, value) => {\n      const list = unref(timeList)[type];\n      const isDisabled = list[value];\n      if (isDisabled) return;\n      const {\n        hours,\n        minutes,\n        seconds\n      } = unref(timePartials);\n      let changeTo;\n\n      switch (type) {\n        case \"hours\":\n          changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);\n          break;\n\n        case \"minutes\":\n          changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);\n          break;\n\n        case \"seconds\":\n          changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);\n          break;\n      }\n\n      emit(\"change\", changeTo);\n    };\n\n    const handleClick = (type, {\n      value,\n      disabled\n    }) => {\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n\n    const handleScroll = type => {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      const value = Math.min(Math.round((getScrollbarElement(unref(listRefsMap[type]).$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n\n    const scrollBarHeight = type => {\n      return unref(listRefsMap[type]).$el.offsetHeight;\n    };\n\n    const bindScrollEvent = () => {\n      const bindFunction = type => {\n        const scrollbar = unref(listRefsMap[type]);\n\n        if (scrollbar && scrollbar.$el) {\n          getScrollbarElement(scrollbar.$el).onscroll = () => {\n            handleScroll(type);\n          };\n        }\n      };\n\n      bindFunction(\"hours\");\n      bindFunction(\"minutes\");\n      bindFunction(\"seconds\");\n    };\n\n    onMounted(() => {\n      nextTick(() => {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n\n    const setRef = (scrollbar, type) => {\n      listRefsMap[type].value = scrollbar;\n    };\n\n    emit(\"set-option\", [`${props.role}_scrollDown`, scrollDown]);\n    emit(\"set-option\", [`${props.role}_emitSelectRange`, emitSelectRange]);\n    watch(() => props.spinnerDate, () => {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass([unref(ns).b(\"spinner\"), {\n          \"has-seconds\": _ctx.showSeconds\n        }])\n      }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(unref(spinnerItems), item => {\n        return openBlock(), createBlock(unref(ElScrollbar), {\n          key: item,\n          ref_for: true,\n          ref: scollbar => setRef(scollbar, item),\n          class: normalizeClass(unref(ns).be(\"spinner\", \"wrapper\")),\n          \"wrap-style\": \"max-height: inherit;\",\n          \"view-class\": unref(ns).be(\"spinner\", \"list\"),\n          noresize: \"\",\n          tag: \"ul\",\n          onMouseenter: $event => emitSelectRange(item),\n          onMousemove: $event => adjustCurrentSpinner(item)\n        }, {\n          default: withCtx(() => [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(timeList)[item], (disabled, key) => {\n            return openBlock(), createElementBlock(\"li\", {\n              key,\n              class: normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", key === unref(timePartials)[item]), unref(ns).is(\"disabled\", disabled)]),\n              onClick: $event => handleClick(item, {\n                value: key,\n                disabled\n              })\n            }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n              key: 0\n            }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(getAmPmFlag(key)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n              key: 1\n            }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 64))], 10, _hoisted_1);\n          }), 128))]),\n          _: 2\n        }, 1032, [\"class\", \"view-class\", \"onMouseenter\", \"onMousemove\"]);\n      }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 1\n      }, renderList(unref(spinnerItems), item => {\n        return openBlock(), createElementBlock(\"div\", {\n          key: item,\n          class: normalizeClass([unref(ns).be(\"spinner\", \"wrapper\"), unref(ns).is(\"arrow\")]),\n          onMouseenter: $event => emitSelectRange(item)\n        }, [withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          class: normalizeClass([\"arrow-up\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(ArrowUp))]),\n          _: 1\n        }, 8, [\"class\"])), [[unref(RepeatClick), onDecrement]]), withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          class: normalizeClass([\"arrow-down\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          default: withCtx(() => [createVNode(unref(ArrowDown))]),\n          _: 1\n        }, 8, [\"class\"])), [[unref(RepeatClick), onIncrement]]), createElementVNode(\"ul\", {\n          class: normalizeClass(unref(ns).be(\"spinner\", \"list\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(arrowControlTimeList)[item], (time, key) => {\n          return openBlock(), createElementBlock(\"li\", {\n            key,\n            class: normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", time === unref(timePartials)[item]), unref(ns).is(\"disabled\", unref(timeList)[item][time])])\n          }, [typeof time === \"number\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(getAmPmFlag(time)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 64))], 64)) : createCommentVNode(\"v-if\", true)], 2);\n        }), 128))], 2)], 42, _hoisted_2);\n      }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n\n});\n\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue\"]]);\n\nexport { TimeSpinner as default };","map":{"version":3,"mappings":"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","names":["useNamespace","getHoursList","getMinutesList","getSecondsList","getTimeLists","props","disabledHours","disabledMinutes","disabledSeconds","isScrolling","currentScrollbar","ref","listHoursRef","listMinutesRef","listSecondsRef","listRefsMap","hours","minutes","seconds","computed","showSeconds","timeUnits","spinnerDate","hour","minute","second","unref","timePartials","role","buildTimeList","debounce","type","adjustCurrentSpinner","shouldShowAmPm","amPmMode","content","toUpperCase","range","left","right","emit","value","adjustSpinner","adjustSpinners","el","querySelector","namespace","scrollbar","$el","getScrollbarElement","scrollTop","Math","max","typeItemHeight","offsetHeight","onIncrement","scrollDown","onDecrement","step","emitSelectRange","label","total","now","modifyDateField","nextTick","isDisabled","list","changeTo","handleClick","disabled","debouncedResetScroll","min","round","bindScrollEvent","onscroll","handleScroll","bindFunction","onMounted","arrowControl","watch"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b('spinner'), { 'has-seconds': showSeconds }]\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scollbar: unknown) => setRef(scollbar as any, item)\"\n        :class=\"ns.be('spinner', 'wrapper')\"\n        wrap-style=\"max-height: inherit;\"\n        :view-class=\"ns.be('spinner', 'list')\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in timeList[item]\"\n          :key=\"key\"\n          :class=\"[\n            ns.be('spinner', 'item'),\n            ns.is('active', key === timePartials[item]),\n            ns.is('disabled', disabled),\n          ]\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :class=\"[ns.be('spinner', 'wrapper'), ns.is('arrow')]\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecrement\"\n          :class=\"['arrow-up', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncrement\"\n          :class=\"['arrow-down', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul :class=\"ns.be('spinner', 'list')\">\n          <li\n            v-for=\"(time, key) in arrowControlTimeList[item]\"\n            :key=\"key\"\n            :class=\"[\n              ns.be('spinner', 'item'),\n              ns.is('active', time === timePartials[item]),\n              ns.is('disabled', timeList[item][time!]),\n            ]\"\n          >\n            <template v-if=\"typeof time === 'number'\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, unref, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { RepeatClick as vRepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { timeUnits } from '../constants'\nimport { buildTimeList } from '../utils'\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner'\nimport { getTimeLists } from '../composables/use-time-picker'\n\nimport type { Ref } from 'vue'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type { TimeUnit } from '../constants'\nimport type { TimeList } from '../utils'\n\nconst props = defineProps(basicTimeSpinnerProps)\nconst emit = defineEmits(['change', 'select-range', 'set-option'])\n\nconst ns = useNamespace('time')\n\nconst { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n  props.disabledHours,\n  props.disabledMinutes,\n  props.disabledSeconds\n)\n\n// data\nlet isScrolling = false\n\nconst currentScrollbar = ref<TimeUnit>()\nconst listHoursRef = ref<ScrollbarInstance>()\nconst listMinutesRef = ref<ScrollbarInstance>()\nconst listSecondsRef = ref<ScrollbarInstance>()\nconst listRefsMap: Record<TimeUnit, Ref<ScrollbarInstance | undefined>> = {\n  hours: listHoursRef,\n  minutes: listMinutesRef,\n  seconds: listSecondsRef,\n}\n\n// computed\nconst spinnerItems = computed(() => {\n  return props.showSeconds ? timeUnits : timeUnits.slice(0, 2)\n})\n\nconst timePartials = computed<Record<TimeUnit, number>>(() => {\n  const { spinnerDate } = props\n  const hours = spinnerDate.hour()\n  const minutes = spinnerDate.minute()\n  const seconds = spinnerDate.second()\n  return { hours, minutes, seconds }\n})\n\nconst timeList = computed(() => {\n  const { hours, minutes } = unref(timePartials)\n  return {\n    hours: getHoursList(props.role),\n    minutes: getMinutesList(hours, props.role),\n    seconds: getSecondsList(hours, minutes, props.role),\n  }\n})\n\nconst arrowControlTimeList = computed<Record<TimeUnit, TimeList>>(() => {\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  return {\n    hours: buildTimeList(hours, 23),\n    minutes: buildTimeList(minutes, 59),\n    seconds: buildTimeList(seconds, 59),\n  }\n})\n\nconst debouncedResetScroll = debounce((type) => {\n  isScrolling = false\n  adjustCurrentSpinner(type)\n}, 200)\n\nconst getAmPmFlag = (hour: number) => {\n  const shouldShowAmPm = !!props.amPmMode\n  if (!shouldShowAmPm) return ''\n  const isCapital = props.amPmMode === 'A'\n  // todo locale\n  let content = hour < 12 ? ' am' : ' pm'\n  if (isCapital) content = content.toUpperCase()\n  return content\n}\n\nconst emitSelectRange = (type: TimeUnit) => {\n  let range\n\n  switch (type) {\n    case 'hours':\n      range = [0, 2]\n      break\n    case 'minutes':\n      range = [3, 5]\n      break\n    case 'seconds':\n      range = [6, 8]\n      break\n  }\n  const [left, right] = range\n\n  emit('select-range', left, right)\n  currentScrollbar.value = type\n}\n\nconst adjustCurrentSpinner = (type: TimeUnit) => {\n  adjustSpinner(type, unref(timePartials)[type])\n}\n\nconst adjustSpinners = () => {\n  adjustCurrentSpinner('hours')\n  adjustCurrentSpinner('minutes')\n  adjustCurrentSpinner('seconds')\n}\n\nconst getScrollbarElement = (el: HTMLElement) =>\n  el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`) as HTMLElement\n\nconst adjustSpinner = (type: TimeUnit, value: number) => {\n  if (props.arrowControl) return\n  const scrollbar = unref(listRefsMap[type])\n  if (scrollbar && scrollbar.$el) {\n    getScrollbarElement(scrollbar.$el).scrollTop = Math.max(\n      0,\n      value * typeItemHeight(type)\n    )\n  }\n}\n\nconst typeItemHeight = (type: TimeUnit): number => {\n  const scrollbar = unref(listRefsMap[type])\n  return scrollbar?.$el.querySelector('li').offsetHeight || 0\n}\n\nconst onIncrement = () => {\n  scrollDown(1)\n}\n\nconst onDecrement = () => {\n  scrollDown(-1)\n}\n\nconst scrollDown = (step: number) => {\n  if (!currentScrollbar.value) {\n    emitSelectRange('hours')\n  }\n\n  const label = currentScrollbar.value!\n  let now = unref(timePartials)[label]\n  const total = currentScrollbar.value === 'hours' ? 24 : 60\n  now = (now + step + total) % total\n\n  modifyDateField(label, now)\n  adjustSpinner(label, now)\n  nextTick(() => emitSelectRange(label))\n}\n\nconst modifyDateField = (type: TimeUnit, value: number) => {\n  const list = unref(timeList)[type]\n  const isDisabled = list[value]\n  if (isDisabled) return\n\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  let changeTo\n  switch (type) {\n    case 'hours':\n      changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds)\n      break\n    case 'minutes':\n      changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds)\n      break\n    case 'seconds':\n      changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value)\n      break\n  }\n  emit('change', changeTo)\n}\n\nconst handleClick = (\n  type: TimeUnit,\n  { value, disabled }: { value: number; disabled: boolean }\n) => {\n  if (!disabled) {\n    modifyDateField(type, value)\n    emitSelectRange(type)\n    adjustSpinner(type, value)\n  }\n}\n\nconst handleScroll = (type: TimeUnit) => {\n  isScrolling = true\n  debouncedResetScroll(type)\n  const value = Math.min(\n    Math.round(\n      (getScrollbarElement(unref(listRefsMap[type])!.$el).scrollTop -\n        (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n        3) /\n        typeItemHeight(type)\n    ),\n    type === 'hours' ? 23 : 59\n  )\n  modifyDateField(type, value)\n}\n\nconst scrollBarHeight = (type: TimeUnit) => {\n  return unref(listRefsMap[type])!.$el.offsetHeight\n}\n\nconst bindScrollEvent = () => {\n  const bindFunction = (type: TimeUnit) => {\n    const scrollbar = unref(listRefsMap[type])\n    if (scrollbar && scrollbar.$el) {\n      getScrollbarElement(scrollbar.$el).onscroll = () => {\n        // TODO: scroll is emitted when set scrollTop programmatically\n        // should find better solutions in the future!\n        handleScroll(type)\n      }\n    }\n  }\n  bindFunction('hours')\n  bindFunction('minutes')\n  bindFunction('seconds')\n}\n\nonMounted(() => {\n  nextTick(() => {\n    !props.arrowControl && bindScrollEvent()\n    adjustSpinners()\n    // set selection on the first hour part\n    if (props.role === 'start') emitSelectRange('hours')\n  })\n})\n\nconst setRef = (scrollbar: ScrollbarInstance, type: TimeUnit) => {\n  listRefsMap[type].value = scrollbar\n}\n\nemit('set-option', [`${props.role}_scrollDown`, scrollDown])\nemit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\nwatch(\n  () => props.spinnerDate,\n  () => {\n    if (isScrolling) return\n    adjustSpinners()\n  }\n)\n</script>\n"]},"metadata":{},"sourceType":"module"}