{"ast":null,"code":"import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n/** Used as the size to enable large array optimizations. */\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\n\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  } else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n\n  outer: while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n    value = comparator || value !== 0 ? value : 0;\n\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n\n      result.push(value);\n    } else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n\nexport default baseDifference;","map":{"version":3,"names":["SetCache","arrayIncludes","arrayIncludesWith","arrayMap","baseUnary","cacheHas","LARGE_ARRAY_SIZE","baseDifference","array","values","iteratee","comparator","index","includes","isCommon","length","result","valuesLength","outer","value","computed","valuesIndex","push"],"sources":["C:/Users/laoshuaib/Desktop/mongo_exp_fro/node_modules/lodash-es/_baseDifference.js"],"sourcesContent":["import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,gBAArB;AACA,OAAOC,aAAP,MAA0B,qBAA1B;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AAEA;;AACA,IAAIC,gBAAgB,GAAG,GAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuCC,QAAvC,EAAiDC,UAAjD,EAA6D;EAC3D,IAAIC,KAAK,GAAG,CAAC,CAAb;EAAA,IACIC,QAAQ,GAAGZ,aADf;EAAA,IAEIa,QAAQ,GAAG,IAFf;EAAA,IAGIC,MAAM,GAAGP,KAAK,CAACO,MAHnB;EAAA,IAIIC,MAAM,GAAG,EAJb;EAAA,IAKIC,YAAY,GAAGR,MAAM,CAACM,MAL1B;;EAOA,IAAI,CAACA,MAAL,EAAa;IACX,OAAOC,MAAP;EACD;;EACD,IAAIN,QAAJ,EAAc;IACZD,MAAM,GAAGN,QAAQ,CAACM,MAAD,EAASL,SAAS,CAACM,QAAD,CAAlB,CAAjB;EACD;;EACD,IAAIC,UAAJ,EAAgB;IACdE,QAAQ,GAAGX,iBAAX;IACAY,QAAQ,GAAG,KAAX;EACD,CAHD,MAIK,IAAIL,MAAM,CAACM,MAAP,IAAiBT,gBAArB,EAAuC;IAC1CO,QAAQ,GAAGR,QAAX;IACAS,QAAQ,GAAG,KAAX;IACAL,MAAM,GAAG,IAAIT,QAAJ,CAAaS,MAAb,CAAT;EACD;;EACDS,KAAK,EACL,OAAO,EAAEN,KAAF,GAAUG,MAAjB,EAAyB;IACvB,IAAII,KAAK,GAAGX,KAAK,CAACI,KAAD,CAAjB;IAAA,IACIQ,QAAQ,GAAGV,QAAQ,IAAI,IAAZ,GAAmBS,KAAnB,GAA2BT,QAAQ,CAACS,KAAD,CADlD;IAGAA,KAAK,GAAIR,UAAU,IAAIQ,KAAK,KAAK,CAAzB,GAA8BA,KAA9B,GAAsC,CAA9C;;IACA,IAAIL,QAAQ,IAAIM,QAAQ,KAAKA,QAA7B,EAAuC;MACrC,IAAIC,WAAW,GAAGJ,YAAlB;;MACA,OAAOI,WAAW,EAAlB,EAAsB;QACpB,IAAIZ,MAAM,CAACY,WAAD,CAAN,KAAwBD,QAA5B,EAAsC;UACpC,SAASF,KAAT;QACD;MACF;;MACDF,MAAM,CAACM,IAAP,CAAYH,KAAZ;IACD,CARD,MASK,IAAI,CAACN,QAAQ,CAACJ,MAAD,EAASW,QAAT,EAAmBT,UAAnB,CAAb,EAA6C;MAChDK,MAAM,CAACM,IAAP,CAAYH,KAAZ;IACD;EACF;;EACD,OAAOH,MAAP;AACD;;AAED,eAAeT,cAAf"},"metadata":{},"sourceType":"module"}