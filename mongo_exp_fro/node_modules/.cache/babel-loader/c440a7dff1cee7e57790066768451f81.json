{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, ref, provide, watch, unref, nextTick, onMounted, onBeforeUnmount, renderSlot } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { getEdges, tryFocus, focusableStack, focusFirstDescendant, obtainAllFocusableElements } from './utils.mjs';\nimport { ON_TRAP_FOCUS_EVT, ON_RELEASE_FOCUS_EVT, FOCUS_TRAP_INJECTION_KEY, FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS, FOCUS_AFTER_RELEASED } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useEscapeKeydown } from '../../../hooks/use-escape-keydown/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { isString } from '@vue/shared';\n\nconst _sfc_main = defineComponent({\n  name: \"ElFocusTrap\",\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n    focusTrapEl: Object,\n    focusStartEl: {\n      type: [Object, String],\n      default: \"first\"\n    }\n  },\n  emits: [ON_TRAP_FOCUS_EVT, ON_RELEASE_FOCUS_EVT, \"focusin\", \"focusout\", \"focusout-prevented\", \"release-requested\"],\n\n  setup(props, {\n    emit\n  }) {\n    const forwardRef = ref();\n    let lastFocusBeforeTrapped;\n    let lastFocusAfterTrapped;\n    useEscapeKeydown(event => {\n      if (props.trapped && !focusLayer.paused) {\n        emit(\"release-requested\", event);\n      }\n    });\n    const focusLayer = {\n      paused: false,\n\n      pause() {\n        this.paused = true;\n      },\n\n      resume() {\n        this.paused = false;\n      }\n\n    };\n\n    const onKeydown = e => {\n      if (!props.loop && !props.trapped) return;\n      if (focusLayer.paused) return;\n      const {\n        key,\n        altKey,\n        ctrlKey,\n        metaKey,\n        currentTarget,\n        shiftKey\n      } = e;\n      const {\n        loop\n      } = props;\n      const isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;\n      const currentFocusingEl = document.activeElement;\n\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget;\n        const [first, last] = getEdges(container);\n        const isTabbable = first && last;\n\n        if (!isTabbable) {\n          if (currentFocusingEl === container) {\n            e.preventDefault();\n            emit(\"focusout-prevented\");\n          }\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault();\n            if (loop) tryFocus(first, true);\n            emit(\"focusout-prevented\");\n          } else if (shiftKey && [first, container].includes(currentFocusingEl)) {\n            e.preventDefault();\n            if (loop) tryFocus(last, true);\n            emit(\"focusout-prevented\");\n          }\n        }\n      }\n    };\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown\n    });\n    watch(() => props.focusTrapEl, focusTrapEl => {\n      if (focusTrapEl) {\n        forwardRef.value = focusTrapEl;\n      }\n    }, {\n      immediate: true\n    });\n    watch([forwardRef], ([forwardRef2], [oldForwardRef]) => {\n      if (forwardRef2) {\n        forwardRef2.addEventListener(\"keydown\", onKeydown);\n        forwardRef2.addEventListener(\"focusin\", onFocusIn);\n        forwardRef2.addEventListener(\"focusout\", onFocusOut);\n      }\n\n      if (oldForwardRef) {\n        oldForwardRef.removeEventListener(\"keydown\", onKeydown);\n        oldForwardRef.removeEventListener(\"focusin\", onFocusIn);\n        oldForwardRef.removeEventListener(\"focusout\", onFocusOut);\n      }\n    });\n\n    const trapOnFocus = e => {\n      emit(ON_TRAP_FOCUS_EVT, e);\n    };\n\n    const releaseOnFocus = e => emit(ON_RELEASE_FOCUS_EVT, e);\n\n    const onFocusIn = e => {\n      const trapContainer = unref(forwardRef);\n      if (!trapContainer) return;\n      const target = e.target;\n      const isFocusedInTrap = target && trapContainer.contains(target);\n      if (isFocusedInTrap) emit(\"focusin\", e);\n      if (focusLayer.paused) return;\n\n      if (props.trapped) {\n        if (isFocusedInTrap) {\n          lastFocusAfterTrapped = target;\n        } else {\n          tryFocus(lastFocusAfterTrapped, true);\n        }\n      }\n    };\n\n    const onFocusOut = e => {\n      const trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n\n      if (props.trapped) {\n        const relatedTarget = e.relatedTarget;\n\n        if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {\n          setTimeout(() => {\n            if (!focusLayer.paused && props.trapped) {\n              tryFocus(lastFocusAfterTrapped, true);\n            }\n          }, 0);\n        }\n      } else {\n        const target = e.target;\n        const isFocusedInTrap = target && trapContainer.contains(target);\n        if (!isFocusedInTrap) emit(\"focusout\", e);\n      }\n    };\n\n    async function startTrap() {\n      await nextTick();\n      const trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        focusableStack.push(focusLayer);\n        const prevFocusedElement = document.activeElement;\n        lastFocusBeforeTrapped = prevFocusedElement;\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement);\n\n        if (!isPrevFocusContained) {\n          const focusEvent = new Event(FOCUS_AFTER_TRAPPED, FOCUS_AFTER_TRAPPED_OPTS);\n          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);\n          trapContainer.dispatchEvent(focusEvent);\n\n          if (!focusEvent.defaultPrevented) {\n            nextTick(() => {\n              let focusStartEl = props.focusStartEl;\n\n              if (!isString(focusStartEl)) {\n                tryFocus(focusStartEl);\n\n                if (document.activeElement !== focusStartEl) {\n                  focusStartEl = \"first\";\n                }\n              }\n\n              if (focusStartEl === \"first\") {\n                focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);\n              }\n\n              if (document.activeElement === prevFocusedElement || focusStartEl === \"container\") {\n                tryFocus(trapContainer);\n              }\n            });\n          }\n        }\n      }\n    }\n\n    function stopTrap() {\n      const trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus);\n        const releasedEvent = new Event(FOCUS_AFTER_RELEASED, FOCUS_AFTER_TRAPPED_OPTS);\n        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus);\n        trapContainer.dispatchEvent(releasedEvent);\n\n        if (!releasedEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeTrapped != null ? lastFocusBeforeTrapped : document.body, true);\n        }\n\n        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, trapOnFocus);\n        focusableStack.remove(focusLayer);\n      }\n    }\n\n    onMounted(() => {\n      if (props.trapped) {\n        startTrap();\n      }\n\n      watch(() => props.trapped, trapped => {\n        if (trapped) {\n          startTrap();\n        } else {\n          stopTrap();\n        }\n      });\n    });\n    onBeforeUnmount(() => {\n      if (props.trapped) {\n        stopTrap();\n      }\n    });\n    return {\n      onKeydown\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\", {\n    handleKeydown: _ctx.onKeydown\n  });\n}\n\nvar ElFocusTrap = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/focus-trap/src/focus-trap.vue\"]]);\n\nexport { ElFocusTrap as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","inheritAttrs","props","loop","trapped","focusTrapEl","focusStartEl","type","Object","String","default","emits","ON_TRAP_FOCUS_EVT","ON_RELEASE_FOCUS_EVT","setup","emit","forwardRef","ref","useEscapeKeydown","event","focusLayer","paused","pause","resume","e","key","altKey","ctrlKey","metaKey","currentTarget","shiftKey","EVENT_CODE","currentFocusingEl","document","isTabbing","container","first","last","getEdges","isTabbable","preventDefault","tryFocus","includes","provide","FOCUS_TRAP_INJECTION_KEY","focusTrapRef","onKeydown","watch","value","immediate","forwardRef2","oldForwardRef","onFocusIn","onFocusOut","releaseOnFocus","unref","trapContainer","target","isFocusedInTrap","lastFocusAfterTrapped","relatedTarget","isNil","setTimeout","nextTick","focusableStack","push","prevFocusedElement","lastFocusBeforeTrapped","isPrevFocusContained","focusEvent","Event","FOCUS_AFTER_TRAPPED","FOCUS_AFTER_TRAPPED_OPTS","trapOnFocus","dispatchEvent","defaultPrevented","isString","activeElement","focusFirstDescendant","releasedEvent","FOCUS_AFTER_RELEASED","remove","onMounted","startTrap","stopTrap","onBeforeUnmount","_renderSlot","handleKeydown","_ctx"],"sources":["../../../../../../packages/components/focus-trap/src/focus-trap.vue"],"sourcesContent":["<template>\n  <slot :handle-keydown=\"onKeydown\" />\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { isNil } from 'lodash-unified'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useEscapeKeydown } from '@element-plus/hooks'\nimport { isString } from '@element-plus/utils'\nimport {\n  focusFirstDescendant,\n  focusableStack,\n  getEdges,\n  obtainAllFocusableElements,\n  tryFocus,\n} from './utils'\nimport {\n  FOCUS_AFTER_RELEASED,\n  FOCUS_AFTER_TRAPPED,\n  FOCUS_AFTER_TRAPPED_OPTS,\n  FOCUS_TRAP_INJECTION_KEY,\n  ON_RELEASE_FOCUS_EVT,\n  ON_TRAP_FOCUS_EVT,\n} from './tokens'\n\nimport type { PropType } from 'vue'\nimport type { FocusLayer } from './utils'\n\nexport default defineComponent({\n  name: 'ElFocusTrap',\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n    focusTrapEl: Object as PropType<HTMLElement>,\n    focusStartEl: {\n      type: [Object, String] as PropType<'container' | 'first' | HTMLElement>,\n      default: 'first',\n    },\n  },\n  emits: [\n    ON_TRAP_FOCUS_EVT,\n    ON_RELEASE_FOCUS_EVT,\n    'focusin',\n    'focusout',\n    'focusout-prevented',\n    'release-requested',\n  ],\n  setup(props, { emit }) {\n    const forwardRef = ref<HTMLElement | undefined>()\n    let lastFocusBeforeTrapped: HTMLElement | null\n    let lastFocusAfterTrapped: HTMLElement | null\n\n    useEscapeKeydown((event) => {\n      if (props.trapped && !focusLayer.paused) {\n        emit('release-requested', event)\n      }\n    })\n\n    const focusLayer: FocusLayer = {\n      paused: false,\n      pause() {\n        this.paused = true\n      },\n      resume() {\n        this.paused = false\n      },\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      if (!props.loop && !props.trapped) return\n      if (focusLayer.paused) return\n\n      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e\n      const { loop } = props\n      const isTabbing =\n        key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey\n\n      const currentFocusingEl = document.activeElement\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget as HTMLElement\n        const [first, last] = getEdges(container)\n        const isTabbable = first && last\n        if (!isTabbable) {\n          if (currentFocusingEl === container) {\n            e.preventDefault()\n            emit('focusout-prevented')\n          }\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault()\n            if (loop) tryFocus(first, true)\n            emit('focusout-prevented')\n          } else if (\n            shiftKey &&\n            [first, container].includes(currentFocusingEl as HTMLElement)\n          ) {\n            e.preventDefault()\n            if (loop) tryFocus(last, true)\n            emit('focusout-prevented')\n          }\n        }\n      }\n    }\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown,\n    })\n\n    watch(\n      () => props.focusTrapEl,\n      (focusTrapEl) => {\n        if (focusTrapEl) {\n          forwardRef.value = focusTrapEl\n        }\n      },\n      { immediate: true }\n    )\n\n    watch([forwardRef], ([forwardRef], [oldForwardRef]) => {\n      if (forwardRef) {\n        forwardRef.addEventListener('keydown', onKeydown)\n        forwardRef.addEventListener('focusin', onFocusIn)\n        forwardRef.addEventListener('focusout', onFocusOut)\n      }\n      if (oldForwardRef) {\n        oldForwardRef.removeEventListener('keydown', onKeydown)\n        oldForwardRef.removeEventListener('focusin', onFocusIn)\n        oldForwardRef.removeEventListener('focusout', onFocusOut)\n      }\n    })\n\n    const trapOnFocus = (e: Event) => {\n      emit(ON_TRAP_FOCUS_EVT, e)\n    }\n    const releaseOnFocus = (e: Event) => emit(ON_RELEASE_FOCUS_EVT, e)\n\n    const onFocusIn = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (!trapContainer) return\n\n      const target = e.target as HTMLElement | null\n      const isFocusedInTrap = target && trapContainer.contains(target)\n      if (isFocusedInTrap) emit('focusin', e)\n\n      if (focusLayer.paused) return\n\n      if (props.trapped) {\n        if (isFocusedInTrap) {\n          lastFocusAfterTrapped = target\n        } else {\n          tryFocus(lastFocusAfterTrapped, true)\n        }\n      }\n    }\n\n    const onFocusOut = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n\n      if (props.trapped) {\n        const relatedTarget = (e as FocusEvent)\n          .relatedTarget as HTMLElement | null\n        if (!isNil(relatedTarget) && !trapContainer.contains(relatedTarget)) {\n          // Give embedded focus layer time to pause this layer before reclaiming focus\n          // And only reclaim focus if it should currently be trapping\n          setTimeout(() => {\n            if (!focusLayer.paused && props.trapped) {\n              tryFocus(lastFocusAfterTrapped, true)\n            }\n          }, 0)\n        }\n      } else {\n        const target = e.target as HTMLElement | null\n        const isFocusedInTrap = target && trapContainer.contains(target)\n        if (!isFocusedInTrap) emit('focusout', e)\n      }\n    }\n\n    async function startTrap() {\n      // Wait for forwardRef to resolve\n      await nextTick()\n      const trapContainer = unref(forwardRef)\n      if (trapContainer) {\n        focusableStack.push(focusLayer)\n        const prevFocusedElement = document.activeElement\n        lastFocusBeforeTrapped = prevFocusedElement as HTMLElement | null\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement)\n        if (!isPrevFocusContained) {\n          const focusEvent = new Event(\n            FOCUS_AFTER_TRAPPED,\n            FOCUS_AFTER_TRAPPED_OPTS\n          )\n          trapContainer.addEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus)\n          trapContainer.dispatchEvent(focusEvent)\n          if (!focusEvent.defaultPrevented) {\n            nextTick(() => {\n              let focusStartEl = props.focusStartEl\n              if (!isString(focusStartEl)) {\n                tryFocus(focusStartEl)\n                if (document.activeElement !== focusStartEl) {\n                  focusStartEl = 'first'\n                }\n              }\n              if (focusStartEl === 'first') {\n                focusFirstDescendant(\n                  obtainAllFocusableElements(trapContainer),\n                  true\n                )\n              }\n              if (\n                document.activeElement === prevFocusedElement ||\n                focusStartEl === 'container'\n              ) {\n                tryFocus(trapContainer)\n              }\n            })\n          }\n        }\n      }\n    }\n\n    function stopTrap() {\n      const trapContainer = unref(forwardRef)\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_AFTER_TRAPPED, trapOnFocus)\n\n        const releasedEvent = new Event(\n          FOCUS_AFTER_RELEASED,\n          FOCUS_AFTER_TRAPPED_OPTS\n        )\n        trapContainer.addEventListener(FOCUS_AFTER_RELEASED, releaseOnFocus)\n        trapContainer.dispatchEvent(releasedEvent)\n\n        if (!releasedEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeTrapped ?? document.body, true)\n        }\n\n        trapContainer.removeEventListener(FOCUS_AFTER_RELEASED, trapOnFocus)\n        focusableStack.remove(focusLayer)\n      }\n    }\n\n    onMounted(() => {\n      if (props.trapped) {\n        startTrap()\n      }\n\n      watch(\n        () => props.trapped,\n        (trapped) => {\n          if (trapped) {\n            startTrap()\n          } else {\n            stopTrap()\n          }\n        }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      if (props.trapped) {\n        stopTrap()\n      }\n    })\n\n    return {\n      onKeydown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}