{"ast":null,"code":"import { defineComponent, ref, inject, computed, onBeforeUnmount, unref, watch, resolveComponent, openBlock, createBlock, Teleport, createVNode, Transition, withCtx, withDirectives, mergeProps, createCommentVNode, renderSlot, vShow } from 'vue';\nimport { onClickOutside } from '@vueuse/core';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport { useTooltipContentProps } from './tooltip.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElPopperContent from '../../popper/src/content2.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElTooltipContent\",\n  components: {\n    ElPopperContent\n  },\n  inheritAttrs: false,\n  props: useTooltipContentProps,\n\n  setup(props) {\n    const contentRef = ref(null);\n    const intermediateOpen = ref(false);\n    const entering = ref(false);\n    const leaving = ref(false);\n    const destroyed = ref(false);\n    const {\n      controlled,\n      id,\n      open,\n      trigger,\n      onClose,\n      onOpen,\n      onShow,\n      onHide,\n      onBeforeShow,\n      onBeforeHide\n    } = inject(TOOLTIP_INJECTION_KEY, void 0);\n    const persistentRef = computed(() => {\n      if (process.env.NODE_ENV === \"test\") {\n        return true;\n      }\n\n      return props.persistent;\n    });\n    onBeforeUnmount(() => {\n      destroyed.value = true;\n    });\n    const shouldRender = computed(() => {\n      return unref(persistentRef) ? true : unref(open);\n    });\n    const shouldShow = computed(() => {\n      return props.disabled ? false : unref(open);\n    });\n    const contentStyle = computed(() => {\n      var _a;\n\n      return (_a = props.style) != null ? _a : {};\n    });\n    const ariaHidden = computed(() => !unref(open));\n\n    const onTransitionLeave = () => {\n      onHide();\n    };\n\n    const stopWhenControlled = () => {\n      if (unref(controlled)) return true;\n    };\n\n    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n      if (props.enterable && unref(trigger) === \"hover\") {\n        onOpen();\n      }\n    });\n    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n      if (unref(trigger) === \"hover\") {\n        onClose();\n      }\n    });\n\n    const onBeforeEnter = () => {\n      var _a, _b;\n\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n      onBeforeShow == null ? void 0 : onBeforeShow();\n    };\n\n    const onBeforeLeave = () => {\n      onBeforeHide == null ? void 0 : onBeforeHide();\n    };\n\n    const onAfterShow = () => {\n      onShow();\n      stopHandle = onClickOutside(computed(() => {\n        var _a;\n\n        return (_a = contentRef.value) == null ? void 0 : _a.popperContentRef;\n      }), () => {\n        if (unref(controlled)) return;\n        const $trigger = unref(trigger);\n\n        if ($trigger !== \"hover\") {\n          onClose();\n        }\n      });\n    };\n\n    const onBlur = () => {\n      if (!props.virtualTriggering) {\n        onClose();\n      }\n    };\n\n    let stopHandle;\n    watch(() => unref(open), val => {\n      if (!val) {\n        stopHandle == null ? void 0 : stopHandle();\n      }\n    }, {\n      flush: \"post\"\n    });\n    return {\n      ariaHidden,\n      entering,\n      leaving,\n      id,\n      intermediateOpen,\n      contentStyle,\n      contentRef,\n      destroyed,\n      shouldRender,\n      shouldShow,\n      onClose,\n      open,\n      onAfterShow,\n      onBeforeEnter,\n      onBeforeLeave,\n      onContentEnter,\n      onContentLeave,\n      onTransitionLeave,\n      onBlur\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_popper_content = resolveComponent(\"el-popper-content\");\n\n  return openBlock(), createBlock(Teleport, {\n    disabled: !_ctx.teleported,\n    to: _ctx.appendTo\n  }, [createVNode(Transition, {\n    name: _ctx.transition,\n    onAfterLeave: _ctx.onTransitionLeave,\n    onBeforeEnter: _ctx.onBeforeEnter,\n    onAfterEnter: _ctx.onAfterShow,\n    onBeforeLeave: _ctx.onBeforeLeave\n  }, {\n    default: withCtx(() => [_ctx.shouldRender ? withDirectives((openBlock(), createBlock(_component_el_popper_content, mergeProps({\n      key: 0,\n      id: _ctx.id,\n      ref: \"contentRef\"\n    }, _ctx.$attrs, {\n      \"aria-label\": _ctx.ariaLabel,\n      \"aria-hidden\": _ctx.ariaHidden,\n      \"boundaries-padding\": _ctx.boundariesPadding,\n      \"fallback-placements\": _ctx.fallbackPlacements,\n      \"gpu-acceleration\": _ctx.gpuAcceleration,\n      offset: _ctx.offset,\n      placement: _ctx.placement,\n      \"popper-options\": _ctx.popperOptions,\n      strategy: _ctx.strategy,\n      effect: _ctx.effect,\n      enterable: _ctx.enterable,\n      pure: _ctx.pure,\n      \"popper-class\": _ctx.popperClass,\n      \"popper-style\": [_ctx.popperStyle, _ctx.contentStyle],\n      \"reference-el\": _ctx.referenceEl,\n      \"trigger-target-el\": _ctx.triggerTargetEl,\n      visible: _ctx.shouldShow,\n      \"z-index\": _ctx.zIndex,\n      onMouseenter: _ctx.onContentEnter,\n      onMouseleave: _ctx.onContentLeave,\n      onBlur: _ctx.onBlur,\n      onClose: _ctx.onClose\n    }), {\n      default: withCtx(() => [createCommentVNode(\" Workaround bug #6378 \"), !_ctx.destroyed ? renderSlot(_ctx.$slots, \"default\", {\n        key: 0\n      }) : createCommentVNode(\"v-if\", true)]),\n      _: 3\n    }, 16, [\"id\", \"aria-label\", \"aria-hidden\", \"boundaries-padding\", \"fallback-placements\", \"gpu-acceleration\", \"offset\", \"placement\", \"popper-options\", \"strategy\", \"effect\", \"enterable\", \"pure\", \"popper-class\", \"popper-style\", \"reference-el\", \"trigger-target-el\", \"visible\", \"z-index\", \"onMouseenter\", \"onMouseleave\", \"onBlur\", \"onClose\"])), [[vShow, _ctx.shouldShow]]) : createCommentVNode(\"v-if\", true)]),\n    _: 3\n  }, 8, [\"name\", \"onAfterLeave\", \"onBeforeEnter\", \"onAfterEnter\", \"onBeforeLeave\"])], 8, [\"disabled\", \"to\"]);\n}\n\nvar ElTooltipContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/content.vue\"]]);\n\nexport { ElTooltipContent as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElPopperContent","inheritAttrs","props","setup","ref","controlled","id","open","trigger","onClose","onOpen","onShow","onHide","onBeforeShow","onBeforeHide","inject","TOOLTIP_INJECTION_KEY","computed","env","NODE_ENV","onBeforeUnmount","destroyed","value","unref","contentStyle","_a","onTransitionLeave","_b","onAfterShow","stopHandle","watch","flush","ariaHidden","entering","leaving","intermediateOpen","contentRef","shouldRender","shouldShow","onBeforeEnter","onBeforeLeave","onContentEnter","onContentLeave","_component_el_popper_content","_openBlock","disabled","to","_ctx","_createVNode","onAfterEnter","default","_withDirectives","key","offset","placement","strategy","effect","enterable","pure","visible","onMouseleave","onBlur"],"sources":["../../../../../../packages/components/tooltip/src/content.vue"],"sourcesContent":["<template>\n  <teleport :disabled=\"!teleported\" :to=\"appendTo\">\n    <transition\n      :name=\"transition\"\n      @after-leave=\"onTransitionLeave\"\n      @before-enter=\"onBeforeEnter\"\n      @after-enter=\"onAfterShow\"\n      @before-leave=\"onBeforeLeave\"\n    >\n      <el-popper-content\n        v-if=\"shouldRender\"\n        v-show=\"shouldShow\"\n        :id=\"id\"\n        ref=\"contentRef\"\n        v-bind=\"$attrs\"\n        :aria-label=\"ariaLabel\"\n        :aria-hidden=\"ariaHidden\"\n        :boundaries-padding=\"boundariesPadding\"\n        :fallback-placements=\"fallbackPlacements\"\n        :gpu-acceleration=\"gpuAcceleration\"\n        :offset=\"offset\"\n        :placement=\"placement\"\n        :popper-options=\"popperOptions\"\n        :strategy=\"strategy\"\n        :effect=\"effect\"\n        :enterable=\"enterable\"\n        :pure=\"pure\"\n        :popper-class=\"popperClass\"\n        :popper-style=\"[popperStyle, contentStyle]\"\n        :reference-el=\"referenceEl\"\n        :trigger-target-el=\"triggerTargetEl\"\n        :visible=\"shouldShow\"\n        :z-index=\"zIndex\"\n        @mouseenter=\"onContentEnter\"\n        @mouseleave=\"onContentLeave\"\n        @blur=\"onBlur\"\n        @close=\"onClose\"\n      >\n        <!-- Workaround bug #6378 -->\n        <template v-if=\"!destroyed\">\n          <slot />\n        </template>\n      </el-popper-content>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  onBeforeUnmount,\n  ref,\n  unref,\n  watch,\n} from 'vue'\nimport { onClickOutside } from '@vueuse/core'\nimport { ElPopperContent } from '@element-plus/components/popper'\nimport { composeEventHandlers } from '@element-plus/utils'\n\nimport { useTooltipContentProps } from './tooltip'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\n\nexport default defineComponent({\n  name: 'ElTooltipContent',\n  components: {\n    ElPopperContent,\n  },\n  inheritAttrs: false,\n  props: useTooltipContentProps,\n  setup(props) {\n    const contentRef = ref<InstanceType<typeof ElPopperContent> | null>(null)\n    const intermediateOpen = ref(false)\n    const entering = ref(false)\n    const leaving = ref(false)\n    const destroyed = ref(false)\n    const {\n      controlled,\n      id,\n      open,\n      trigger,\n      onClose,\n      onOpen,\n      onShow,\n      onHide,\n      onBeforeShow,\n      onBeforeHide,\n    } = inject(TOOLTIP_INJECTION_KEY, undefined)!\n    const persistentRef = computed(() => {\n      // For testing, we would always want the content to be rendered\n      // to the DOM, so we need to return true here.\n      if (process.env.NODE_ENV === 'test') {\n        return true\n      }\n      return props.persistent\n    })\n\n    onBeforeUnmount(() => {\n      destroyed.value = true\n    })\n\n    const shouldRender = computed(() => {\n      return unref(persistentRef) ? true : unref(open)\n    })\n\n    const shouldShow = computed(() => {\n      return props.disabled ? false : unref(open)\n    })\n\n    const contentStyle = computed(() => (props.style ?? {}) as any)\n\n    const ariaHidden = computed(() => !unref(open))\n\n    const onTransitionLeave = () => {\n      onHide()\n    }\n\n    const stopWhenControlled = () => {\n      if (unref(controlled)) return true\n    }\n\n    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n      if (props.enterable && unref(trigger) === 'hover') {\n        onOpen()\n      }\n    })\n\n    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n      if (unref(trigger) === 'hover') {\n        onClose()\n      }\n    })\n\n    const onBeforeEnter = () => {\n      contentRef.value?.updatePopper?.()\n      onBeforeShow?.()\n    }\n\n    const onBeforeLeave = () => {\n      onBeforeHide?.()\n    }\n\n    const onAfterShow = () => {\n      onShow()\n      stopHandle = onClickOutside(\n        computed(() => {\n          return contentRef.value?.popperContentRef\n        }),\n        () => {\n          if (unref(controlled)) return\n          const $trigger = unref(trigger)\n          if ($trigger !== 'hover') {\n            onClose()\n          }\n        }\n      )\n    }\n\n    const onBlur = () => {\n      if (!props.virtualTriggering) {\n        onClose()\n      }\n    }\n\n    let stopHandle: ReturnType<typeof onClickOutside>\n\n    watch(\n      () => unref(open),\n      (val) => {\n        if (!val) {\n          stopHandle?.()\n        }\n      },\n      {\n        flush: 'post',\n      }\n    )\n\n    return {\n      ariaHidden,\n      entering,\n      leaving,\n      id,\n      intermediateOpen,\n      contentStyle,\n      contentRef,\n      destroyed,\n      shouldRender,\n      shouldShow,\n      onClose,\n      open,\n      onAfterShow,\n      onBeforeEnter,\n      onBeforeLeave,\n      onContentEnter,\n      onContentLeave,\n      onTransitionLeave,\n      onBlur,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}