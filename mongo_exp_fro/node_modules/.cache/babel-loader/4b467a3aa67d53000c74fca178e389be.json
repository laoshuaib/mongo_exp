{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { computed, getCurrentInstance } from 'vue';\nimport { fromPairs } from 'lodash-unified';\nimport '../../utils/index.mjs';\nimport { debugWarn } from '../../utils/error.mjs';\nconst DEFAULT_EXCLUDE_KEYS = [\"class\", \"style\"];\nconst LISTENER_PREFIX = /^on[A-Z]/;\n\nconst useAttrs = (params = {}) => {\n  const {\n    excludeListeners = false,\n    excludeKeys\n  } = params;\n  const allExcludeKeys = computed(() => {\n    return ((excludeKeys == null ? void 0 : excludeKeys.value) || []).concat(DEFAULT_EXCLUDE_KEYS);\n  });\n  const instance = getCurrentInstance();\n\n  if (!instance) {\n    debugWarn(\"use-attrs\", \"getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function\");\n    return computed(() => ({}));\n  }\n\n  return computed(() => {\n    var _a;\n\n    return fromPairs(Object.entries((_a = instance.proxy) == null ? void 0 : _a.$attrs).filter(([key]) => !allExcludeKeys.value.includes(key) && !(excludeListeners && LISTENER_PREFIX.test(key))));\n  });\n};\n\nexport { useAttrs };","map":{"version":3,"mappings":";;;;;AAGA,MAAMA,oBAAoB,GAAG,CAAC,OAAD,EAAU,OAAV,CAA7B;AACA,MAAMC,eAAe,GAAG,UAAxB;;AACY,MAACC,QAAQ,GAAG,CAACC,MAAM,GAAG,EAAV,KAAiB;EACvC,MAAM;IAAEC,gBAAgB,GAAG,KAArB;IAA4BC;EAA5B,IAA4CF,MAAlD;EACA,MAAMG,cAAc,GAAGC,QAAQ,CAAC,MAAM;IACpC,OAAO,CAAC,CAACF,WAAW,IAAI,IAAf,GAAsB,KAAK,CAA3B,GAA+BA,WAAW,CAACG,KAA5C,KAAsD,EAAvD,EAA2DC,MAA3D,CAAkET,oBAAlE,CAAP;EACD,CAF8B,CAA/B;EAGA,MAAMU,QAAQ,GAAGC,kBAAkB,EAAnC;;EACA,IAAI,CAACD,QAAL,EAAe;IACbE,SAAS,CAAC,WAAD,EAAc,8FAAd,CAAT;IACA,OAAOL,QAAQ,CAAC,OAAO,EAAP,CAAD,CAAf;EACD;;EACD,OAAOA,QAAQ,CAAC,MAAM;IACpB,IAAIM,EAAJ;;IACA,OAAOC,SAAS,CAACC,MAAM,CAACC,OAAP,CAAe,CAACH,EAAE,GAAGH,QAAQ,CAACO,KAAf,KAAyB,IAAzB,GAAgC,KAAK,CAArC,GAAyCJ,EAAE,CAACK,MAA3D,EAAmEC,MAAnE,CAA0E,CAAC,CAACC,GAAD,CAAD,KAAW,CAACd,cAAc,CAACE,KAAf,CAAqBa,QAArB,CAA8BD,GAA9B,CAAD,IAAuC,EAAEhB,gBAAgB,IAAIH,eAAe,CAACqB,IAAhB,CAAqBF,GAArB,CAAtB,CAA5H,CAAD,CAAhB;EACD,CAHc,CAAf;AAIF,CAdY","names":["DEFAULT_EXCLUDE_KEYS","LISTENER_PREFIX","useAttrs","params","excludeListeners","excludeKeys","allExcludeKeys","computed","value","concat","instance","getCurrentInstance","debugWarn","_a","fromPairs","Object","entries","proxy","$attrs","filter","key","includes","test"],"sources":["../../../../../packages/hooks/use-attrs/index.ts"],"sourcesContent":["import { computed, getCurrentInstance } from 'vue'\nimport { fromPairs } from 'lodash-unified'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { ComputedRef } from 'vue'\n\ninterface Params {\n  excludeListeners?: boolean\n  excludeKeys?: ComputedRef<string[]>\n}\n\nconst DEFAULT_EXCLUDE_KEYS = ['class', 'style']\nconst LISTENER_PREFIX = /^on[A-Z]/\n\nexport const useAttrs = (\n  params: Params = {}\n): ComputedRef<Record<string, unknown>> => {\n  const { excludeListeners = false, excludeKeys } = params\n  const allExcludeKeys = computed<string[]>(() => {\n    return (excludeKeys?.value || []).concat(DEFAULT_EXCLUDE_KEYS)\n  })\n\n  const instance = getCurrentInstance()\n  if (!instance) {\n    debugWarn(\n      'use-attrs',\n      'getCurrentInstance() returned null. useAttrs() must be called at the top of a setup function'\n    )\n    return computed(() => ({}))\n  }\n\n  return computed(() =>\n    fromPairs(\n      Object.entries(instance.proxy?.$attrs!).filter(\n        ([key]) =>\n          !allExcludeKeys.value.includes(key) &&\n          !(excludeListeners && LISTENER_PREFIX.test(key))\n      )\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}