{"ast":null,"code":"import { defineComponent, ref, openBlock, createElementBlock, Fragment, createVNode } from 'vue';\nimport { GAP } from './util.mjs';\nimport Thumb from './thumb2.mjs';\nimport { barProps } from './bar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\n\nconst _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"bar\",\n  props: barProps,\n\n  setup(__props, {\n    expose\n  }) {\n    const props = __props;\n    const moveX = ref(0);\n    const moveY = ref(0);\n\n    const handleScroll = wrap => {\n      if (wrap) {\n        const offsetHeight = wrap.offsetHeight - GAP;\n        const offsetWidth = wrap.offsetWidth - GAP;\n        moveY.value = wrap.scrollTop * 100 / offsetHeight * props.ratioY;\n        moveX.value = wrap.scrollLeft * 100 / offsetWidth * props.ratioX;\n      }\n    };\n\n    expose({\n      handleScroll\n    });\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(Fragment, null, [createVNode(Thumb, {\n        move: moveX.value,\n        ratio: _ctx.ratioX,\n        size: _ctx.width,\n        always: _ctx.always\n      }, null, 8, [\"move\", \"ratio\", \"size\", \"always\"]), createVNode(Thumb, {\n        move: moveY.value,\n        ratio: _ctx.ratioY,\n        size: _ctx.height,\n        vertical: \"\",\n        always: _ctx.always\n      }, null, 8, [\"move\", \"ratio\", \"size\", \"always\"])], 64);\n    };\n  }\n\n});\n\nvar Bar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/scrollbar/src/bar.vue\"]]);\n\nexport { Bar as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;IAkBM,cAAQA,IAAI,CAAJ,CAAR;IACA,cAAQA,IAAI,CAAJ,CAAR;;IAEA,qBAAgBC,IAAD,IAA0B;MAC7C,IAAIA,IAAJ,EAAU;QACF,qBAAeA,KAAKC,YAAL,GAAoBC,GAAnC;QACA,oBAAcF,KAAKG,WAAL,GAAmBD,GAAjC;QAENE,MAAMC,KAAN,GAAgBL,KAAKM,SAAL,GAAiB,GAAjB,GAAwBL,YAAxB,GAAwCM,KAAM,OAA9D;QACAC,MAAMH,KAAN,GAAgBL,KAAKS,UAAL,GAAkB,GAAlB,GAAyBN,WAAzB,GAAwCI,KAAM,OAA9D;MACF;IACF,CARM;;IAUOG;MACXC;IADW","names":["ref","wrap","offsetHeight","GAP","offsetWidth","moveY","value","scrollTop","props","moveX","scrollLeft","expose","handleScroll"],"sources":["../../../../../../packages/components/scrollbar/src/bar.vue"],"sourcesContent":["<template>\n  <thumb :move=\"moveX\" :ratio=\"ratioX\" :size=\"width\" :always=\"always\" />\n  <thumb\n    :move=\"moveY\"\n    :ratio=\"ratioY\"\n    :size=\"height\"\n    vertical\n    :always=\"always\"\n  />\n</template>\n<script lang=\"ts\" setup>\nimport { ref } from 'vue'\nimport { GAP } from './util'\nimport Thumb from './thumb.vue'\nimport { barProps } from './bar'\n\nconst props = defineProps(barProps)\n\nconst moveX = ref(0)\nconst moveY = ref(0)\n\nconst handleScroll = (wrap: HTMLDivElement) => {\n  if (wrap) {\n    const offsetHeight = wrap.offsetHeight - GAP\n    const offsetWidth = wrap.offsetWidth - GAP\n\n    moveY.value = ((wrap.scrollTop * 100) / offsetHeight) * props.ratioY\n    moveX.value = ((wrap.scrollLeft * 100) / offsetWidth) * props.ratioX\n  }\n}\n\ndefineExpose({\n  handleScroll,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}