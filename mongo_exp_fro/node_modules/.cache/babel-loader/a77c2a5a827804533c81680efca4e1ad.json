{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport { isNil } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nconst SCOPE = \"ElUpload\";\n\nclass UploadAjaxError extends Error {\n  constructor(message, status, method, url) {\n    super(message);\n    this.name = \"UploadAjaxError\";\n    this.status = status;\n    this.method = method;\n    this.url = url;\n  }\n\n}\n\nfunction getError(action, option, xhr) {\n  let msg;\n\n  if (xhr.response) {\n    msg = `${xhr.response.error || xhr.response}`;\n  } else if (xhr.responseText) {\n    msg = `${xhr.responseText}`;\n  } else {\n    msg = `fail to ${option.method} ${action} ${xhr.status}`;\n  }\n\n  return new UploadAjaxError(msg, xhr.status, option.method, action);\n}\n\nfunction getBody(xhr) {\n  const text = xhr.responseText || xhr.response;\n\n  if (!text) {\n    return text;\n  }\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\n\nconst ajaxUpload = option => {\n  if (typeof XMLHttpRequest === \"undefined\") throwError(SCOPE, \"XMLHttpRequest is undefined\");\n  const xhr = new XMLHttpRequest();\n  const action = option.action;\n\n  if (xhr.upload) {\n    xhr.upload.addEventListener(\"progress\", evt => {\n      const progressEvt = evt;\n      progressEvt.percent = evt.total > 0 ? evt.loaded / evt.total * 100 : 0;\n      option.onProgress(progressEvt);\n    });\n  }\n\n  const formData = new FormData();\n\n  if (option.data) {\n    for (const [key, value] of Object.entries(option.data)) {\n      if (Array.isArray(value)) formData.append(key, ...value);else formData.append(key, value);\n    }\n  }\n\n  formData.append(option.filename, option.file, option.file.name);\n  xhr.addEventListener(\"error\", () => {\n    option.onError(getError(action, option, xhr));\n  });\n  xhr.addEventListener(\"load\", () => {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr));\n    }\n\n    option.onSuccess(getBody(xhr));\n  });\n  xhr.open(option.method, action, true);\n\n  if (option.withCredentials && \"withCredentials\" in xhr) {\n    xhr.withCredentials = true;\n  }\n\n  const headers = option.headers || {};\n\n  if (headers instanceof Headers) {\n    headers.forEach((value, key) => xhr.setRequestHeader(key, value));\n  } else {\n    for (const [key, value] of Object.entries(headers)) {\n      if (isNil(value)) continue;\n      xhr.setRequestHeader(key, String(value));\n    }\n  }\n\n  xhr.send(formData);\n  return xhr;\n};\n\nexport { UploadAjaxError, ajaxUpload };","map":{"version":3,"mappings":";;;;AAEA,MAAMA,KAAK,GAAG,UAAd;;AACO,MAAMC,eAAN,SAA8BC,KAA9B,CAAoC;EACzCC,WAAW,CAACC,OAAD,EAAUC,MAAV,EAAkBC,MAAlB,EAA0BC,GAA1B,EAA+B;IACxC,MAAMH,OAAN;IACA,KAAKI,IAAL,GAAY,iBAAZ;IACA,KAAKH,MAAL,GAAcA,MAAd;IACA,KAAKC,MAAL,GAAcA,MAAd;IACA,KAAKC,GAAL,GAAWA,GAAX;EACD;;AAPwC;;AAS3C,SAASE,QAAT,CAAkBC,MAAlB,EAA0BC,MAA1B,EAAkCC,GAAlC,EAAuC;EACrC,IAAIC,GAAJ;;EACA,IAAID,GAAG,CAACE,QAAR,EAAkB;IAChBD,GAAG,GAAI,GAAED,GAAG,CAACE,QAAJ,CAAaC,KAAb,IAAsBH,GAAG,CAACE,QAAS,EAA5C;EACD,CAFD,MAEO,IAAIF,GAAG,CAACI,YAAR,EAAsB;IAC3BH,GAAG,GAAI,GAAED,GAAG,CAACI,YAAa,EAA1B;EACD,CAFM,MAEA;IACLH,GAAG,GAAI,WAAUF,MAAM,CAACL,MAAO,IAAGI,MAAO,IAAGE,GAAG,CAACP,MAAO,EAAvD;EACD;;EACD,OAAO,IAAIJ,eAAJ,CAAoBY,GAApB,EAAyBD,GAAG,CAACP,MAA7B,EAAqCM,MAAM,CAACL,MAA5C,EAAoDI,MAApD,CAAP;AACD;;AACD,SAASO,OAAT,CAAiBL,GAAjB,EAAsB;EACpB,MAAMM,IAAI,GAAGN,GAAG,CAACI,YAAJ,IAAoBJ,GAAG,CAACE,QAArC;;EACA,IAAI,CAACI,IAAL,EAAW;IACT,OAAOA,IAAP;EACD;;EACD,IAAI;IACF,OAAOC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAP;EACD,CAFD,CAEE,OAAOG,CAAP,EAAU;IACV,OAAOH,IAAP;EACD;AACF;;AACW,MAACI,UAAU,GAAIX,MAAD,IAAY;EACpC,IAAI,OAAOY,cAAP,KAA0B,WAA9B,EACEC,UAAU,CAACxB,KAAD,EAAQ,6BAAR,CAAV;EACF,MAAMY,GAAG,GAAG,IAAIW,cAAJ,EAAZ;EACA,MAAMb,MAAM,GAAGC,MAAM,CAACD,MAAtB;;EACA,IAAIE,GAAG,CAACa,MAAR,EAAgB;IACdb,GAAG,CAACa,MAAJ,CAAWC,gBAAX,CAA4B,UAA5B,EAAyCC,GAAD,IAAS;MAC/C,MAAMC,WAAW,GAAGD,GAApB;MACAC,WAAW,CAACC,OAAZ,GAAsBF,GAAG,CAACG,KAAJ,GAAY,CAAZ,GAAgBH,GAAG,CAACI,MAAJ,GAAaJ,GAAG,CAACG,KAAjB,GAAyB,GAAzC,GAA+C,CAArE;MACAnB,MAAM,CAACqB,UAAP,CAAkBJ,WAAlB;IACD,CAJD;EAKD;;EACD,MAAMK,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;;EACA,IAAIvB,MAAM,CAACwB,IAAX,EAAiB;IACf,KAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAe5B,MAAM,CAACwB,IAAtB,CAA3B,EAAwD;MACtD,IAAIK,KAAK,CAACC,OAAN,CAAcJ,KAAd,CAAJ,EACEJ,QAAQ,CAACS,MAAT,CAAgBN,GAAhB,EAAqB,GAAGC,KAAxB,EADF,KAGEJ,QAAQ,CAACS,MAAT,CAAgBN,GAAhB,EAAqBC,KAArB;IACH;EACF;;EACDJ,QAAQ,CAACS,MAAT,CAAgB/B,MAAM,CAACgC,QAAvB,EAAiChC,MAAM,CAACiC,IAAxC,EAA8CjC,MAAM,CAACiC,IAAP,CAAYpC,IAA1D;EACAI,GAAG,CAACc,gBAAJ,CAAqB,OAArB,EAA8B,MAAM;IAClCf,MAAM,CAACkC,OAAP,CAAepC,QAAQ,CAACC,MAAD,EAASC,MAAT,EAAiBC,GAAjB,CAAvB;EACD,CAFD;EAGAA,GAAG,CAACc,gBAAJ,CAAqB,MAArB,EAA6B,MAAM;IACjC,IAAId,GAAG,CAACP,MAAJ,GAAa,GAAb,IAAoBO,GAAG,CAACP,MAAJ,IAAc,GAAtC,EAA2C;MACzC,OAAOM,MAAM,CAACkC,OAAP,CAAepC,QAAQ,CAACC,MAAD,EAASC,MAAT,EAAiBC,GAAjB,CAAvB,CAAP;IACD;;IACDD,MAAM,CAACmC,SAAP,CAAiB7B,OAAO,CAACL,GAAD,CAAxB;EACD,CALD;EAMAA,GAAG,CAACmC,IAAJ,CAASpC,MAAM,CAACL,MAAhB,EAAwBI,MAAxB,EAAgC,IAAhC;;EACA,IAAIC,MAAM,CAACqC,eAAP,IAA0B,qBAAqBpC,GAAnD,EAAwD;IACtDA,GAAG,CAACoC,eAAJ,GAAsB,IAAtB;EACD;;EACD,MAAMC,OAAO,GAAGtC,MAAM,CAACsC,OAAP,IAAkB,EAAlC;;EACA,IAAIA,OAAO,YAAYC,OAAvB,EAAgC;IAC9BD,OAAO,CAACE,OAAR,CAAgB,CAACd,KAAD,EAAQD,GAAR,KAAgBxB,GAAG,CAACwC,gBAAJ,CAAqBhB,GAArB,EAA0BC,KAA1B,CAAhC;EACD,CAFD,MAEO;IACL,KAAK,MAAM,CAACD,GAAD,EAAMC,KAAN,CAAX,IAA2BC,MAAM,CAACC,OAAP,CAAeU,OAAf,CAA3B,EAAoD;MAClD,IAAII,KAAK,CAAChB,KAAD,CAAT,EACE;MACFzB,GAAG,CAACwC,gBAAJ,CAAqBhB,GAArB,EAA0BkB,MAAM,CAACjB,KAAD,CAAhC;IACD;EACF;;EACDzB,GAAG,CAAC2C,IAAJ,CAAStB,QAAT;EACA,OAAOrB,GAAP;AACF,CA/CY","names":["SCOPE","UploadAjaxError","Error","constructor","message","status","method","url","name","getError","action","option","xhr","msg","response","error","responseText","getBody","text","JSON","parse","e","ajaxUpload","XMLHttpRequest","throwError","upload","addEventListener","evt","progressEvt","percent","total","loaded","onProgress","formData","FormData","data","key","value","Object","entries","Array","isArray","append","filename","file","onError","onSuccess","open","withCredentials","headers","Headers","forEach","setRequestHeader","isNil","String","send"],"sources":["../../../../../../packages/components/upload/src/ajax.ts"],"sourcesContent":["import { isNil } from 'lodash-unified'\nimport { throwError } from '@element-plus/utils'\nimport type {\n  UploadProgressEvent,\n  UploadRequestHandler,\n  UploadRequestOptions,\n} from './upload'\n\nconst SCOPE = 'ElUpload'\n\nexport class UploadAjaxError extends Error {\n  name = 'UploadAjaxError'\n  status: number\n  method: string\n  url: string\n\n  constructor(message: string, status: number, method: string, url: string) {\n    super(message)\n    this.status = status\n    this.method = method\n    this.url = url\n  }\n}\n\nfunction getError(\n  action: string,\n  option: UploadRequestOptions,\n  xhr: XMLHttpRequest\n) {\n  let msg: string\n  if (xhr.response) {\n    msg = `${xhr.response.error || xhr.response}`\n  } else if (xhr.responseText) {\n    msg = `${xhr.responseText}`\n  } else {\n    msg = `fail to ${option.method} ${action} ${xhr.status}`\n  }\n\n  return new UploadAjaxError(msg, xhr.status, option.method, action)\n}\n\nfunction getBody(xhr: XMLHttpRequest): XMLHttpRequestResponseType {\n  const text = xhr.responseText || xhr.response\n  if (!text) {\n    return text\n  }\n\n  try {\n    return JSON.parse(text)\n  } catch {\n    return text\n  }\n}\n\nexport const ajaxUpload: UploadRequestHandler = (option) => {\n  if (typeof XMLHttpRequest === 'undefined')\n    throwError(SCOPE, 'XMLHttpRequest is undefined')\n\n  const xhr = new XMLHttpRequest()\n  const action = option.action\n\n  if (xhr.upload) {\n    xhr.upload.addEventListener('progress', (evt) => {\n      const progressEvt = evt as UploadProgressEvent\n      progressEvt.percent = evt.total > 0 ? (evt.loaded / evt.total) * 100 : 0\n      option.onProgress(progressEvt)\n    })\n  }\n\n  const formData = new FormData()\n  if (option.data) {\n    for (const [key, value] of Object.entries(option.data)) {\n      if (Array.isArray(value)) formData.append(key, ...value)\n      else formData.append(key, value)\n    }\n  }\n  formData.append(option.filename, option.file, option.file.name)\n\n  xhr.addEventListener('error', () => {\n    option.onError(getError(action, option, xhr))\n  })\n\n  xhr.addEventListener('load', () => {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr))\n    }\n    option.onSuccess(getBody(xhr))\n  })\n\n  xhr.open(option.method, action, true)\n\n  if (option.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true\n  }\n\n  const headers = option.headers || {}\n  if (headers instanceof Headers) {\n    headers.forEach((value, key) => xhr.setRequestHeader(key, value))\n  } else {\n    for (const [key, value] of Object.entries(headers)) {\n      if (isNil(value)) continue\n      xhr.setRequestHeader(key, String(value))\n    }\n  }\n\n  xhr.send(formData)\n  return xhr\n}\n"]},"metadata":{},"sourceType":"module"}