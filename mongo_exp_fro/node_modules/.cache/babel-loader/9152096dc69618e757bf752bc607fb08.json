{"ast":null,"code":"import { defineComponent, getCurrentInstance, inject, ref, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createVNode, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport ElCascaderNode from './node2.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { generateId } from '../../../utils/rand.mjs';\n\nconst _sfc_main = defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance();\n    const ns = useNamespace(\"cascader-menu\");\n    const {\n      t\n    } = useLocale();\n    const id = generateId();\n    let activeNode = null;\n    let hoverTimer = null;\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    const hoverZone = ref(null);\n    const isEmpty = computed(() => !props.nodes.length);\n    const isLoading = computed(() => !panel.initialLoaded);\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`);\n\n    const handleExpand = e => {\n      activeNode = e.target;\n    };\n\n    const handleMouseMove = e => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        const el = instance.vnode.el;\n        const {\n          left\n        } = el.getBoundingClientRect();\n        const {\n          offsetWidth,\n          offsetHeight\n        } = el;\n        const startX = e.clientX - left;\n        const top = activeNode.offsetTop;\n        const bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `;\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone\n    };\n  }\n\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_cascader_node = resolveComponent(\"el-cascader-node\");\n\n  const _component_loading = resolveComponent(\"loading\");\n\n  const _component_el_icon = resolveComponent(\"el-icon\");\n\n  const _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  return openBlock(), createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    class: normalizeClass(_ctx.ns.b()),\n    \"wrap-class\": _ctx.ns.e(\"wrap\"),\n    \"view-class\": [_ctx.ns.e(\"list\"), _ctx.ns.is(\"empty\", _ctx.isEmpty)],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    default: withCtx(() => {\n      var _a;\n\n      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.nodes, node => {\n        return openBlock(), createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [createVNode(_component_el_icon, {\n        size: \"14\",\n        class: normalizeClass(_ctx.ns.is(\"loading\"))\n      }, {\n        default: withCtx(() => [createVNode(_component_loading)]),\n        _: 1\n      }, 8, [\"class\"]), createTextVNode(\" \" + toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)], 2)) : _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, toDisplayString(_ctx.t(\"el.cascader.noData\")), 3)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (openBlock(), createElementBlock(\"svg\", {\n        key: 2,\n        ref: \"hoverZone\",\n        class: normalizeClass(_ctx.ns.e(\"hover-zone\"))\n      }, null, 2)) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"wrap-class\", \"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\n\nvar ElCascaderMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/menu.vue\"]]);\n\nexport { ElCascaderMenu as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;AAiDA,MAAKA,YAAaC,eAAa;EAC7BC,IAAM,kBADuB;EAG7BC,UAAY;IACVC,OADU;IAEVC,MAFU;IAGVC,WAHU;IAIVC;EAJU,CAHiB;EAU7BC,KAAO;IACLC,KAAO;MACLC,IAAM,OADD;MAELC,QAAU;IAFL,CADF;IAKLC,KAAO;MACLF,IAAM,QADD;MAELC,QAAU;IAFL;EALF,CAVsB;;EAqB7BE,MAAML,KAAN,EAAa;IACX,MAAMM,WAAWC,kBAAmB,EAApC;IACM,WAAKC,aAAa,eAAb,CAAL;IAEA;MAAEC;IAAF,IAAQC,SAAU,EAAlB;IACN,MAAMC,KAAKC,UAAW,EAAtB;IACA,IAAIC,UAAoC,OAAxC;IACA,IAAIC,UAA+B,OAAnC;IAEM,cAAQC,OAAOC,4BAAP,CAAR;IAEA,kBAAYC,IAA0B,IAA1B,CAAZ;IAEN,MAAMC,UAAUC,QAAS,OAAM,CAACnB,MAAMC,KAAN,CAAYmB,MAAnB,CAAzB;IACA,MAAMC,SAAY,YAAS,MAAM,CAACC,MAAMC,aAAtB,CAAlB;IACA,MAAMC,SAASL,QAAS,OAAuB,uBAAMnB,MAAMI,KAAO,EAA1C,CAAxB;;IAEM,qBAAgBqB,CAAD,IAAmB;MACtCZ,aAAaY,CAAE,OAAf;IACF,CAFM;;IAIA,wBAAmBA,CAAD,IAAmB;MACzC,IAAI,CAACH,KAAM,YAAP,IAAsB,CAACT,UAAvB,IAAqC,CAACa,SAAU,MAApD,EAA2D;;MAE3D,IAAIb,UAAW,SAAX,CAAoBY,CAAE,OAAtB,CAAJ,EAAkD;QAChCE;QAEV,WAAKrB,SAASsB,KAAT,CAAeC,EAApB;QACA;UAAEC;QAAF,IAAWD,GAAGE,qBAAH,EAAX;QACA;UAAEC,WAAF;UAAeC;QAAf,IAAgCJ,EAAhC;QACA,eAASJ,EAAES,OAAF,GAAYJ,IAArB;QACN,MAAMK,MAAMtB,UAAW,UAAvB;QACM,eAASsB,MAAMtB,UAAW,aAA1B;QAENa,UAAUU,KAAV,CAAgBC,SAAhB,GAA4B;AAAA,uEACmCC,UAAUH,QAAQH,WAAkB;AAAA,uEACpCM,UAAUC,MAAW,oBAAeN,YAAiB;AAAA,SAFpH;MAIF,CAdA,MAcA,IAAW,CAACnB,UAAZ,EAAwB;QACtBA,aAAa0B,MAAO,WAAP,CACXC,cADW,EAEXnB,MAAMoB,MAAN,CAAaC,cAFF,CAAb;MAIF;IACF,CAvBM;;IAyBN,MAAMhB,kBAAkB,MAAM;MAC5B,IAAI,CAACb,UAAL,EAAiB;MACjB8B,aAAa9B,UAAb;MACaA;IACf,CAJA;;IAMA,MAAM2B,iBAAiB,MAAM;MAC3B,IAAI,CAACf,SAAU,MAAf,EAAsB;MACtBA,UAAUU,KAAV,CAAgBC,SAAhB,GAA4B,EAA5B;MACgBV;IAClB,CAJA;;IAKO;MACLkB,EADK;MAELvB,KAFK;MAGLI,SAHK;MAILR,OAJK;MAKLG,SALK;MAMLG,MANK;MAOLf,CAPK;MAQLqC,YARK;MASLC,eATK;MAULN;IAVK;EAYT;;AA1F6B,EAA/B;;;;;;;;;;;sBAhDEO,WA+Be;IA9BZC,GAAK,aA8BO;IA7BbC,GAAI,MA6BS;IA5BbC,IAAK,QA4BQ;IA3BZC,OAAKC,cAAE,SAAGC,CAAH,GA2BK;IA1BZ,cAAYC,QAAG9B,CAAH,CAAI,MAAJ,CA0BA;IAzBZ,cAAU,CAAG8B,IAAG,GAAH,CAAG9B,CAAH,CAAI,MAAJ,CAAH,EAAiB8B,IAAG,GAAH,CAAGC,EAAH,CAAK,OAAL,EAAeD,IAAO,QAAtB,CAAjB,CAyBE;IAxBZE,WAAW,sBAwBC;IAvBZC,YAAY;EAuBA,GAvBA;qBAGX,MAAqB;MAAA;;eAKrBC,SAJW,MAIXA,EAJWC;QACV;UACSX,aADT;UAEQY,IAFR;UAEQ,sBAFR;;QAAA,GAIQ,IAJR,EAIQ,CAJR,EAIQ,oBAKL,UALK,CAJR;MASG,CAVO,GAUP,GAVO,IAKUN,IAAK,UAAL,IAAKI,aAAMC;QAAAX;QAGtBG;MAHsB,GAClB,CAAMU,WAAO,qBAAK;QAAAC;6BACnB;MADmB,CAAL,EACd;QAAAC;QACHC;MADG,CADc,EAGvB,CAHuB,EAGvB,SAHuB,CAAb,EAOVC,wEAPU,CADkB,EAMH,CANG,CAAX,IAMQX,yBAAM;QAAAN;QAOnCG;MAPmC,GAK/Be,6CAL+B,EAK/B,CAL+B,CAAN,IAKzB;QACHlB,KAAK,CADF;QACQhC,gBADR;;MAAA;MApBO;;EAAA,CAuBA","names":["_sfc_main","defineComponent","name","components","Loading","ElIcon","ElScrollbar","ElCascaderNode","props","nodes","type","required","index","setup","instance","getCurrentInstance","useNamespace","t","useLocale","id","generateId","activeNode","hoverTimer","inject","CASCADER_PANEL_INJECTION_KEY","ref","isEmpty","computed","length","isLoading","panel","initialLoaded","menuId","e","hoverZone","clearHoverTimer","vnode","el","left","getBoundingClientRect","offsetWidth","offsetHeight","clientX","top","value","innerHTML","startX","bottom","window","clearHoverZone","config","hoverThreshold","clearTimeout","ns","handleExpand","handleMouseMove","_createBlock","key","tag","role","class","_normalizeClass","b","_ctx","is","onMousemove","onMouseleave","_openBlock","_createElementBlock","node","_createVNode","size","default","_","_createTextVNode","_toDisplayString"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    :class=\"ns.b()\"\n    :wrap-class=\"ns.e('wrap')\"\n    :view-class=\"[ns.e('list'), ns.is('empty', isEmpty)]\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" :class=\"ns.e('empty-text')\">\n      <el-icon size=\"14\" :class=\"ns.is('loading')\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" :class=\"ns.e('empty-text')\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      :class=\"ns.e('hover-zone')\"\n    />\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { generateId } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const ns = useNamespace('cascader-menu')\n\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<number> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const isLoading = computed(() => !panel.initialLoaded)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}