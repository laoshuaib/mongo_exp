{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, getCurrentInstance, inject, ref, computed, nextTick, watch, onMounted, onUpdated, createVNode } from 'vue';\nimport { NOOP, capitalize } from '@vue/shared';\nimport { useDocumentVisibility, useWindowFocus, useResizeObserver } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowLeft, ArrowRight, Close } from '@element-plus/icons-vue';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport TabBar from './tab-bar2.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nconst tabNavProps = buildProps({\n  panes: {\n    type: definePropType(Array),\n    default: () => mutable([])\n  },\n  currentName: {\n    type: [String, Number],\n    default: \"\"\n  },\n  editable: Boolean,\n  onTabClick: {\n    type: definePropType(Function),\n    default: NOOP\n  },\n  onTabRemove: {\n    type: definePropType(Function),\n    default: NOOP\n  },\n  type: {\n    type: String,\n    values: [\"card\", \"border-card\", \"\"],\n    default: \"\"\n  },\n  stretch: Boolean\n});\nconst COMPONENT_NAME = \"ElTabNav\";\nconst TabNav = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabNavProps,\n\n  setup(props, {\n    expose\n  }) {\n    const vm = getCurrentInstance();\n    const rootTabs = inject(tabsRootContextKey);\n    if (!rootTabs) throwError(COMPONENT_NAME, `<el-tabs><tab-nav /></el-tabs>`);\n    const ns = useNamespace(\"tabs\");\n    const visibility = useDocumentVisibility();\n    const focused = useWindowFocus();\n    const navScroll$ = ref();\n    const nav$ = ref();\n    const el$ = ref();\n    const scrollable = ref(false);\n    const navOffset = ref(0);\n    const isFocus = ref(false);\n    const focusable = ref(true);\n    const sizeName = computed(() => [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition) ? \"width\" : \"height\");\n    const navStyle = computed(() => {\n      const dir = sizeName.value === \"width\" ? \"X\" : \"Y\";\n      return {\n        transform: `translate${dir}(-${navOffset.value}px)`\n      };\n    });\n\n    const scrollPrev = () => {\n      if (!navScroll$.value) return;\n      const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];\n      const currentOffset = navOffset.value;\n      if (!currentOffset) return;\n      const newOffset = currentOffset > containerSize ? currentOffset - containerSize : 0;\n      navOffset.value = newOffset;\n    };\n\n    const scrollNext = () => {\n      if (!navScroll$.value || !nav$.value) return;\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`];\n      const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];\n      const currentOffset = navOffset.value;\n      if (navSize - currentOffset <= containerSize) return;\n      const newOffset = navSize - currentOffset > containerSize * 2 ? currentOffset + containerSize : navSize - containerSize;\n      navOffset.value = newOffset;\n    };\n\n    const scrollToActiveTab = async () => {\n      const nav = nav$.value;\n      if (!scrollable.value || !el$.value || !navScroll$.value || !nav) return;\n      await nextTick();\n      const activeTab = el$.value.querySelector(\".is-active\");\n      if (!activeTab) return;\n      const navScroll = navScroll$.value;\n      const isHorizontal = [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition);\n      const activeTabBounding = activeTab.getBoundingClientRect();\n      const navScrollBounding = navScroll.getBoundingClientRect();\n      const maxOffset = isHorizontal ? nav.offsetWidth - navScrollBounding.width : nav.offsetHeight - navScrollBounding.height;\n      const currentOffset = navOffset.value;\n      let newOffset = currentOffset;\n\n      if (isHorizontal) {\n        if (activeTabBounding.left < navScrollBounding.left) {\n          newOffset = currentOffset - (navScrollBounding.left - activeTabBounding.left);\n        }\n\n        if (activeTabBounding.right > navScrollBounding.right) {\n          newOffset = currentOffset + activeTabBounding.right - navScrollBounding.right;\n        }\n      } else {\n        if (activeTabBounding.top < navScrollBounding.top) {\n          newOffset = currentOffset - (navScrollBounding.top - activeTabBounding.top);\n        }\n\n        if (activeTabBounding.bottom > navScrollBounding.bottom) {\n          newOffset = currentOffset + (activeTabBounding.bottom - navScrollBounding.bottom);\n        }\n      }\n\n      newOffset = Math.max(newOffset, 0);\n      navOffset.value = Math.min(newOffset, maxOffset);\n    };\n\n    const update = () => {\n      if (!nav$.value || !navScroll$.value) return;\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`];\n      const containerSize = navScroll$.value[`offset${capitalize(sizeName.value)}`];\n      const currentOffset = navOffset.value;\n\n      if (containerSize < navSize) {\n        const currentOffset2 = navOffset.value;\n        scrollable.value = scrollable.value || {};\n        scrollable.value.prev = currentOffset2;\n        scrollable.value.next = currentOffset2 + containerSize < navSize;\n\n        if (navSize - currentOffset2 < containerSize) {\n          navOffset.value = navSize - containerSize;\n        }\n      } else {\n        scrollable.value = false;\n\n        if (currentOffset > 0) {\n          navOffset.value = 0;\n        }\n      }\n    };\n\n    const changeTab = e => {\n      const code = e.code;\n      const {\n        up,\n        down,\n        left,\n        right\n      } = EVENT_CODE;\n      if (![up, down, left, right].includes(code)) return;\n      const tabList = Array.from(e.currentTarget.querySelectorAll(\"[role=tab]:not(.is-disabled)\"));\n      const currentIndex = tabList.indexOf(e.target);\n      let nextIndex;\n\n      if (code === left || code === up) {\n        if (currentIndex === 0) {\n          nextIndex = tabList.length - 1;\n        } else {\n          nextIndex = currentIndex - 1;\n        }\n      } else {\n        if (currentIndex < tabList.length - 1) {\n          nextIndex = currentIndex + 1;\n        } else {\n          nextIndex = 0;\n        }\n      }\n\n      tabList[nextIndex].focus();\n      tabList[nextIndex].click();\n      setFocus();\n    };\n\n    const setFocus = () => {\n      if (focusable.value) isFocus.value = true;\n    };\n\n    const removeFocus = () => isFocus.value = false;\n\n    watch(visibility, visibility2 => {\n      if (visibility2 === \"hidden\") {\n        focusable.value = false;\n      } else if (visibility2 === \"visible\") {\n        setTimeout(() => focusable.value = true, 50);\n      }\n    });\n    watch(focused, focused2 => {\n      if (focused2) {\n        setTimeout(() => focusable.value = true, 50);\n      } else {\n        focusable.value = false;\n      }\n    });\n    useResizeObserver(el$, update);\n    onMounted(() => setTimeout(() => scrollToActiveTab(), 0));\n    onUpdated(() => update());\n    expose({\n      scrollToActiveTab,\n      removeFocus\n    });\n    watch(() => props.panes, () => vm.update(), {\n      flush: \"post\"\n    });\n    return () => {\n      const scrollBtn = scrollable.value ? [createVNode(\"span\", {\n        \"class\": [ns.e(\"nav-prev\"), ns.is(\"disabled\", !scrollable.value.prev)],\n        \"onClick\": scrollPrev\n      }, [createVNode(ElIcon, null, {\n        default: () => [createVNode(ArrowLeft, null, null)]\n      })]), createVNode(\"span\", {\n        \"class\": [ns.e(\"nav-next\"), ns.is(\"disabled\", !scrollable.value.next)],\n        \"onClick\": scrollNext\n      }, [createVNode(ElIcon, null, {\n        default: () => [createVNode(ArrowRight, null, null)]\n      })])] : null;\n      const tabs = props.panes.map((pane, index) => {\n        var _a, _b, _c, _d;\n\n        const disabled = pane.props.disabled;\n        const tabName = (_b = (_a = pane.props.name) != null ? _a : pane.index) != null ? _b : `${index}`;\n        const closable = !disabled && (pane.isClosable || props.editable);\n        pane.index = `${index}`;\n        const btnClose = closable ? createVNode(ElIcon, {\n          \"class\": \"is-icon-close\",\n          \"onClick\": ev => props.onTabRemove(pane, ev)\n        }, {\n          default: () => [createVNode(Close, null, null)]\n        }) : null;\n        const tabLabelContent = ((_d = (_c = pane.slots).label) == null ? void 0 : _d.call(_c)) || pane.props.label;\n        const tabindex = !disabled && pane.active ? 0 : -1;\n        return createVNode(\"div\", {\n          \"ref\": `tab-${tabName}`,\n          \"class\": [ns.e(\"item\"), ns.is(rootTabs.props.tabPosition), ns.is(\"active\", pane.active), ns.is(\"disabled\", disabled), ns.is(\"closable\", closable), ns.is(\"focus\", isFocus.value)],\n          \"id\": `tab-${tabName}`,\n          \"key\": `tab-${tabName}`,\n          \"aria-controls\": `pane-${tabName}`,\n          \"role\": \"tab\",\n          \"aria-selected\": pane.active,\n          \"tabindex\": tabindex,\n          \"onFocus\": () => setFocus(),\n          \"onBlur\": () => removeFocus(),\n          \"onClick\": ev => {\n            removeFocus();\n            props.onTabClick(pane, tabName, ev);\n          },\n          \"onKeydown\": ev => {\n            if (closable && (ev.code === EVENT_CODE.delete || ev.code === EVENT_CODE.backspace)) {\n              props.onTabRemove(pane, ev);\n            }\n          }\n        }, [...[tabLabelContent, btnClose]]);\n      });\n      return createVNode(\"div\", {\n        \"ref\": el$,\n        \"class\": [ns.e(\"nav-wrap\"), ns.is(\"scrollable\", !!scrollable.value), ns.is(rootTabs.props.tabPosition)]\n      }, [scrollBtn, createVNode(\"div\", {\n        \"class\": ns.e(\"nav-scroll\"),\n        \"ref\": navScroll$\n      }, [createVNode(\"div\", {\n        \"class\": [ns.e(\"nav\"), ns.is(rootTabs.props.tabPosition), ns.is(\"stretch\", props.stretch && [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition))],\n        \"ref\": nav$,\n        \"style\": navStyle.value,\n        \"role\": \"tablist\",\n        \"onKeydown\": changeTab\n      }, [...[!props.type ? createVNode(TabBar, {\n        \"tabs\": [...props.panes]\n      }, null) : null, tabs]])])]);\n    };\n  }\n\n});\nexport { TabNav as default, tabNavProps };","map":{"version":3,"mappings":"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","names":["TabBar","tabNavProps","panes","type","definePropType","Array","currentName","Number","String","editable","Boolean","onTabClick","onTabRemove","values","stretch","COMPONENT_NAME","TabNav","name","props","expose","vm","throwError","ns","visibility","useWindowFocus","useDocumentVisibility","focused","navScroll$","nav$","ref","el$","scrollable","navOffset","isFocus","focusable","sizeName","computed","dir","transform","scrollPrev","value","containerSize","newOffset","currentOffset","scrollNext","navSize","capitalize","scrollToActiveTab","nav","activeTab","activeTabBounding","navScrollBounding","includes","rootTabs","tabPosition","maxOffset","isHorizontal","right","top","bottom","update","currentOffset2","next","prev","code","up","down","changeTab","EVENT_CODE","tabList","currentIndex","nextIndex","focus","setFocus","watch","useResizeObserver","removeFocus","flush","scrollBtn","default","setTimeout","onUpdated","_createVNode","disabled","closable","pane","index","btnClose","ev","tabName","is","tabLabelContent","tabs"],"sources":["../../../../../../packages/components/tabs/src/tab-nav.tsx"],"sourcesContent":["// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  onMounted,\n  onUpdated,\n  ref,\n  watch,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport {\n  useDocumentVisibility,\n  useResizeObserver,\n  useWindowFocus,\n} from '@vueuse/core'\nimport {\n  buildProps,\n  capitalize,\n  definePropType,\n  mutable,\n  throwError,\n} from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowLeft, ArrowRight, Close } from '@element-plus/icons-vue'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport TabBar from './tab-bar.vue'\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { TabsPaneContext } from '@element-plus/tokens'\nimport type { TabPanelName } from './tabs'\n\ninterface Scrollable {\n  next?: boolean\n  prev?: number\n}\n\nexport const tabNavProps = buildProps({\n  panes: {\n    type: definePropType<TabsPaneContext[]>(Array),\n    default: () => mutable([] as const),\n  },\n  currentName: {\n    type: [String, Number],\n    default: '',\n  },\n  editable: Boolean,\n  onTabClick: {\n    type: definePropType<\n      (tab: TabsPaneContext, tabName: TabPanelName, ev: Event) => void\n    >(Function),\n    default: NOOP,\n  },\n  onTabRemove: {\n    type: definePropType<(tab: TabsPaneContext, ev: Event) => void>(Function),\n    default: NOOP,\n  },\n  type: {\n    type: String,\n    values: ['card', 'border-card', ''],\n    default: '',\n  },\n  stretch: Boolean,\n} as const)\n\nexport type TabNavProps = ExtractPropTypes<typeof tabNavProps>\n\nconst COMPONENT_NAME = 'ElTabNav'\nconst TabNav = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabNavProps,\n\n  setup(props, { expose }) {\n    const vm = getCurrentInstance()!\n\n    const rootTabs = inject(tabsRootContextKey)\n    if (!rootTabs) throwError(COMPONENT_NAME, `<el-tabs><tab-nav /></el-tabs>`)\n\n    const ns = useNamespace('tabs')\n    const visibility = useDocumentVisibility()\n    const focused = useWindowFocus()\n\n    const navScroll$ = ref<HTMLDivElement>()\n    const nav$ = ref<HTMLDivElement>()\n    const el$ = ref<HTMLDivElement>()\n\n    const scrollable = ref<false | Scrollable>(false)\n    const navOffset = ref(0)\n    const isFocus = ref(false)\n    const focusable = ref(true)\n\n    const sizeName = computed(() =>\n      ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n        ? 'width'\n        : 'height'\n    )\n    const navStyle = computed<CSSProperties>(() => {\n      const dir = sizeName.value === 'width' ? 'X' : 'Y'\n      return {\n        transform: `translate${dir}(-${navOffset.value}px)`,\n      }\n    })\n\n    const scrollPrev = () => {\n      if (!navScroll$.value) return\n\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (!currentOffset) return\n\n      const newOffset =\n        currentOffset > containerSize ? currentOffset - containerSize : 0\n\n      navOffset.value = newOffset\n    }\n\n    const scrollNext = () => {\n      if (!navScroll$.value || !nav$.value) return\n\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`]\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (navSize - currentOffset <= containerSize) return\n\n      const newOffset =\n        navSize - currentOffset > containerSize * 2\n          ? currentOffset + containerSize\n          : navSize - containerSize\n\n      navOffset.value = newOffset\n    }\n\n    const scrollToActiveTab = async () => {\n      const nav = nav$.value\n      if (!scrollable.value || !el$.value || !navScroll$.value || !nav) return\n\n      await nextTick()\n\n      const activeTab = el$.value.querySelector('.is-active')\n      if (!activeTab) return\n\n      const navScroll = navScroll$.value\n      const isHorizontal = ['top', 'bottom'].includes(\n        rootTabs.props.tabPosition\n      )\n      const activeTabBounding = activeTab.getBoundingClientRect()\n      const navScrollBounding = navScroll.getBoundingClientRect()\n      const maxOffset = isHorizontal\n        ? nav.offsetWidth - navScrollBounding.width\n        : nav.offsetHeight - navScrollBounding.height\n      const currentOffset = navOffset.value\n      let newOffset = currentOffset\n\n      if (isHorizontal) {\n        if (activeTabBounding.left < navScrollBounding.left) {\n          newOffset =\n            currentOffset - (navScrollBounding.left - activeTabBounding.left)\n        }\n        if (activeTabBounding.right > navScrollBounding.right) {\n          newOffset =\n            currentOffset + activeTabBounding.right - navScrollBounding.right\n        }\n      } else {\n        if (activeTabBounding.top < navScrollBounding.top) {\n          newOffset =\n            currentOffset - (navScrollBounding.top - activeTabBounding.top)\n        }\n        if (activeTabBounding.bottom > navScrollBounding.bottom) {\n          newOffset =\n            currentOffset +\n            (activeTabBounding.bottom - navScrollBounding.bottom)\n        }\n      }\n      newOffset = Math.max(newOffset, 0)\n      navOffset.value = Math.min(newOffset, maxOffset)\n    }\n\n    const update = () => {\n      if (!nav$.value || !navScroll$.value) return\n\n      const navSize = nav$.value[`offset${capitalize(sizeName.value)}`]\n      const containerSize =\n        navScroll$.value[`offset${capitalize(sizeName.value)}`]\n      const currentOffset = navOffset.value\n\n      if (containerSize < navSize) {\n        const currentOffset = navOffset.value\n        scrollable.value = scrollable.value || {}\n        scrollable.value.prev = currentOffset\n        scrollable.value.next = currentOffset + containerSize < navSize\n        if (navSize - currentOffset < containerSize) {\n          navOffset.value = navSize - containerSize\n        }\n      } else {\n        scrollable.value = false\n        if (currentOffset > 0) {\n          navOffset.value = 0\n        }\n      }\n    }\n\n    const changeTab = (e: KeyboardEvent) => {\n      const code = e.code\n\n      const { up, down, left, right } = EVENT_CODE\n      if (![up, down, left, right].includes(code)) return\n\n      // 左右上下键更换tab\n      const tabList = Array.from(\n        (e.currentTarget as HTMLDivElement).querySelectorAll<HTMLDivElement>(\n          '[role=tab]:not(.is-disabled)'\n        )\n      )\n      const currentIndex = tabList.indexOf(e.target as HTMLDivElement)\n\n      let nextIndex: number\n      if (code === left || code === up) {\n        // left\n        if (currentIndex === 0) {\n          // first\n          nextIndex = tabList.length - 1\n        } else {\n          nextIndex = currentIndex - 1\n        }\n      } else {\n        // right\n        if (currentIndex < tabList.length - 1) {\n          // not last\n          nextIndex = currentIndex + 1\n        } else {\n          nextIndex = 0\n        }\n      }\n      tabList[nextIndex].focus() // 改变焦点元素\n      tabList[nextIndex].click() // 选中下一个tab\n      setFocus()\n    }\n\n    const setFocus = () => {\n      if (focusable.value) isFocus.value = true\n    }\n    const removeFocus = () => (isFocus.value = false)\n\n    watch(visibility, (visibility) => {\n      if (visibility === 'hidden') {\n        focusable.value = false\n      } else if (visibility === 'visible') {\n        setTimeout(() => (focusable.value = true), 50)\n      }\n    })\n    watch(focused, (focused) => {\n      if (focused) {\n        setTimeout(() => (focusable.value = true), 50)\n      } else {\n        focusable.value = false\n      }\n    })\n\n    useResizeObserver(el$, update)\n\n    onMounted(() => setTimeout(() => scrollToActiveTab(), 0))\n    onUpdated(() => update())\n\n    expose({\n      scrollToActiveTab,\n      removeFocus,\n    })\n\n    watch(\n      () => props.panes,\n      () => vm.update(),\n      { flush: 'post' }\n    )\n\n    return () => {\n      const scrollBtn = scrollable.value\n        ? [\n            <span\n              class={[\n                ns.e('nav-prev'),\n                ns.is('disabled', !scrollable.value.prev),\n              ]}\n              onClick={scrollPrev}\n            >\n              <ElIcon>\n                <ArrowLeft />\n              </ElIcon>\n            </span>,\n            <span\n              class={[\n                ns.e('nav-next'),\n                ns.is('disabled', !scrollable.value.next),\n              ]}\n              onClick={scrollNext}\n            >\n              <ElIcon>\n                <ArrowRight />\n              </ElIcon>\n            </span>,\n          ]\n        : null\n\n      const tabs = props.panes.map((pane, index) => {\n        const disabled = pane.props.disabled\n        const tabName = pane.props.name ?? pane.index ?? `${index}`\n        const closable = !disabled && (pane.isClosable || props.editable)\n        pane.index = `${index}`\n\n        const btnClose = closable ? (\n          <ElIcon\n            class=\"is-icon-close\"\n            // `onClick` not exist when generate dts\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            onClick={(ev: MouseEvent) => props.onTabRemove(pane, ev)}\n          >\n            <Close />\n          </ElIcon>\n        ) : null\n\n        const tabLabelContent = pane.slots.label?.() || pane.props.label\n        const tabindex = !disabled && pane.active ? 0 : -1\n\n        return (\n          <div\n            ref={`tab-${tabName}`}\n            class={[\n              ns.e('item'),\n              ns.is(rootTabs.props.tabPosition),\n              ns.is('active', pane.active),\n              ns.is('disabled', disabled),\n              ns.is('closable', closable),\n              ns.is('focus', isFocus.value),\n            ]}\n            id={`tab-${tabName}`}\n            key={`tab-${tabName}`}\n            aria-controls={`pane-${tabName}`}\n            role=\"tab\"\n            aria-selected={pane.active}\n            tabindex={tabindex}\n            onFocus={() => setFocus()}\n            onBlur={() => removeFocus()}\n            onClick={(ev: MouseEvent) => {\n              removeFocus()\n              props.onTabClick(pane, tabName, ev)\n            }}\n            onKeydown={(ev: KeyboardEvent) => {\n              if (\n                closable &&\n                (ev.code === EVENT_CODE.delete ||\n                  ev.code === EVENT_CODE.backspace)\n              ) {\n                props.onTabRemove(pane, ev)\n              }\n            }}\n          >\n            {...[tabLabelContent, btnClose]}\n          </div>\n        )\n      })\n\n      return (\n        <div\n          ref={el$}\n          class={[\n            ns.e('nav-wrap'),\n            ns.is('scrollable', !!scrollable.value),\n            ns.is(rootTabs.props.tabPosition),\n          ]}\n        >\n          {scrollBtn}\n          <div class={ns.e('nav-scroll')} ref={navScroll$}>\n            <div\n              class={[\n                ns.e('nav'),\n                ns.is(rootTabs.props.tabPosition),\n                ns.is(\n                  'stretch',\n                  props.stretch &&\n                    ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n                ),\n              ]}\n              ref={nav$}\n              style={navStyle.value}\n              role=\"tablist\"\n              onKeydown={changeTab}\n            >\n              {...[\n                !props.type ? <TabBar tabs={[...props.panes]} /> : null,\n                tabs,\n              ]}\n            </div>\n          </div>\n        </div>\n      )\n    }\n  },\n})\n\nexport type TabNavInstance = InstanceType<typeof TabNav>\nexport default TabNav\n"]},"metadata":{},"sourceType":"module"}