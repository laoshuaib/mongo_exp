{"ast":null,"code":"import '../../../../utils/index.mjs';\nimport { HORIZONTAL, VERTICAL } from '../defaults.mjs';\nimport { cAF, rAF } from '../../../../utils/raf.mjs';\nimport { isFirefox } from '../../../../utils/browser.mjs';\nconst LayoutKeys = {\n  [HORIZONTAL]: \"deltaX\",\n  [VERTICAL]: \"deltaY\"\n};\n\nconst useWheel = ({\n  atEndEdge,\n  atStartEdge,\n  layout\n}, onWheelDelta) => {\n  let frameHandle;\n  let offset = 0;\n\n  const hasReachedEdge = offset2 => {\n    const edgeReached = offset2 < 0 && atStartEdge.value || offset2 > 0 && atEndEdge.value;\n    return edgeReached;\n  };\n\n  const onWheel = e => {\n    cAF(frameHandle);\n    const newOffset = e[LayoutKeys[layout.value]];\n    if (hasReachedEdge(offset) && hasReachedEdge(offset + newOffset)) return;\n    offset += newOffset;\n\n    if (!isFirefox()) {\n      e.preventDefault();\n    }\n\n    frameHandle = rAF(() => {\n      onWheelDelta(offset);\n      offset = 0;\n    });\n  };\n\n  return {\n    hasReachedEdge,\n    onWheel\n  };\n};\n\nexport { useWheel as default };","map":{"version":3,"mappings":";;;;AAEA,MAAMA,UAAU,GAAG;EACjB,CAACC,UAAD,GAAc,QADG;EAEjB,CAACC,QAAD,GAAY;AAFK,CAAnB;;AAIK,MAACC,QAAQ,GAAG,CAAC;EAAEC,SAAF;EAAaC,WAAb;EAA0BC;AAA1B,CAAD,EAAqCC,YAArC,KAAsD;EACrE,IAAIC,WAAJ;EACA,IAAIC,MAAM,GAAG,CAAb;;EACA,MAAMC,cAAc,GAAIC,OAAD,IAAa;IAClC,MAAMC,WAAW,GAAGD,OAAO,GAAG,CAAV,IAAeN,WAAW,CAACQ,KAA3B,IAAoCF,OAAO,GAAG,CAAV,IAAeP,SAAS,CAACS,KAAjF;IACA,OAAOD,WAAP;EACD,CAHD;;EAIA,MAAME,OAAO,GAAIC,CAAD,IAAO;IACrBC,GAAG,CAACR,WAAD,CAAH;IACA,MAAMS,SAAS,GAAGF,CAAC,CAACf,UAAU,CAACM,MAAM,CAACO,KAAR,CAAX,CAAnB;IACA,IAAIH,cAAc,CAACD,MAAD,CAAd,IAA0BC,cAAc,CAACD,MAAM,GAAGQ,SAAV,CAA5C,EACE;IACFR,MAAM,IAAIQ,SAAV;;IACA,IAAI,CAACC,SAAS,EAAd,EAAkB;MAChBH,CAAC,CAACI,cAAF;IACD;;IACDX,WAAW,GAAGY,GAAG,CAAC,MAAM;MACtBb,YAAY,CAACE,MAAD,CAAZ;MACAA,MAAM,GAAG,CAAT;IACD,CAHgB,CAAjB;EAID,CAbD;;EAcA,OAAO;IACLC,cADK;IAELI;EAFK,CAAP;AAIF,CAzBK","names":["LayoutKeys","HORIZONTAL","VERTICAL","useWheel","atEndEdge","atStartEdge","layout","onWheelDelta","frameHandle","offset","hasReachedEdge","offset2","edgeReached","value","onWheel","e","cAF","newOffset","isFirefox","preventDefault","rAF"],"sources":["../../../../../../../packages/components/virtual-list/src/hooks/use-wheel.ts"],"sourcesContent":["// @ts-nocheck\nimport { cAF, isFirefox, rAF } from '@element-plus/utils'\nimport { HORIZONTAL, VERTICAL } from '../defaults'\n\nimport type { ComputedRef } from 'vue'\nimport type { LayoutDirection } from '../types'\n\nconst LayoutKeys = {\n  [HORIZONTAL]: 'deltaX',\n  [VERTICAL]: 'deltaY',\n}\n\ninterface ListWheelState {\n  atStartEdge: ComputedRef<boolean> // exclusive to reachEnd\n  atEndEdge: ComputedRef<boolean>\n  layout: ComputedRef<LayoutDirection>\n}\n\ntype ListWheelHandler = (offset: number) => void\n\nconst useWheel = (\n  { atEndEdge, atStartEdge, layout }: ListWheelState,\n  onWheelDelta: ListWheelHandler\n) => {\n  let frameHandle: number\n  let offset = 0\n\n  // let scrollLock = false\n  // let lockHandle = null\n\n  // const lockScroll = () => {\n  //   clearTimeout(lockHandle)\n  //   scrollLock = true\n  //   lockHandle = setTimeout(() => scrollLock = false, 50)\n  // }\n\n  const hasReachedEdge = (offset: number) => {\n    const edgeReached =\n      (offset < 0 && atStartEdge.value) || (offset > 0 && atEndEdge.value)\n\n    return edgeReached\n  }\n\n  const onWheel = (e: WheelEvent) => {\n    cAF(frameHandle)\n\n    const newOffset = e[LayoutKeys[layout.value]]\n\n    if (hasReachedEdge(offset) && hasReachedEdge(offset + newOffset)) return\n\n    offset += newOffset\n\n    if (!isFirefox()) {\n      e.preventDefault()\n    }\n\n    frameHandle = rAF(() => {\n      onWheelDelta(offset)\n      offset = 0\n    })\n  }\n\n  return {\n    hasReachedEdge,\n    onWheel,\n  }\n}\n\nexport default useWheel\n"]},"metadata":{},"sourceType":"module"}