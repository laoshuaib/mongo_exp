{"ast":null,"code":"import axios from \"axios\"; // import router from \"@/router\";\n//axios——网络请求库\n\nconst request = axios.create({\n  baseURL: \"/api\",\n  timeout: 5000\n}); // request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\n\nrequest.interceptors.request.use(config => {\n  config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\"; // config.headers['token'] = user.token;  // 设置请求头\n  //取出sessionStorage里面缓存的用户信息\n  //暂时屏蔽拦截器\n  // let userJson = sessionStorage.getItem(\"user\");\n  // if (!userJson) {\n  //   router.push(\"/login\").catch((err) => err);\n  // }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n}); // response 拦截器\n// 可以在接口响应后统一处理结果\n\nrequest.interceptors.response.use(response => {\n  let res = response.data; // 如果是返回的文件\n\n  if (response.config.responseType === \"blob\") {\n    return res;\n  } // 兼容服务端返回的字符串数据\n\n\n  if (typeof res === \"string\") {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  return res;\n}, error => {\n  console.log(\"err\" + error); // for debug\n\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","request","create","baseURL","timeout","interceptors","use","config","headers","error","Promise","reject","response","res","data","responseType","JSON","parse","console","log"],"sources":["C:/Users/laoshuaib/Desktop/mongo_exp_fro/untils/request.js"],"sourcesContent":["import axios from \"axios\";\n// import router from \"@/router\";\n//axios——网络请求库\nconst request = axios.create({\n  baseURL: \"/api\",\n  timeout: 5000,\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(\n  (config) => {\n    config.headers[\"Content-Type\"] = \"application/json;charset=utf-8\";\n\n    // config.headers['token'] = user.token;  // 设置请求头\n    //取出sessionStorage里面缓存的用户信息\n    //暂时屏蔽拦截器\n    // let userJson = sessionStorage.getItem(\"user\");\n    // if (!userJson) {\n    //   router.push(\"/login\").catch((err) => err);\n    // }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(\n  (response) => {\n    let res = response.data;\n    // 如果是返回的文件\n    if (response.config.responseType === \"blob\") {\n      return res;\n    }\n    // 兼容服务端返回的字符串数据\n    if (typeof res === \"string\") {\n      res = res ? JSON.parse(res) : res;\n    }\n    return res;\n  },\n  (error) => {\n    console.log(\"err\" + error); // for debug\n    return Promise.reject(error);\n  }\n);\n\nexport default request;\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AACA;;AACA,MAAMC,OAAO,GAAGD,KAAK,CAACE,MAAN,CAAa;EAC3BC,OAAO,EAAE,MADkB;EAE3BC,OAAO,EAAE;AAFkB,CAAb,CAAhB,C,CAKA;AACA;AACA;;AACAH,OAAO,CAACI,YAAR,CAAqBJ,OAArB,CAA6BK,GAA7B,CACGC,MAAD,IAAY;EACVA,MAAM,CAACC,OAAP,CAAe,cAAf,IAAiC,gCAAjC,CADU,CAGV;EACA;EACA;EACA;EACA;EACA;EACA;;EACA,OAAOD,MAAP;AACD,CAZH,EAaGE,KAAD,IAAW;EACT,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAfH,E,CAkBA;AACA;;AACAR,OAAO,CAACI,YAAR,CAAqBO,QAArB,CAA8BN,GAA9B,CACGM,QAAD,IAAc;EACZ,IAAIC,GAAG,GAAGD,QAAQ,CAACE,IAAnB,CADY,CAEZ;;EACA,IAAIF,QAAQ,CAACL,MAAT,CAAgBQ,YAAhB,KAAiC,MAArC,EAA6C;IAC3C,OAAOF,GAAP;EACD,CALW,CAMZ;;;EACA,IAAI,OAAOA,GAAP,KAAe,QAAnB,EAA6B;IAC3BA,GAAG,GAAGA,GAAG,GAAGG,IAAI,CAACC,KAAL,CAAWJ,GAAX,CAAH,GAAqBA,GAA9B;EACD;;EACD,OAAOA,GAAP;AACD,CAZH,EAaGJ,KAAD,IAAW;EACTS,OAAO,CAACC,GAAR,CAAY,QAAQV,KAApB,EADS,CACmB;;EAC5B,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAhBH;AAmBA,eAAeR,OAAf"},"metadata":{},"sourceType":"module"}