{"ast":null,"code":"import { ref } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport '../../../utils/index.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\n\nfunction useInput(handleInput) {\n  const isComposing = ref(false);\n\n  const handleCompositionStart = () => {\n    isComposing.value = true;\n  };\n\n  const handleCompositionUpdate = event => {\n    const text = event.target.value;\n    const lastCharacter = text[text.length - 1] || \"\";\n    isComposing.value = !isKorean(lastCharacter);\n  };\n\n  const handleCompositionEnd = event => {\n    if (isComposing.value) {\n      isComposing.value = false;\n\n      if (isFunction(handleInput)) {\n        handleInput(event);\n      }\n    }\n  };\n\n  return {\n    handleCompositionStart,\n    handleCompositionUpdate,\n    handleCompositionEnd\n  };\n}\n\nexport { useInput };","map":{"version":3,"mappings":";;;;;AAGO,SAASA,QAAT,CAAkBC,WAAlB,EAA+B;EACpC,MAAMC,WAAW,GAAGC,GAAG,CAAC,KAAD,CAAvB;;EACA,MAAMC,sBAAsB,GAAG,MAAM;IACnCF,WAAW,CAACG,KAAZ,GAAoB,IAApB;EACD,CAFD;;EAGA,MAAMC,uBAAuB,GAAIC,KAAD,IAAW;IACzC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaJ,KAA1B;IACA,MAAMK,aAAa,GAAGF,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAAJ,IAAyB,EAA/C;IACAT,WAAW,CAACG,KAAZ,GAAoB,CAACO,QAAQ,CAACF,aAAD,CAA7B;EACD,CAJD;;EAKA,MAAMG,oBAAoB,GAAIN,KAAD,IAAW;IACtC,IAAIL,WAAW,CAACG,KAAhB,EAAuB;MACrBH,WAAW,CAACG,KAAZ,GAAoB,KAApB;;MACA,IAAIS,UAAU,CAACb,WAAD,CAAd,EAA6B;QAC3BA,WAAW,CAACM,KAAD,CAAX;MACD;IACF;EACF,CAPD;;EAQA,OAAO;IACLH,sBADK;IAELE,uBAFK;IAGLO;EAHK,CAAP;AAKF","names":["useInput","handleInput","isComposing","ref","handleCompositionStart","value","handleCompositionUpdate","event","text","target","lastCharacter","length","isKorean","handleCompositionEnd","isFunction"],"sources":["../../../../../../packages/components/select-v2/src/useInput.ts"],"sourcesContent":["// @ts-nocheck\nimport { ref } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport { isKorean } from '@element-plus/utils'\n\nexport function useInput(handleInput: (event: InputEvent) => void) {\n  const isComposing = ref(false)\n\n  const handleCompositionStart = () => {\n    isComposing.value = true\n  }\n\n  const handleCompositionUpdate = (event) => {\n    const text = event.target.value\n    const lastCharacter = text[text.length - 1] || ''\n    isComposing.value = !isKorean(lastCharacter)\n  }\n\n  const handleCompositionEnd = (event) => {\n    if (isComposing.value) {\n      isComposing.value = false\n      if (isFunction(handleInput)) {\n        handleInput(event)\n      }\n    }\n  }\n\n  return {\n    handleCompositionStart,\n    handleCompositionUpdate,\n    handleCompositionEnd,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}