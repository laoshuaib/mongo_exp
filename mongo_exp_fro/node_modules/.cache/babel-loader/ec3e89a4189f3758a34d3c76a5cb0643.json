{"ast":null,"code":"import { ref, unref, provide, inject, onMounted, onBeforeUnmount } from 'vue';\nimport Collection from './collection2.mjs';\nimport CollectionItem from './collection-item.mjs';\nconst COLLECTION_ITEM_SIGN = `data-el-collection-item`;\n\nconst createCollectionWithScope = name => {\n  const COLLECTION_NAME = `El${name}Collection`;\n  const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`;\n  const COLLECTION_INJECTION_KEY = Symbol(COLLECTION_NAME);\n  const COLLECTION_ITEM_INJECTION_KEY = Symbol(COLLECTION_ITEM_NAME);\n  const ElCollection = { ...Collection,\n    name: COLLECTION_NAME,\n\n    setup() {\n      const collectionRef = ref(null);\n      const itemMap = /* @__PURE__ */new Map();\n\n      const getItems = () => {\n        const collectionEl = unref(collectionRef);\n        if (!collectionEl) return [];\n        const orderedNodes = Array.from(collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`));\n        const items = [...itemMap.values()];\n        return items.sort((a, b) => orderedNodes.indexOf(a.ref) - orderedNodes.indexOf(b.ref));\n      };\n\n      provide(COLLECTION_INJECTION_KEY, {\n        itemMap,\n        getItems,\n        collectionRef\n      });\n    }\n\n  };\n  const ElCollectionItem = { ...CollectionItem,\n    name: COLLECTION_ITEM_NAME,\n\n    setup(_, {\n      attrs\n    }) {\n      const collectionItemRef = ref(null);\n      const collectionInjection = inject(COLLECTION_INJECTION_KEY, void 0);\n      provide(COLLECTION_ITEM_INJECTION_KEY, {\n        collectionItemRef\n      });\n      onMounted(() => {\n        const collectionItemEl = unref(collectionItemRef);\n\n        if (collectionItemEl) {\n          collectionInjection.itemMap.set(collectionItemEl, {\n            ref: collectionItemEl,\n            ...attrs\n          });\n        }\n      });\n      onBeforeUnmount(() => {\n        const collectionItemEl = unref(collectionItemRef);\n        collectionInjection.itemMap.delete(collectionItemEl);\n      });\n    }\n\n  };\n  return {\n    COLLECTION_INJECTION_KEY,\n    COLLECTION_ITEM_INJECTION_KEY,\n    ElCollection,\n    ElCollectionItem\n  };\n};\n\nexport { COLLECTION_ITEM_SIGN, createCollectionWithScope };","map":{"version":3,"mappings":";;;AAGY,MAACA,oBAAoB,GAAI,yBAAzB;;AACA,MAACC,yBAAyB,GAAIC,IAAD,IAAU;EACjD,MAAMC,eAAe,GAAI,KAAID,IAAK,YAAlC;EACA,MAAME,oBAAoB,GAAI,GAAED,eAAgB,MAAhD;EACA,MAAME,wBAAwB,GAAGC,MAAM,CAACH,eAAD,CAAvC;EACA,MAAMI,6BAA6B,GAAGD,MAAM,CAACF,oBAAD,CAA5C;EACA,MAAMI,YAAY,GAAG,EACnB,GAAGC,UADgB;IAEnBP,IAAI,EAAEC,eAFa;;IAGnBO,KAAK,GAAG;MACN,MAAMC,aAAa,GAAGC,GAAG,CAAC,IAAD,CAAzB;MACA,MAAMC,OAAO,kBAAmB,IAAIC,GAAJ,EAAhC;;MACA,MAAMC,QAAQ,GAAG,MAAM;QACrB,MAAMC,YAAY,GAAGC,KAAK,CAACN,aAAD,CAA1B;QACA,IAAI,CAACK,YAAL,EACE,OAAO,EAAP;QACF,MAAME,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAWJ,YAAY,CAACK,gBAAb,CAA+B,IAAGrB,oBAAqB,GAAvD,CAAX,CAArB;QACA,MAAMsB,KAAK,GAAG,CAAC,GAAGT,OAAO,CAACU,MAAR,EAAJ,CAAd;QACA,OAAOD,KAAK,CAACE,IAAN,CAAW,CAACC,CAAD,EAAIC,CAAJ,KAAUR,YAAY,CAACS,OAAb,CAAqBF,CAAC,CAACb,GAAvB,IAA8BM,YAAY,CAACS,OAAb,CAAqBD,CAAC,CAACd,GAAvB,CAAnD,CAAP;MACD,CAPD;;MAQAgB,OAAO,CAACvB,wBAAD,EAA2B;QAChCQ,OADgC;QAEhCE,QAFgC;QAGhCJ;MAHgC,CAA3B,CAAP;IAKD;;EAnBkB,CAArB;EAqBA,MAAMkB,gBAAgB,GAAG,EACvB,GAAGC,cADoB;IAEvB5B,IAAI,EAAEE,oBAFiB;;IAGvBM,KAAK,CAACqB,CAAD,EAAI;MAAEC;IAAF,CAAJ,EAAe;MAClB,MAAMC,iBAAiB,GAAGrB,GAAG,CAAC,IAAD,CAA7B;MACA,MAAMsB,mBAAmB,GAAGC,MAAM,CAAC9B,wBAAD,EAA2B,KAAK,CAAhC,CAAlC;MACAuB,OAAO,CAACrB,6BAAD,EAAgC;QACrC0B;MADqC,CAAhC,CAAP;MAGAG,SAAS,CAAC,MAAM;QACd,MAAMC,gBAAgB,GAAGpB,KAAK,CAACgB,iBAAD,CAA9B;;QACA,IAAII,gBAAJ,EAAsB;UACpBH,mBAAmB,CAACrB,OAApB,CAA4ByB,GAA5B,CAAgCD,gBAAhC,EAAkD;YAChDzB,GAAG,EAAEyB,gBAD2C;YAEhD,GAAGL;UAF6C,CAAlD;QAID;MACF,CARQ,CAAT;MASAO,eAAe,CAAC,MAAM;QACpB,MAAMF,gBAAgB,GAAGpB,KAAK,CAACgB,iBAAD,CAA9B;QACAC,mBAAmB,CAACrB,OAApB,CAA4B2B,MAA5B,CAAmCH,gBAAnC;MACD,CAHc,CAAf;IAID;;EAtBsB,CAAzB;EAwBA,OAAO;IACLhC,wBADK;IAELE,6BAFK;IAGLC,YAHK;IAILqB;EAJK,CAAP;AAMF,CAxDY","names":["COLLECTION_ITEM_SIGN","createCollectionWithScope","name","COLLECTION_NAME","COLLECTION_ITEM_NAME","COLLECTION_INJECTION_KEY","Symbol","COLLECTION_ITEM_INJECTION_KEY","ElCollection","Collection","setup","collectionRef","ref","itemMap","Map","getItems","collectionEl","unref","orderedNodes","Array","from","querySelectorAll","items","values","sort","a","b","indexOf","provide","ElCollectionItem","CollectionItem","_","attrs","collectionItemRef","collectionInjection","inject","onMounted","collectionItemEl","set","onBeforeUnmount","delete"],"sources":["../../../../../../packages/components/collection/src/collection.ts"],"sourcesContent":["import { inject, onBeforeUnmount, onMounted, provide, ref, unref } from 'vue'\nimport Collection from './collection.vue'\nimport CollectionItem from './collection-item.vue'\n\nimport type { InjectionKey } from 'vue'\nimport type { SetupContext } from '@vue/runtime-core'\nimport type {\n  ElCollectionInjectionContext,\n  ElCollectionItemInjectionContext,\n} from './tokens'\n\nexport const COLLECTION_ITEM_SIGN = `data-el-collection-item`\n\n// Make sure the first letter of name is capitalized\nexport const createCollectionWithScope = (name: string) => {\n  const COLLECTION_NAME = `El${name}Collection`\n  const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`\n  const COLLECTION_INJECTION_KEY: InjectionKey<ElCollectionInjectionContext> =\n    Symbol(COLLECTION_NAME)\n  const COLLECTION_ITEM_INJECTION_KEY: InjectionKey<ElCollectionItemInjectionContext> =\n    Symbol(COLLECTION_ITEM_NAME)\n\n  const ElCollection = {\n    ...Collection,\n    name: COLLECTION_NAME,\n    setup() {\n      const collectionRef = ref<HTMLElement | null>(null)\n      const itemMap: ElCollectionInjectionContext['itemMap'] = new Map()\n      const getItems = () => {\n        const collectionEl = unref(collectionRef)\n\n        if (!collectionEl) return []\n        const orderedNodes = Array.from(\n          collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`)\n        )\n\n        const items = [...itemMap.values()]\n\n        return items.sort(\n          (a, b) => orderedNodes.indexOf(a.ref!) - orderedNodes.indexOf(b.ref!)\n        )\n      }\n\n      provide(COLLECTION_INJECTION_KEY, {\n        itemMap,\n        getItems,\n        collectionRef,\n      })\n    },\n  }\n\n  const ElCollectionItem = {\n    ...CollectionItem,\n    name: COLLECTION_ITEM_NAME,\n    setup(_: unknown, { attrs }: SetupContext) {\n      const collectionItemRef = ref<HTMLElement | null>(null)\n      const collectionInjection = inject(COLLECTION_INJECTION_KEY, undefined)!\n\n      provide(COLLECTION_ITEM_INJECTION_KEY, {\n        collectionItemRef,\n      })\n\n      onMounted(() => {\n        const collectionItemEl = unref(collectionItemRef)\n        if (collectionItemEl) {\n          collectionInjection.itemMap.set(collectionItemEl, {\n            ref: collectionItemEl,\n            ...attrs,\n          })\n        }\n      })\n\n      onBeforeUnmount(() => {\n        const collectionItemEl = unref(collectionItemRef)!\n        collectionInjection.itemMap.delete(collectionItemEl)\n      })\n    },\n  }\n\n  return {\n    COLLECTION_INJECTION_KEY,\n    COLLECTION_ITEM_INJECTION_KEY,\n    ElCollection,\n    ElCollectionItem,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}