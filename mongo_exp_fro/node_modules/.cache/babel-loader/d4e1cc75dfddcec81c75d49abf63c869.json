{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\n\nconst parseTime = time => {\n  const values = (time || \"\").split(\":\");\n\n  if (values.length >= 2) {\n    let hours = Number.parseInt(values[0], 10);\n    const minutes = Number.parseInt(values[1], 10);\n    const timeUpper = time.toUpperCase();\n\n    if (timeUpper.includes(\"AM\") && hours === 12) {\n      hours = 0;\n    } else if (timeUpper.includes(\"PM\") && hours !== 12) {\n      hours += 12;\n    }\n\n    return {\n      hours,\n      minutes\n    };\n  }\n\n  return null;\n};\n\nconst compareTime = (time1, time2) => {\n  const value1 = parseTime(time1);\n  if (!value1) return -1;\n  const value2 = parseTime(time2);\n  if (!value2) return -1;\n  const minutes1 = value1.minutes + value1.hours * 60;\n  const minutes2 = value2.minutes + value2.hours * 60;\n\n  if (minutes1 === minutes2) {\n    return 0;\n  }\n\n  return minutes1 > minutes2 ? 1 : -1;\n};\n\nconst padTime = time => {\n  return `${time}`.padStart(2, \"0\");\n};\n\nconst formatTime = time => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`;\n};\n\nconst nextTime = (time, step) => {\n  const timeValue = parseTime(time);\n  if (!timeValue) return \"\";\n  const stepValue = parseTime(step);\n  if (!stepValue) return \"\";\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes\n  };\n  next.minutes += stepValue.minutes;\n  next.hours += stepValue.hours;\n  next.hours += Math.floor(next.minutes / 60);\n  next.minutes = next.minutes % 60;\n  return formatTime(next);\n};\n\nexport { compareTime, formatTime, nextTime, padTime, parseTime };","map":{"version":3,"mappings":";;AAAY,MAACA,SAAS,GAAIC,IAAD,IAAU;EACjC,MAAMC,MAAM,GAAG,CAACD,IAAI,IAAI,EAAT,EAAaE,KAAb,CAAmB,GAAnB,CAAf;;EACA,IAAID,MAAM,CAACE,MAAP,IAAiB,CAArB,EAAwB;IACtB,IAAIC,KAAK,GAAGC,MAAM,CAACC,QAAP,CAAgBL,MAAM,CAAC,CAAD,CAAtB,EAA2B,EAA3B,CAAZ;IACA,MAAMM,OAAO,GAAGF,MAAM,CAACC,QAAP,CAAgBL,MAAM,CAAC,CAAD,CAAtB,EAA2B,EAA3B,CAAhB;IACA,MAAMO,SAAS,GAAGR,IAAI,CAACS,WAAL,EAAlB;;IACA,IAAID,SAAS,CAACE,QAAV,CAAmB,IAAnB,KAA4BN,KAAK,KAAK,EAA1C,EAA8C;MAC5CA,KAAK,GAAG,CAAR;IACD,CAFD,MAEO,IAAII,SAAS,CAACE,QAAV,CAAmB,IAAnB,KAA4BN,KAAK,KAAK,EAA1C,EAA8C;MACnDA,KAAK,IAAI,EAAT;IACD;;IACD,OAAO;MACLA,KADK;MAELG;IAFK,CAAP;EAID;;EACD,OAAO,IAAP;AACF,CAjBY;;AAkBA,MAACI,WAAW,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;EAC3C,MAAMC,MAAM,GAAGf,SAAS,CAACa,KAAD,CAAxB;EACA,IAAI,CAACE,MAAL,EACE,OAAO,CAAC,CAAR;EACF,MAAMC,MAAM,GAAGhB,SAAS,CAACc,KAAD,CAAxB;EACA,IAAI,CAACE,MAAL,EACE,OAAO,CAAC,CAAR;EACF,MAAMC,QAAQ,GAAGF,MAAM,CAACP,OAAP,GAAiBO,MAAM,CAACV,KAAP,GAAe,EAAjD;EACA,MAAMa,QAAQ,GAAGF,MAAM,CAACR,OAAP,GAAiBQ,MAAM,CAACX,KAAP,GAAe,EAAjD;;EACA,IAAIY,QAAQ,KAAKC,QAAjB,EAA2B;IACzB,OAAO,CAAP;EACD;;EACD,OAAOD,QAAQ,GAAGC,QAAX,GAAsB,CAAtB,GAA0B,CAAC,CAAlC;AACF,CAbY;;AAcA,MAACC,OAAO,GAAIlB,IAAD,IAAU;EAC/B,OAAQ,GAAEA,IAAK,EAAR,CAAUmB,QAAV,CAAmB,CAAnB,EAAsB,GAAtB,CAAP;AACF,CAFY;;AAGA,MAACC,UAAU,GAAIpB,IAAD,IAAU;EAClC,OAAQ,GAAEkB,OAAO,CAAClB,IAAI,CAACI,KAAN,CAAa,IAAGc,OAAO,CAAClB,IAAI,CAACO,OAAN,CAAe,EAAvD;AACF,CAFY;;AAGA,MAACc,QAAQ,GAAG,CAACrB,IAAD,EAAOsB,IAAP,KAAgB;EACtC,MAAMC,SAAS,GAAGxB,SAAS,CAACC,IAAD,CAA3B;EACA,IAAI,CAACuB,SAAL,EACE,OAAO,EAAP;EACF,MAAMC,SAAS,GAAGzB,SAAS,CAACuB,IAAD,CAA3B;EACA,IAAI,CAACE,SAAL,EACE,OAAO,EAAP;EACF,MAAMC,IAAI,GAAG;IACXrB,KAAK,EAAEmB,SAAS,CAACnB,KADN;IAEXG,OAAO,EAAEgB,SAAS,CAAChB;EAFR,CAAb;EAIAkB,IAAI,CAAClB,OAAL,IAAgBiB,SAAS,CAACjB,OAA1B;EACAkB,IAAI,CAACrB,KAAL,IAAcoB,SAAS,CAACpB,KAAxB;EACAqB,IAAI,CAACrB,KAAL,IAAcsB,IAAI,CAACC,KAAL,CAAWF,IAAI,CAAClB,OAAL,GAAe,EAA1B,CAAd;EACAkB,IAAI,CAAClB,OAAL,GAAekB,IAAI,CAAClB,OAAL,GAAe,EAA9B;EACA,OAAOa,UAAU,CAACK,IAAD,CAAjB;AACF,CAhBY","names":["parseTime","time","values","split","length","hours","Number","parseInt","minutes","timeUpper","toUpperCase","includes","compareTime","time1","time2","value1","value2","minutes1","minutes2","padTime","padStart","formatTime","nextTime","step","timeValue","stepValue","next","Math","floor"],"sources":["../../../../../../packages/components/time-select/src/utils.ts"],"sourcesContent":["interface Time {\n  hours: number\n  minutes: number\n}\n\nexport const parseTime = (time: string): null | Time => {\n  const values = (time || '').split(':')\n  if (values.length >= 2) {\n    let hours = Number.parseInt(values[0], 10)\n    const minutes = Number.parseInt(values[1], 10)\n    const timeUpper = time.toUpperCase()\n    if (timeUpper.includes('AM') && hours === 12) {\n      hours = 0\n    } else if (timeUpper.includes('PM') && hours !== 12) {\n      hours += 12\n    }\n    return {\n      hours,\n      minutes,\n    }\n  }\n\n  return null\n}\n\nexport const compareTime = (time1: string, time2: string): number => {\n  const value1 = parseTime(time1)\n  if (!value1) return -1\n  const value2 = parseTime(time2)\n  if (!value2) return -1\n  const minutes1 = value1.minutes + value1.hours * 60\n  const minutes2 = value2.minutes + value2.hours * 60\n  if (minutes1 === minutes2) {\n    return 0\n  }\n  return minutes1 > minutes2 ? 1 : -1\n}\n\nexport const padTime = (time: number | string) => {\n  return `${time}`.padStart(2, '0')\n}\nexport const formatTime = (time: Time): string => {\n  return `${padTime(time.hours)}:${padTime(time.minutes)}`\n}\n\nexport const nextTime = (time: string, step: string): string => {\n  const timeValue = parseTime(time)\n  if (!timeValue) return ''\n\n  const stepValue = parseTime(step)\n  if (!stepValue) return ''\n\n  const next = {\n    hours: timeValue.hours,\n    minutes: timeValue.minutes,\n  }\n  next.minutes += stepValue.minutes\n  next.hours += stepValue.hours\n  next.hours += Math.floor(next.minutes / 60)\n  next.minutes = next.minutes % 60\n  return formatTime(next)\n}\n"]},"metadata":{},"sourceType":"module"}