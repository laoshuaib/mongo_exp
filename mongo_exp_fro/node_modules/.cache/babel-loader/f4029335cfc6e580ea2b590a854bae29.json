{"ast":null,"code":"import { shallowRef, ref, computed, nextTick } from 'vue';\nimport '../../../../constants/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { useFormItem } from '../../../../hooks/use-form-item/index.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT, CHANGE_EVENT } from '../../../../constants/event.mjs';\n\nconst useSlide = (props, initData, emit) => {\n  const {\n    form: elForm,\n    formItem: elFormItem\n  } = useFormItem();\n  const slider = shallowRef();\n  const firstButton = ref();\n  const secondButton = ref();\n  const buttonRefs = {\n    firstButton,\n    secondButton\n  };\n  const sliderDisabled = computed(() => {\n    return props.disabled || (elForm == null ? void 0 : elForm.disabled) || false;\n  });\n  const minValue = computed(() => {\n    return Math.min(initData.firstValue, initData.secondValue);\n  });\n  const maxValue = computed(() => {\n    return Math.max(initData.firstValue, initData.secondValue);\n  });\n  const barSize = computed(() => {\n    return props.range ? `${100 * (maxValue.value - minValue.value) / (props.max - props.min)}%` : `${100 * (initData.firstValue - props.min) / (props.max - props.min)}%`;\n  });\n  const barStart = computed(() => {\n    return props.range ? `${100 * (minValue.value - props.min) / (props.max - props.min)}%` : \"0%\";\n  });\n  const runwayStyle = computed(() => {\n    return props.vertical ? {\n      height: props.height\n    } : {};\n  });\n  const barStyle = computed(() => {\n    return props.vertical ? {\n      height: barSize.value,\n      bottom: barStart.value\n    } : {\n      width: barSize.value,\n      left: barStart.value\n    };\n  });\n\n  const resetSize = () => {\n    if (slider.value) {\n      initData.sliderSize = slider.value[`client${props.vertical ? \"Height\" : \"Width\"}`];\n    }\n  };\n\n  const getButtonRefByPercent = percent => {\n    const targetValue = props.min + percent * (props.max - props.min) / 100;\n\n    if (!props.range) {\n      return firstButton;\n    }\n\n    let buttonRefName;\n\n    if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {\n      buttonRefName = initData.firstValue < initData.secondValue ? \"firstButton\" : \"secondButton\";\n    } else {\n      buttonRefName = initData.firstValue > initData.secondValue ? \"firstButton\" : \"secondButton\";\n    }\n\n    return buttonRefs[buttonRefName];\n  };\n\n  const setPosition = percent => {\n    const buttonRef = getButtonRefByPercent(percent);\n    buttonRef.value.setPosition(percent);\n    return buttonRef;\n  };\n\n  const setFirstValue = firstValue => {\n    initData.firstValue = firstValue;\n\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue);\n  };\n\n  const setSecondValue = secondValue => {\n    initData.secondValue = secondValue;\n\n    if (props.range) {\n      _emit([minValue.value, maxValue.value]);\n    }\n  };\n\n  const _emit = val => {\n    emit(UPDATE_MODEL_EVENT, val);\n    emit(INPUT_EVENT, val);\n  };\n\n  const emitChange = async () => {\n    await nextTick();\n    emit(CHANGE_EVENT, props.range ? [minValue.value, maxValue.value] : props.modelValue);\n  };\n\n  const handleSliderPointerEvent = event => {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (sliderDisabled.value || initData.dragging) return;\n    resetSize();\n    let newPercent = 0;\n\n    if (props.vertical) {\n      const clientY = (_c = (_b = (_a = event.touches) == null ? void 0 : _a.item(0)) == null ? void 0 : _b.clientY) != null ? _c : event.clientY;\n      const sliderOffsetBottom = slider.value.getBoundingClientRect().bottom;\n      newPercent = (sliderOffsetBottom - clientY) / initData.sliderSize * 100;\n    } else {\n      const clientX = (_f = (_e = (_d = event.touches) == null ? void 0 : _d.item(0)) == null ? void 0 : _e.clientX) != null ? _f : event.clientX;\n      const sliderOffsetLeft = slider.value.getBoundingClientRect().left;\n      newPercent = (clientX - sliderOffsetLeft) / initData.sliderSize * 100;\n    }\n\n    if (newPercent < 0 || newPercent > 100) return;\n    return setPosition(newPercent);\n  };\n\n  const onSliderWrapperPrevent = event => {\n    var _a, _b;\n\n    if (((_a = buttonRefs[\"firstButton\"].value) == null ? void 0 : _a.dragging) || ((_b = buttonRefs[\"secondButton\"].value) == null ? void 0 : _b.dragging)) {\n      event.preventDefault();\n    }\n  };\n\n  const onSliderDown = async event => {\n    const buttonRef = handleSliderPointerEvent(event);\n\n    if (buttonRef) {\n      await nextTick();\n      buttonRef.value.onButtonDown(event);\n    }\n  };\n\n  const onSliderClick = event => {\n    const buttonRef = handleSliderPointerEvent(event);\n\n    if (buttonRef) {\n      emitChange();\n    }\n  };\n\n  return {\n    elFormItem,\n    slider,\n    firstButton,\n    secondButton,\n    sliderDisabled,\n    minValue,\n    maxValue,\n    runwayStyle,\n    barStyle,\n    resetSize,\n    setPosition,\n    emitChange,\n    onSliderWrapperPrevent,\n    onSliderClick,\n    onSliderDown,\n    setFirstValue,\n    setSecondValue\n  };\n};\n\nexport { useSlide };","map":{"version":3,"mappings":"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","names":["useSlide","props","initData","emit","form","elForm","formItem","elFormItem","useFormItem","slider","shallowRef","firstButton","ref","secondButton","buttonRefs","sliderDisabled","computed","disabled","minValue","Math","min","firstValue","secondValue","maxValue","max","barSize","range","value","barStart","runwayStyle","vertical","height","barStyle","bottom","width","left","resetSize","sliderSize","getButtonRefByPercent","percent","targetValue","buttonRefName","abs","setPosition","buttonRef","setFirstValue","_emit","setSecondValue","val","UPDATE_MODEL_EVENT","INPUT_EVENT","emitChange","nextTick","CHANGE_EVENT","modelValue","handleSliderPointerEvent","event","_a","_b","_c","_d","_e","_f","dragging","newPercent","clientY","touches","item","sliderOffsetBottom","getBoundingClientRect","clientX","sliderOffsetLeft","onSliderWrapperPrevent","preventDefault","onSliderDown","onButtonDown","onSliderClick"],"sources":["../../../../../../../packages/components/slider/src/composables/use-slide.ts"],"sourcesContent":["import { computed, nextTick, ref, shallowRef } from 'vue'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { useFormItem } from '@element-plus/hooks'\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { Arrayable } from '@element-plus/utils'\nimport type { SliderEmits, SliderInitData, SliderProps } from '../slider'\nimport type { ButtonRefs, SliderButtonInstance } from '../button'\n\nexport const useSlide = (\n  props: SliderProps,\n  initData: SliderInitData,\n  emit: SetupContext<SliderEmits>['emit']\n) => {\n  const { form: elForm, formItem: elFormItem } = useFormItem()\n\n  const slider = shallowRef<HTMLElement>()\n\n  const firstButton = ref<SliderButtonInstance>()\n\n  const secondButton = ref<SliderButtonInstance>()\n\n  const buttonRefs: ButtonRefs = {\n    firstButton,\n    secondButton,\n  }\n\n  const sliderDisabled = computed(() => {\n    return props.disabled || elForm?.disabled || false\n  })\n\n  const minValue = computed(() => {\n    return Math.min(initData.firstValue, initData.secondValue)\n  })\n\n  const maxValue = computed(() => {\n    return Math.max(initData.firstValue, initData.secondValue)\n  })\n\n  const barSize = computed(() => {\n    return props.range\n      ? `${\n          (100 * (maxValue.value - minValue.value)) / (props.max - props.min)\n        }%`\n      : `${\n          (100 * (initData.firstValue - props.min)) / (props.max - props.min)\n        }%`\n  })\n\n  const barStart = computed(() => {\n    return props.range\n      ? `${(100 * (minValue.value - props.min)) / (props.max - props.min)}%`\n      : '0%'\n  })\n\n  const runwayStyle = computed<CSSProperties>(() => {\n    return props.vertical ? { height: props.height } : {}\n  })\n\n  const barStyle = computed<CSSProperties>(() => {\n    return props.vertical\n      ? {\n          height: barSize.value,\n          bottom: barStart.value,\n        }\n      : {\n          width: barSize.value,\n          left: barStart.value,\n        }\n  })\n\n  const resetSize = () => {\n    if (slider.value) {\n      initData.sliderSize =\n        slider.value[`client${props.vertical ? 'Height' : 'Width'}`]\n    }\n  }\n\n  const getButtonRefByPercent = (\n    percent: number\n  ): Ref<SliderButtonInstance | undefined> => {\n    const targetValue = props.min + (percent * (props.max - props.min)) / 100\n    if (!props.range) {\n      return firstButton\n    }\n    let buttonRefName: 'firstButton' | 'secondButton'\n    if (\n      Math.abs(minValue.value - targetValue) <\n      Math.abs(maxValue.value - targetValue)\n    ) {\n      buttonRefName =\n        initData.firstValue < initData.secondValue\n          ? 'firstButton'\n          : 'secondButton'\n    } else {\n      buttonRefName =\n        initData.firstValue > initData.secondValue\n          ? 'firstButton'\n          : 'secondButton'\n    }\n    return buttonRefs[buttonRefName]\n  }\n\n  const setPosition = (\n    percent: number\n  ): Ref<SliderButtonInstance | undefined> => {\n    const buttonRef = getButtonRefByPercent(percent)\n    buttonRef.value!.setPosition(percent)\n    return buttonRef\n  }\n\n  const setFirstValue = (firstValue: number | undefined) => {\n    initData.firstValue = firstValue!\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue!)\n  }\n\n  const setSecondValue = (secondValue: number) => {\n    initData.secondValue = secondValue\n\n    if (props.range) {\n      _emit([minValue.value, maxValue.value])\n    }\n  }\n\n  const _emit = (val: Arrayable<number>) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(INPUT_EVENT, val)\n  }\n\n  const emitChange = async () => {\n    await nextTick()\n    emit(\n      CHANGE_EVENT,\n      props.range ? [minValue.value, maxValue.value] : props.modelValue\n    )\n  }\n\n  const handleSliderPointerEvent = (\n    event: MouseEvent | TouchEvent\n  ): Ref<SliderButtonInstance | undefined> | undefined => {\n    if (sliderDisabled.value || initData.dragging) return\n    resetSize()\n    let newPercent = 0\n    if (props.vertical) {\n      const clientY =\n        (event as TouchEvent).touches?.item(0)?.clientY ??\n        (event as MouseEvent).clientY\n      const sliderOffsetBottom = slider.value!.getBoundingClientRect().bottom\n      newPercent = ((sliderOffsetBottom - clientY) / initData.sliderSize) * 100\n    } else {\n      const clientX =\n        (event as TouchEvent).touches?.item(0)?.clientX ??\n        (event as MouseEvent).clientX\n      const sliderOffsetLeft = slider.value!.getBoundingClientRect().left\n      newPercent = ((clientX - sliderOffsetLeft) / initData.sliderSize) * 100\n    }\n    if (newPercent < 0 || newPercent > 100) return\n    return setPosition(newPercent)\n  }\n\n  const onSliderWrapperPrevent = (event: TouchEvent) => {\n    if (\n      buttonRefs['firstButton'].value?.dragging ||\n      buttonRefs['secondButton'].value?.dragging\n    ) {\n      event.preventDefault()\n    }\n  }\n\n  const onSliderDown = async (event: MouseEvent | TouchEvent) => {\n    const buttonRef = handleSliderPointerEvent(event)\n    if (buttonRef) {\n      await nextTick()\n      buttonRef.value!.onButtonDown(event)\n    }\n  }\n\n  const onSliderClick = (event: MouseEvent | TouchEvent) => {\n    const buttonRef = handleSliderPointerEvent(event)\n    if (buttonRef) {\n      emitChange()\n    }\n  }\n\n  return {\n    elFormItem,\n    slider,\n    firstButton,\n    secondButton,\n    sliderDisabled,\n    minValue,\n    maxValue,\n    runwayStyle,\n    barStyle,\n    resetSize,\n    setPosition,\n    emitChange,\n    onSliderWrapperPrevent,\n    onSliderClick,\n    onSliderDown,\n    setFirstValue,\n    setSecondValue,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}