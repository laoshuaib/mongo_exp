{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport { isVNode, createVNode, mergeProps } from 'vue';\nimport '../components/index.mjs';\nimport { tryCall } from '../utils.mjs';\nimport TableV2Row from '../components/row.mjs';\n\nfunction _isSlot(s) {\n  return typeof s === \"function\" || Object.prototype.toString.call(s) === \"[object Object]\" && !isVNode(s);\n}\n\nconst RowRenderer = (props, {\n  slots\n}) => {\n  const {\n    columns,\n    columnsStyles,\n    depthMap,\n    expandColumnKey,\n    expandedRowKeys,\n    estimatedRowHeight,\n    hasFixedColumns,\n    hoveringRowKey,\n    rowData,\n    rowIndex,\n    style,\n    isScrolling,\n    rowProps,\n    rowClass,\n    rowKey,\n    rowEventHandlers,\n    ns,\n    onRowHovered,\n    onRowExpanded\n  } = props;\n  const rowKls = tryCall(rowClass, {\n    columns,\n    rowData,\n    rowIndex\n  }, \"\");\n  const additionalProps = tryCall(rowProps, {\n    columns,\n    rowData,\n    rowIndex\n  });\n  const _rowKey = rowData[rowKey];\n  const depth = depthMap[_rowKey] || 0;\n  const canExpand = Boolean(expandColumnKey);\n  const isFixedRow = rowIndex < 0;\n  const kls = [ns.e(\"row\"), rowKls, {\n    [ns.e(`row-depth-${depth}`)]: canExpand && rowIndex >= 0,\n    [ns.is(\"expanded\")]: canExpand && expandedRowKeys.includes(_rowKey),\n    [ns.is(\"hovered\")]: !isScrolling && _rowKey === hoveringRowKey,\n    [ns.is(\"fixed\")]: !depth && isFixedRow,\n    [ns.is(\"customized\")]: Boolean(slots.row)\n  }];\n  const onRowHover = hasFixedColumns ? onRowHovered : void 0;\n  const _rowProps = { ...additionalProps,\n    columns,\n    columnsStyles,\n    class: kls,\n    depth,\n    expandColumnKey,\n    estimatedRowHeight: isFixedRow ? void 0 : estimatedRowHeight,\n    isScrolling,\n    rowIndex,\n    rowData,\n    rowKey: _rowKey,\n    rowEventHandlers,\n    style\n  };\n  return createVNode(TableV2Row, mergeProps(_rowProps, {\n    \"onRowHover\": onRowHover,\n    \"onRowExpand\": onRowExpanded\n  }), _isSlot(slots) ? slots : {\n    default: () => [slots]\n  });\n};\n\nexport { RowRenderer as default };","map":{"version":3,"mappings":";;;;;;;;;;;;MAkCMA;EAEFC;IACCC,OADDD;IAEIE,aAFJF;IAGAC,QAHAD;IAIAE,eAJAF;IAKAG,eALAH;IAMAI,kBANAJ;IAOAK,eAPAL;IAQAM,cARAN;IASAO,OATAP;IAUAQ,QAVAR;IAWAS,KAXAT;IAYAU,WAZAV;IAaAW,QAbAX;IAcAY,QAdAZ;IAeAa,MAfAb;IAgBAc,gBAhBAd;IAiBAe,EAjBAf;IAkBAgB,YAlBAhB;IAmBAiB;EAnBAjB,IAEIkB,KAFJlB;EAqBAmB;IAnBIlB,OAmBJkB;IAGFV,OAHEU;IAGiClB;EAHjCkB,GAG+B,EAH/BA;EAGmDT;IAA/BT,OAA+BS;IACrDD,OADqDC;IAEnDT;EAFmDS;EAInDA;EAHwC,MAA1CU,8BAA0C;EAK1C,MAAMC,SAAO,GAAUC,wBAAvB;EACA,MAAMF,UAAQjB,WAAQ,IAAtB;EACA,MAAMoB,GAAS,SAAGD,KAAH,GAAWlB,MAAX,EAAWA;IAC1B,IAAMoB,CAAN,CAAgB,aAAWJ,OAA3B,8BAD0BhB;IAEpBqB,OAAG,UAAHA,IACJF,SADU,IAGVlB,iCALwBD;IAMtB,CAACa,EAAE,CAACS,EAAHT,CAAkBG,SAAlBH,CAAD,GAAmBG,gBAAWG,OAAab,mBANrBN;IAOtB,CAACa,EAAE,CAACU,EAAHV,CAAM,OAANA,CAAD,aAA8BO,UAPRpB;IAQtB,CAACa,EAAE,CAACU,EAAHV,CAAM,YAANA,CAAD,GAAoBK,aAAgBD,CAAOO,GAAvB;EARExB,CAAX,CAAf;QAUQuB,UAAG,kBAA6B,kBAAN;EALhC,MAHFE,cAYA,kBAZA;IAcA5B,OAdA;IAgBEA,aAhBF;IAiBEC,KAHgB,KAdlB;IAkBE4B,KAlBF;IAmBEV,eAnBF;IAoBEhB,kBANgB,0CAdlB;IAqBEE,WArBF;IAsBEM,QAtBF;IAuBEF,OAvBF;IAwBED,MAVgB,SAdlB;IAyBEM,gBAzBF;IA0BEC;EA1BF,CAGE;EAWgB,OAAlBe;IAgBA,wBAhBA;IAgBA;EAhBA,IAiB2DZ;IACtDnB,eAFL;EAC2DmB,CAjB3D,CAAkB;AAgBlB","names":["RowRenderer","slots","columns","columnsStyles","depthMap","expandColumnKey","expandedRowKeys","estimatedRowHeight","hasFixedColumns","hoveringRowKey","rowData","rowIndex","style","isScrolling","rowProps","rowClass","rowKey","rowEventHandlers","ns","props","onRowExpanded","depth","_rowKey","Boolean","canExpand","isFixedRow","kls","e","is","row","_rowProps","class","_createVNode"],"sources":["../../../../../../../packages/components/table-v2/src/renderers/row.tsx"],"sourcesContent":["import { Row } from '../components'\nimport { tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs } from 'vue'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\nimport type { TableGridRowSlotParams } from '../table-grid'\n\ntype RowRendererProps = TableGridRowSlotParams &\n  Pick<\n    TableV2Props,\n    | 'expandColumnKey'\n    | 'estimatedRowHeight'\n    | 'rowProps'\n    | 'rowClass'\n    | 'rowKey'\n    | 'rowEventHandlers'\n  > &\n  UnwrapNestedRefs<\n    Pick<\n      UseTableReturn,\n      | 'depthMap'\n      | 'expandedRowKeys'\n      | 'hasFixedColumns'\n      | 'hoveringRowKey'\n      | 'onRowHovered'\n      | 'onRowExpanded'\n      | 'columnsStyles'\n    >\n  > & {\n    ns: UseNamespaceReturn\n  }\n\nconst RowRenderer: FunctionalComponent<RowRendererProps> = (\n  props,\n  { slots }\n) => {\n  const {\n    columns,\n    columnsStyles,\n    depthMap,\n    expandColumnKey,\n    expandedRowKeys,\n    estimatedRowHeight,\n    hasFixedColumns,\n    hoveringRowKey,\n    rowData,\n    rowIndex,\n    style,\n    isScrolling,\n    rowProps,\n    rowClass,\n    rowKey,\n    rowEventHandlers,\n    ns,\n    onRowHovered,\n    onRowExpanded,\n  } = props\n\n  const rowKls = tryCall(rowClass, { columns, rowData, rowIndex }, '')\n  const additionalProps = tryCall(rowProps, {\n    columns,\n    rowData,\n    rowIndex,\n  })\n  const _rowKey = rowData[rowKey]\n  const depth = depthMap[_rowKey] || 0\n  const canExpand = Boolean(expandColumnKey)\n  const isFixedRow = rowIndex < 0\n  const kls = [\n    ns.e('row'),\n    rowKls,\n    {\n      [ns.e(`row-depth-${depth}`)]: canExpand && rowIndex >= 0,\n      [ns.is('expanded')]: canExpand && expandedRowKeys.includes(_rowKey),\n      [ns.is('hovered')]: !isScrolling && _rowKey === hoveringRowKey,\n      [ns.is('fixed')]: !depth && isFixedRow,\n      [ns.is('customized')]: Boolean(slots.row),\n    },\n  ]\n\n  const onRowHover = hasFixedColumns ? onRowHovered : undefined\n\n  const _rowProps = {\n    ...additionalProps,\n    columns,\n    columnsStyles,\n    class: kls,\n    depth,\n    expandColumnKey,\n    estimatedRowHeight: isFixedRow ? undefined : estimatedRowHeight,\n    isScrolling,\n    rowIndex,\n    rowData,\n    rowKey: _rowKey,\n    rowEventHandlers,\n    style,\n  }\n\n  return (\n    <Row {..._rowProps} onRowHover={onRowHover} onRowExpand={onRowExpanded}>\n      {slots}\n    </Row>\n  )\n}\n\nexport default RowRenderer\n"]},"metadata":{},"sourceType":"module"}