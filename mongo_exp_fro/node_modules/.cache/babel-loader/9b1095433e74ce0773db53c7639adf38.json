{"ast":null,"code":"import { ref, computed, unref, watch } from 'vue';\n\nconst useData = (props, {\n  expandedRowKeys,\n  lastRenderedRowIndex,\n  resetAfterIndex\n}) => {\n  const depthMap = ref({});\n  const flattenedData = computed(() => {\n    const depths = {};\n    const {\n      data: data2,\n      rowKey\n    } = props;\n\n    const _expandedRowKeys = unref(expandedRowKeys);\n\n    if (!_expandedRowKeys || !_expandedRowKeys.length) return data2;\n    const array = [];\n    const keysSet = /* @__PURE__ */new Set();\n\n    _expandedRowKeys.forEach(x => keysSet.add(x));\n\n    let copy = data2.slice();\n    copy.forEach(x => depths[x[rowKey]] = 0);\n\n    while (copy.length > 0) {\n      const item = copy.shift();\n      array.push(item);\n\n      if (keysSet.has(item[rowKey]) && Array.isArray(item.children) && item.children.length > 0) {\n        copy = [...item.children, ...copy];\n        item.children.forEach(child => depths[child[rowKey]] = depths[item[rowKey]] + 1);\n      }\n    }\n\n    depthMap.value = depths;\n    return array;\n  });\n  const data = computed(() => {\n    const {\n      data: data2,\n      expandColumnKey\n    } = props;\n    return expandColumnKey ? unref(flattenedData) : data2;\n  });\n  watch(data, (val, prev) => {\n    if (val !== prev) {\n      lastRenderedRowIndex.value = -1;\n      resetAfterIndex(0, true);\n    }\n  });\n  return {\n    data,\n    depthMap\n  };\n};\n\nexport { useData };","map":{"version":3,"mappings":";;AACY,MAACA,OAAO,GAAG,CAACC,KAAD,EAAQ;EAAEC,eAAF;EAAmBC,oBAAnB;EAAyCC;AAAzC,CAAR,KAAuE;EAC5F,MAAMC,QAAQ,GAAGC,GAAG,CAAC,EAAD,CAApB;EACA,MAAMC,aAAa,GAAGC,QAAQ,CAAC,MAAM;IACnC,MAAMC,MAAM,GAAG,EAAf;IACA,MAAM;MAAEC,IAAI,EAAEC,KAAR;MAAeC;IAAf,IAA0BX,KAAhC;;IACA,MAAMY,gBAAgB,GAAGC,KAAK,CAACZ,eAAD,CAA9B;;IACA,IAAI,CAACW,gBAAD,IAAqB,CAACA,gBAAgB,CAACE,MAA3C,EACE,OAAOJ,KAAP;IACF,MAAMK,KAAK,GAAG,EAAd;IACA,MAAMC,OAAO,kBAAmB,IAAIC,GAAJ,EAAhC;;IACAL,gBAAgB,CAACM,OAAjB,CAA0BC,CAAD,IAAOH,OAAO,CAACI,GAAR,CAAYD,CAAZ,CAAhC;;IACA,IAAIE,IAAI,GAAGX,KAAK,CAACY,KAAN,EAAX;IACAD,IAAI,CAACH,OAAL,CAAcC,CAAD,IAAOX,MAAM,CAACW,CAAC,CAACR,MAAD,CAAF,CAAN,GAAoB,CAAxC;;IACA,OAAOU,IAAI,CAACP,MAAL,GAAc,CAArB,EAAwB;MACtB,MAAMS,IAAI,GAAGF,IAAI,CAACG,KAAL,EAAb;MACAT,KAAK,CAACU,IAAN,CAAWF,IAAX;;MACA,IAAIP,OAAO,CAACU,GAAR,CAAYH,IAAI,CAACZ,MAAD,CAAhB,KAA6BgB,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,QAAnB,CAA7B,IAA6DN,IAAI,CAACM,QAAL,CAAcf,MAAd,GAAuB,CAAxF,EAA2F;QACzFO,IAAI,GAAG,CAAC,GAAGE,IAAI,CAACM,QAAT,EAAmB,GAAGR,IAAtB,CAAP;QACAE,IAAI,CAACM,QAAL,CAAcX,OAAd,CAAuBY,KAAD,IAAWtB,MAAM,CAACsB,KAAK,CAACnB,MAAD,CAAN,CAAN,GAAwBH,MAAM,CAACe,IAAI,CAACZ,MAAD,CAAL,CAAN,GAAuB,CAAhF;MACD;IACF;;IACDP,QAAQ,CAAC2B,KAAT,GAAiBvB,MAAjB;IACA,OAAOO,KAAP;EACD,CArB6B,CAA9B;EAsBA,MAAMN,IAAI,GAAGF,QAAQ,CAAC,MAAM;IAC1B,MAAM;MAAEE,IAAI,EAAEC,KAAR;MAAesB;IAAf,IAAmChC,KAAzC;IACA,OAAOgC,eAAe,GAAGnB,KAAK,CAACP,aAAD,CAAR,GAA0BI,KAAhD;EACD,CAHoB,CAArB;EAIAuB,KAAK,CAACxB,IAAD,EAAO,CAACyB,GAAD,EAAMC,IAAN,KAAe;IACzB,IAAID,GAAG,KAAKC,IAAZ,EAAkB;MAChBjC,oBAAoB,CAAC6B,KAArB,GAA6B,CAAC,CAA9B;MACA5B,eAAe,CAAC,CAAD,EAAI,IAAJ,CAAf;IACD;EACF,CALI,CAAL;EAMA,OAAO;IACLM,IADK;IAELL;EAFK,CAAP;AAIF,CAtCY","names":["useData","props","expandedRowKeys","lastRenderedRowIndex","resetAfterIndex","depthMap","ref","flattenedData","computed","depths","data","data2","rowKey","_expandedRowKeys","unref","length","array","keysSet","Set","forEach","x","add","copy","slice","item","shift","push","has","Array","isArray","children","child","value","expandColumnKey","watch","val","prev"],"sources":["../../../../../../../packages/components/table-v2/src/composables/use-data.ts"],"sourcesContent":["import { computed, ref, unref, watch } from 'vue'\n\nimport type { TableV2Props } from '../table'\nimport type { KeyType } from '../types'\nimport type { UseRowReturn } from './use-row'\n\ntype UseDataProps = {\n  expandedRowKeys: UseRowReturn['expandedRowKeys']\n  lastRenderedRowIndex: UseRowReturn['lastRenderedRowIndex']\n  resetAfterIndex: UseRowReturn['resetAfterIndex']\n}\n\nexport const useData = (\n  props: TableV2Props,\n  { expandedRowKeys, lastRenderedRowIndex, resetAfterIndex }: UseDataProps\n) => {\n  const depthMap = ref<Record<KeyType, number>>({})\n\n  const flattenedData = computed(() => {\n    const depths: Record<KeyType, number> = {}\n    const { data, rowKey } = props\n\n    const _expandedRowKeys = unref(expandedRowKeys)\n\n    if (!_expandedRowKeys || !_expandedRowKeys.length) return data\n\n    const array: any[] = []\n    const keysSet = new Set()\n    _expandedRowKeys.forEach((x) => keysSet.add(x))\n\n    let copy: any[] = data.slice()\n    copy.forEach((x) => (depths[x[rowKey]] = 0))\n    while (copy.length > 0) {\n      const item = copy.shift()!\n\n      array.push(item)\n      if (\n        keysSet.has(item[rowKey]) &&\n        Array.isArray(item.children) &&\n        item.children.length > 0\n      ) {\n        copy = [...item.children, ...copy]\n        item.children.forEach(\n          (child: any) => (depths[child[rowKey]] = depths[item[rowKey]] + 1)\n        )\n      }\n    }\n\n    depthMap.value = depths\n    return array\n  })\n\n  const data = computed(() => {\n    const { data, expandColumnKey } = props\n    return expandColumnKey ? unref(flattenedData) : data\n  })\n\n  watch(data, (val, prev) => {\n    if (val !== prev) {\n      lastRenderedRowIndex.value = -1\n      resetAfterIndex(0, true)\n    }\n  })\n\n  return {\n    data,\n    depthMap,\n  }\n}\n\nexport type UseDataReturn = ReturnType<typeof useData>\n"]},"metadata":{},"sourceType":"module"}