{"ast":null,"code":"import { defineComponent, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createTextVNode, toDisplayString } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { pageHeaderProps, pageHeaderEmits } from './page-header.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nconst __default__ = {\n  name: \"ElPageHeader\"\n};\n\nconst _sfc_main = /* @__PURE__ */defineComponent({ ...__default__,\n  props: pageHeaderProps,\n  emits: pageHeaderEmits,\n\n  setup(__props, {\n    emit\n  }) {\n    const {\n      t\n    } = useLocale();\n    const ns = useNamespace(\"page-header\");\n\n    function handleClick() {\n      emit(\"back\");\n    }\n\n    return (_ctx, _cache) => {\n      return openBlock(), createElementBlock(\"div\", {\n        class: normalizeClass(unref(ns).b())\n      }, [createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"left\")),\n        onClick: handleClick\n      }, [_ctx.icon || _ctx.$slots.icon ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(unref(ns).e(\"icon\"))\n      }, [renderSlot(_ctx.$slots, \"icon\", {}, () => [_ctx.icon ? (openBlock(), createBlock(unref(ElIcon), {\n        key: 0\n      }, {\n        default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.icon)))]),\n        _: 1\n      })) : createCommentVNode(\"v-if\", true)])], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"title\"))\n      }, [renderSlot(_ctx.$slots, \"title\", {}, () => [createTextVNode(toDisplayString(_ctx.title || unref(t)(\"el.pageHeader.title\")), 1)])], 2)], 2), createElementVNode(\"div\", {\n        class: normalizeClass(unref(ns).e(\"content\"))\n      }, [renderSlot(_ctx.$slots, \"content\", {}, () => [createTextVNode(toDisplayString(_ctx.content), 1)])], 2)], 2);\n    };\n  }\n\n});\n\nvar PageHeader = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/page-header/src/page-header.vue\"]]);\n\nexport { PageHeader as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;IA+BA;MAAAA;IAAA;IACA;;IAEA;MACAC;IACA","names":["t","emit"],"sources":["../../../../../../packages/components/page-header/src/page-header.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <div :class=\"ns.e('left')\" @click=\"handleClick\">\n      <div v-if=\"icon || $slots.icon\" :class=\"ns.e('icon')\">\n        <slot name=\"icon\">\n          <el-icon v-if=\"icon\">\n            <component :is=\"icon\" />\n          </el-icon>\n        </slot>\n      </div>\n      <div :class=\"ns.e('title')\">\n        <slot name=\"title\">{{ title || t('el.pageHeader.title') }}</slot>\n      </div>\n    </div>\n    <div :class=\"ns.e('content')\">\n      <slot name=\"content\">{{ content }}</slot>\n    </div>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { ElIcon } from '@element-plus/components/icon'\n\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { pageHeaderEmits, pageHeaderProps } from './page-header'\n\ndefineOptions({\n  name: 'ElPageHeader',\n})\ndefineProps(pageHeaderProps)\nconst emit = defineEmits(pageHeaderEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('page-header')\n\nfunction handleClick() {\n  emit('back')\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}