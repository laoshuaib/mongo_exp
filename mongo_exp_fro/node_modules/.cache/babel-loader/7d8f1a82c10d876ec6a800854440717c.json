{"ast":null,"code":"import { defineComponent, h } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { hColgroup } from '../h-helper.mjs';\nimport useStyle from './style-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nvar TableFooter = defineComponent({\n  name: \"ElTableFooter\",\n  props: {\n    fixed: {\n      type: String,\n      default: \"\"\n    },\n    store: {\n      required: true,\n      type: Object\n    },\n    summaryMethod: Function,\n    sumText: String,\n    border: Boolean,\n    defaultSort: {\n      type: Object,\n      default: () => {\n        return {\n          prop: \"\",\n          order: \"\"\n        };\n      }\n    }\n  },\n\n  setup(props) {\n    const {\n      getCellClasses,\n      getCellStyles,\n      columns\n    } = useStyle(props);\n    const ns = useNamespace(\"table\");\n    return {\n      ns,\n      getCellClasses,\n      getCellStyles,\n      columns\n    };\n  },\n\n  render() {\n    const {\n      columns,\n      getCellStyles,\n      getCellClasses,\n      summaryMethod,\n      sumText,\n      ns\n    } = this;\n    const data = this.store.states.data.value;\n    let sums = [];\n\n    if (summaryMethod) {\n      sums = summaryMethod({\n        columns,\n        data\n      });\n    } else {\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = sumText;\n          return;\n        }\n\n        const values = data.map(item => Number(item[column.property]));\n        const precisions = [];\n        let notNumber = true;\n        values.forEach(value => {\n          if (!Number.isNaN(+value)) {\n            notNumber = false;\n            const decimal = `${value}`.split(\".\")[1];\n            precisions.push(decimal ? decimal.length : 0);\n          }\n        });\n        const precision = Math.max.apply(null, precisions);\n\n        if (!notNumber) {\n          sums[index] = values.reduce((prev, curr) => {\n            const value = Number(curr);\n\n            if (!Number.isNaN(+value)) {\n              return Number.parseFloat((prev + curr).toFixed(Math.min(precision, 20)));\n            } else {\n              return prev;\n            }\n          }, 0);\n        } else {\n          sums[index] = \"\";\n        }\n      });\n    }\n\n    return h(\"table\", {\n      class: ns.e(\"footer\"),\n      cellspacing: \"0\",\n      cellpadding: \"0\",\n      border: \"0\"\n    }, [hColgroup({\n      columns\n    }), h(\"tbody\", [h(\"tr\", {}, [...columns.map((column, cellIndex) => h(\"td\", {\n      key: cellIndex,\n      colspan: column.colSpan,\n      rowspan: column.rowSpan,\n      class: getCellClasses(columns, cellIndex),\n      style: getCellStyles(column, cellIndex)\n    }, [h(\"div\", {\n      class: [\"cell\", column.labelClassName]\n    }, [sums[cellIndex]])]))])])]);\n  }\n\n});\nexport { TableFooter as default };","map":{"version":3,"mappings":";;;;;AAIA,kBAAeA,eAAe,CAAC;EAC7BC,IAAI,EAAE,eADuB;EAE7BC,KAAK,EAAE;IACLC,KAAK,EAAE;MACLC,IAAI,EAAEC,MADD;MAELC,OAAO,EAAE;IAFJ,CADF;IAKLC,KAAK,EAAE;MACLC,QAAQ,EAAE,IADL;MAELJ,IAAI,EAAEK;IAFD,CALF;IASLC,aAAa,EAAEC,QATV;IAULC,OAAO,EAAEP,MAVJ;IAWLQ,MAAM,EAAEC,OAXH;IAYLC,WAAW,EAAE;MACXX,IAAI,EAAEK,MADK;MAEXH,OAAO,EAAE,MAAM;QACb,OAAO;UACLU,IAAI,EAAE,EADD;UAELC,KAAK,EAAE;QAFF,CAAP;MAID;IAPU;EAZR,CAFsB;;EAwB7BC,KAAK,CAAChB,KAAD,EAAQ;IACX,MAAM;MAAEiB,cAAF;MAAkBC,aAAlB;MAAiCC;IAAjC,IAA6CC,QAAQ,CAACpB,KAAD,CAA3D;IACA,MAAMqB,EAAE,GAAGC,YAAY,CAAC,OAAD,CAAvB;IACA,OAAO;MACLD,EADK;MAELJ,cAFK;MAGLC,aAHK;MAILC;IAJK,CAAP;EAMD,CAjC4B;;EAkC7BI,MAAM,GAAG;IACP,MAAM;MACJJ,OADI;MAEJD,aAFI;MAGJD,cAHI;MAIJT,aAJI;MAKJE,OALI;MAMJW;IANI,IAOF,IAPJ;IAQA,MAAMG,IAAI,GAAG,KAAKnB,KAAL,CAAWoB,MAAX,CAAkBD,IAAlB,CAAuBE,KAApC;IACA,IAAIC,IAAI,GAAG,EAAX;;IACA,IAAInB,aAAJ,EAAmB;MACjBmB,IAAI,GAAGnB,aAAa,CAAC;QACnBW,OADmB;QAEnBK;MAFmB,CAAD,CAApB;IAID,CALD,MAKO;MACLL,OAAO,CAACS,OAAR,CAAgB,CAACC,MAAD,EAASC,KAAT,KAAmB;QACjC,IAAIA,KAAK,KAAK,CAAd,EAAiB;UACfH,IAAI,CAACG,KAAD,CAAJ,GAAcpB,OAAd;UACA;QACD;;QACD,MAAMqB,MAAM,GAAGP,IAAI,CAACQ,GAAL,CAAUC,IAAD,IAAUC,MAAM,CAACD,IAAI,CAACJ,MAAM,CAACM,QAAR,CAAL,CAAzB,CAAf;QACA,MAAMC,UAAU,GAAG,EAAnB;QACA,IAAIC,SAAS,GAAG,IAAhB;QACAN,MAAM,CAACH,OAAP,CAAgBF,KAAD,IAAW;UACxB,IAAI,CAACQ,MAAM,CAACI,KAAP,CAAa,CAACZ,KAAd,CAAL,EAA2B;YACzBW,SAAS,GAAG,KAAZ;YACA,MAAME,OAAO,GAAI,GAAEb,KAAM,EAAT,CAAWc,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAhB;YACAJ,UAAU,CAACK,IAAX,CAAgBF,OAAO,GAAGA,OAAO,CAACG,MAAX,GAAoB,CAA3C;UACD;QACF,CAND;QAOA,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASC,KAAT,CAAe,IAAf,EAAqBV,UAArB,CAAlB;;QACA,IAAI,CAACC,SAAL,EAAgB;UACdV,IAAI,CAACG,KAAD,CAAJ,GAAcC,MAAM,CAACgB,MAAP,CAAc,CAACC,IAAD,EAAOC,IAAP,KAAgB;YAC1C,MAAMvB,KAAK,GAAGQ,MAAM,CAACe,IAAD,CAApB;;YACA,IAAI,CAACf,MAAM,CAACI,KAAP,CAAa,CAACZ,KAAd,CAAL,EAA2B;cACzB,OAAOQ,MAAM,CAACgB,UAAP,CAAkB,CAACF,IAAI,GAAGC,IAAR,EAAcE,OAAd,CAAsBP,IAAI,CAACQ,GAAL,CAAST,SAAT,EAAoB,EAApB,CAAtB,CAAlB,CAAP;YACD,CAFD,MAEO;cACL,OAAOK,IAAP;YACD;UACF,CAPa,EAOX,CAPW,CAAd;QAQD,CATD,MASO;UACLrB,IAAI,CAACG,KAAD,CAAJ,GAAc,EAAd;QACD;MACF,CA5BD;IA6BD;;IACD,OAAOuB,CAAC,CAAC,OAAD,EAAU;MAChBC,KAAK,EAAEjC,EAAE,CAACkC,CAAH,CAAK,QAAL,CADS;MAEhBC,WAAW,EAAE,GAFG;MAGhBC,WAAW,EAAE,GAHG;MAIhB9C,MAAM,EAAE;IAJQ,CAAV,EAKL,CACD+C,SAAS,CAAC;MACRvC;IADQ,CAAD,CADR,EAIDkC,CAAC,CAAC,OAAD,EAAU,CACTA,CAAC,CAAC,IAAD,EAAO,EAAP,EAAW,CACV,GAAGlC,OAAO,CAACa,GAAR,CAAY,CAACH,MAAD,EAAS8B,SAAT,KAAuBN,CAAC,CAAC,IAAD,EAAO;MAC5CO,GAAG,EAAED,SADuC;MAE5CE,OAAO,EAAEhC,MAAM,CAACiC,OAF4B;MAG5CC,OAAO,EAAElC,MAAM,CAACmC,OAH4B;MAI5CV,KAAK,EAAErC,cAAc,CAACE,OAAD,EAAUwC,SAAV,CAJuB;MAK5CM,KAAK,EAAE/C,aAAa,CAACW,MAAD,EAAS8B,SAAT;IALwB,CAAP,EAMpC,CACDN,CAAC,CAAC,KAAD,EAAQ;MACPC,KAAK,EAAE,CAAC,MAAD,EAASzB,MAAM,CAACqC,cAAhB;IADA,CAAR,EAEE,CAACvC,IAAI,CAACgC,SAAD,CAAL,CAFF,CADA,CANoC,CAApC,CADO,CAAX,CADQ,CAAV,CAJA,CALK,CAAR;EAyBD;;AA1G4B,CAAD,CAA9B","names":["defineComponent","name","props","fixed","type","String","default","store","required","Object","summaryMethod","Function","sumText","border","Boolean","defaultSort","prop","order","setup","getCellClasses","getCellStyles","columns","useStyle","ns","useNamespace","render","data","states","value","sums","forEach","column","index","values","map","item","Number","property","precisions","notNumber","isNaN","decimal","split","push","length","precision","Math","max","apply","reduce","prev","curr","parseFloat","toFixed","min","h","class","e","cellspacing","cellpadding","hColgroup","cellIndex","key","colspan","colSpan","rowspan","rowSpan","style","labelClassName"],"sources":["../../../../../../../packages/components/table/src/table-footer/index.ts"],"sourcesContent":["// @ts-nocheck\nimport { defineComponent, h } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { hColgroup } from '../h-helper'\nimport useStyle from './style-helper'\nimport type { Store } from '../store'\n\nimport type { PropType } from 'vue'\nimport type { DefaultRow, Sort, SummaryMethod } from '../table/defaults'\nexport interface TableFooter<T> {\n  fixed: string\n  store: Store<T>\n  summaryMethod: SummaryMethod<T>\n  sumText: string\n  border: boolean\n  defaultSort: Sort\n}\n\nexport default defineComponent({\n  name: 'ElTableFooter',\n\n  props: {\n    fixed: {\n      type: String,\n      default: '',\n    },\n    store: {\n      required: true,\n      type: Object as PropType<TableFooter<DefaultRow>['store']>,\n    },\n    summaryMethod: Function as PropType<\n      TableFooter<DefaultRow>['summaryMethod']\n    >,\n    sumText: String,\n    border: Boolean,\n    defaultSort: {\n      type: Object as PropType<TableFooter<DefaultRow>['defaultSort']>,\n      default: () => {\n        return {\n          prop: '',\n          order: '',\n        }\n      },\n    },\n  },\n  setup(props) {\n    const { getCellClasses, getCellStyles, columns } = useStyle(\n      props as TableFooter<DefaultRow>\n    )\n    const ns = useNamespace('table')\n    return {\n      ns,\n      getCellClasses,\n      getCellStyles,\n      columns,\n    }\n  },\n  render() {\n    const {\n      columns,\n      getCellStyles,\n      getCellClasses,\n      summaryMethod,\n      sumText,\n      ns,\n    } = this\n    const data = this.store.states.data.value\n    let sums = []\n    if (summaryMethod) {\n      sums = summaryMethod({\n        columns,\n        data,\n      })\n    } else {\n      columns.forEach((column, index) => {\n        if (index === 0) {\n          sums[index] = sumText\n          return\n        }\n        const values = data.map((item) => Number(item[column.property]))\n        const precisions = []\n        let notNumber = true\n        values.forEach((value) => {\n          if (!Number.isNaN(+value)) {\n            notNumber = false\n            const decimal = `${value}`.split('.')[1]\n            precisions.push(decimal ? decimal.length : 0)\n          }\n        })\n        const precision = Math.max.apply(null, precisions)\n        if (!notNumber) {\n          sums[index] = values.reduce((prev, curr) => {\n            const value = Number(curr)\n            if (!Number.isNaN(+value)) {\n              return Number.parseFloat(\n                (prev + curr).toFixed(Math.min(precision, 20))\n              )\n            } else {\n              return prev\n            }\n          }, 0)\n        } else {\n          sums[index] = ''\n        }\n      })\n    }\n    return h(\n      'table',\n      {\n        class: ns.e('footer'),\n        cellspacing: '0',\n        cellpadding: '0',\n        border: '0',\n      },\n      [\n        hColgroup({\n          columns,\n        }),\n        h('tbody', [\n          h('tr', {}, [\n            ...columns.map((column, cellIndex) =>\n              h(\n                'td',\n                {\n                  key: cellIndex,\n                  colspan: column.colSpan,\n                  rowspan: column.rowSpan,\n                  class: getCellClasses(columns, cellIndex),\n                  style: getCellStyles(column, cellIndex),\n                },\n                [\n                  h(\n                    'div',\n                    {\n                      class: ['cell', column.labelClassName],\n                    },\n                    [sums[cellIndex]]\n                  ),\n                ]\n              )\n            ),\n          ]),\n        ]),\n      ]\n    )\n  },\n})\n"]},"metadata":{},"sourceType":"module"}