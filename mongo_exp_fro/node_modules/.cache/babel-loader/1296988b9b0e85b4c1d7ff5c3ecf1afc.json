{"ast":null,"code":"import { isVNode, render, createVNode } from 'vue';\nimport { isClient, isNumber } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { messageConfig } from '../../config-provider/src/config-provider.mjs';\nimport MessageConstructor from './message2.mjs';\nimport { messageDefaults, messageTypes } from './message.mjs';\nimport { instances } from './instance.mjs';\nimport { isString, isFunction } from '@vue/shared';\nimport { isElement } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nlet seed = 1;\n\nconst normalizeOptions = params => {\n  const options = !params || isString(params) || isVNode(params) || isFunction(params) ? {\n    message: params\n  } : params;\n  const normalized = { ...messageDefaults,\n    ...options\n  };\n\n  if (!normalized.appendTo) {\n    normalized.appendTo = document.body;\n  } else if (isString(normalized.appendTo)) {\n    let appendTo = document.querySelector(normalized.appendTo);\n\n    if (!isElement(appendTo)) {\n      debugWarn(\"ElMessage\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n      appendTo = document.body;\n    }\n\n    normalized.appendTo = appendTo;\n  }\n\n  return normalized;\n};\n\nconst closeMessage = instance => {\n  const idx = instances.indexOf(instance);\n  if (idx === -1) return;\n  instances.splice(idx, 1);\n  const {\n    handler\n  } = instance;\n  handler.close();\n};\n\nconst createMessage = ({\n  appendTo,\n  ...options\n}, context) => {\n  const {\n    nextZIndex\n  } = useZIndex();\n  const id = `message_${seed++}`;\n  const userOnClose = options.onClose;\n  const container = document.createElement(\"div\");\n  const props = { ...options,\n    zIndex: nextZIndex() + options.zIndex,\n    id,\n    onClose: () => {\n      userOnClose == null ? void 0 : userOnClose();\n      closeMessage(instance);\n    },\n    onDestroy: () => {\n      render(null, container);\n    }\n  };\n  const vnode = createVNode(MessageConstructor, props, isFunction(props.message) || isVNode(props.message) ? {\n    default: props.message\n  } : null);\n  vnode.appContext = context || message._context;\n  render(vnode, container);\n  appendTo.appendChild(container.firstElementChild);\n  const vm = vnode.component;\n  const handler = {\n    close: () => {\n      vm.exposeProxy.visible = false;\n    }\n  };\n  const instance = {\n    id,\n    vnode,\n    vm,\n    handler,\n    props: vnode.component.props\n  };\n  return instance;\n};\n\nconst message = (options = {}, context) => {\n  if (!isClient) return {\n    close: () => void 0\n  };\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return {\n      close: () => void 0\n    };\n  }\n\n  const normalized = normalizeOptions(options);\n\n  if (normalized.grouping && instances.length) {\n    const instance2 = instances.find(({\n      vnode: vm\n    }) => {\n      var _a;\n\n      return ((_a = vm.props) == null ? void 0 : _a.message) === normalized.message;\n    });\n\n    if (instance2) {\n      instance2.props.repeatNum += 1;\n      instance2.props.type = normalized.type;\n      return instance2.handler;\n    }\n  }\n\n  const instance = createMessage(normalized, context);\n  instances.push(instance);\n  return instance.handler;\n};\n\nmessageTypes.forEach(type => {\n  message[type] = (options = {}, appContext) => {\n    const normalized = normalizeOptions(options);\n    return message({ ...normalized,\n      type\n    }, appContext);\n  };\n});\n\nfunction closeAll(type) {\n  for (const instance of instances) {\n    if (!type || type === instance.props.type) {\n      instance.handler.close();\n    }\n  }\n}\n\nmessage.closeAll = closeAll;\nmessage._context = null;\nexport { closeAll, message as default };","map":{"version":3,"mappings":"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","names":["seed","normalizeOptions","params","options","isString","isVNode","isFunction","message","normalized","messageDefaults","appendTo","document","body","querySelector","isElement","debugWarn","closeMessage","instance","idx","instances","indexOf","splice","handler","close","createMessage","context","nextZIndex","useZIndex","id","userOnClose","onClose","container","createElement","props","zIndex","onDestroy","render","vnode","createVNode","MessageConstructor","default","appContext","_context","appendChild","firstElementChild","vm","component","exposeProxy","visible","isClient","isNumber","messageConfig","max","length","grouping","instance2","find","_a","repeatNum","type","push","messageTypes","forEach","closeAll"],"sources":["../../../../../../packages/components/message/src/method.ts"],"sourcesContent":["import { createVNode, render } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport {\n  debugWarn,\n  isElement,\n  isFunction,\n  isNumber,\n  isString,\n  isVNode,\n} from '@element-plus/utils'\nimport { useZIndex } from '@element-plus/hooks'\nimport { messageConfig } from '@element-plus/components/config-provider/src/config-provider'\nimport MessageConstructor from './message.vue'\nimport { messageDefaults, messageTypes } from './message'\nimport { instances } from './instance'\n\nimport type { MessageContext } from './instance'\nimport type { AppContext } from 'vue'\nimport type {\n  Message,\n  MessageFn,\n  MessageHandler,\n  MessageOptions,\n  MessageParams,\n  MessageParamsNormalized,\n  messageType,\n} from './message'\n\nlet seed = 1\n\n// TODO: Since Notify.ts is basically the same like this file. So we could do some encapsulation against them to reduce code duplication.\n\nconst normalizeOptions = (params?: MessageParams) => {\n  const options: MessageOptions =\n    !params || isString(params) || isVNode(params) || isFunction(params)\n      ? { message: params }\n      : params\n\n  const normalized = {\n    ...messageDefaults,\n    ...options,\n  }\n\n  if (!normalized.appendTo) {\n    normalized.appendTo = document.body\n  } else if (isString(normalized.appendTo)) {\n    let appendTo = document.querySelector<HTMLElement>(normalized.appendTo)\n\n    // should fallback to default value with a warning\n    if (!isElement(appendTo)) {\n      debugWarn(\n        'ElMessage',\n        'the appendTo option is not an HTMLElement. Falling back to document.body.'\n      )\n      appendTo = document.body\n    }\n\n    normalized.appendTo = appendTo\n  }\n\n  return normalized as MessageParamsNormalized\n}\n\nconst closeMessage = (instance: MessageContext) => {\n  const idx = instances.indexOf(instance)\n  if (idx === -1) return\n\n  instances.splice(idx, 1)\n  const { handler } = instance\n  handler.close()\n}\n\nconst createMessage = (\n  { appendTo, ...options }: MessageParamsNormalized,\n  context?: AppContext | null\n): MessageContext => {\n  const { nextZIndex } = useZIndex()\n\n  const id = `message_${seed++}`\n  const userOnClose = options.onClose\n\n  const container = document.createElement('div')\n\n  const props = {\n    ...options,\n    zIndex: nextZIndex() + options.zIndex,\n    id,\n    onClose: () => {\n      userOnClose?.()\n      closeMessage(instance)\n    },\n\n    // clean message element preventing mem leak\n    onDestroy: () => {\n      // since the element is destroy, then the VNode should be collected by GC as well\n      // we do not want cause any mem leak because we have returned vm as a reference to users\n      // so that we manually set it to false.\n      render(null, container)\n    },\n  }\n  const vnode = createVNode(\n    MessageConstructor,\n    props,\n    isFunction(props.message) || isVNode(props.message)\n      ? { default: props.message }\n      : null\n  )\n  vnode.appContext = context || message._context\n\n  render(vnode, container)\n  // instances will remove this item when close function gets called. So we do not need to worry about it.\n  appendTo.appendChild(container.firstElementChild!)\n\n  const vm = vnode.component!\n\n  const handler: MessageHandler = {\n    // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n    // for out component, so that all closing steps will not be skipped.\n    close: () => {\n      vm.exposeProxy!.visible = false\n    },\n  }\n\n  const instance: MessageContext = {\n    id,\n    vnode,\n    vm,\n    handler,\n    props: (vnode.component as any).props,\n  }\n\n  return instance\n}\n\nconst message: MessageFn &\n  Partial<Message> & { _context: AppContext | null } = (\n  options = {},\n  context\n) => {\n  if (!isClient) return { close: () => undefined }\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return { close: () => undefined }\n  }\n\n  const normalized = normalizeOptions(options)\n\n  if (normalized.grouping && instances.length) {\n    const instance = instances.find(\n      ({ vnode: vm }) => vm.props?.message === normalized.message\n    )\n    if (instance) {\n      instance.props.repeatNum += 1\n      instance.props.type = normalized.type\n      return instance.handler\n    }\n  }\n\n  const instance = createMessage(normalized, context)\n\n  instances.push(instance)\n  return instance.handler\n}\n\nmessageTypes.forEach((type) => {\n  message[type] = (options = {}, appContext) => {\n    const normalized = normalizeOptions(options)\n    return message({ ...normalized, type }, appContext)\n  }\n})\n\nexport function closeAll(type?: messageType): void {\n  for (const instance of instances) {\n    if (!type || type === instance.props.type) {\n      instance.handler.close()\n    }\n  }\n}\n\nmessage.closeAll = closeAll\nmessage._context = null\n\nexport default message as Message\n"]},"metadata":{},"sourceType":"module"}