{"ast":null,"code":"import { ref, computed } from 'vue';\nimport { isFunction } from '@vue/shared';\n\nfunction useFilter(props, tree) {\n  const hiddenNodeKeySet = ref( /* @__PURE__ */new Set([]));\n  const hiddenExpandIconKeySet = ref( /* @__PURE__ */new Set([]));\n  const filterable = computed(() => {\n    return isFunction(props.filterMethod);\n  });\n\n  function doFilter(query) {\n    var _a;\n\n    if (!filterable.value) {\n      return;\n    }\n\n    const expandKeySet = /* @__PURE__ */new Set();\n    const hiddenExpandIconKeys = hiddenExpandIconKeySet.value;\n    const hiddenKeys = hiddenNodeKeySet.value;\n    const family = [];\n    const nodes = ((_a = tree.value) == null ? void 0 : _a.treeNodes) || [];\n    const filter = props.filterMethod;\n    hiddenKeys.clear();\n\n    function traverse(nodes2) {\n      nodes2.forEach(node => {\n        family.push(node);\n\n        if (filter == null ? void 0 : filter(query, node.data)) {\n          family.forEach(member => {\n            expandKeySet.add(member.key);\n          });\n        } else if (node.isLeaf) {\n          hiddenKeys.add(node.key);\n        }\n\n        const children = node.children;\n\n        if (children) {\n          traverse(children);\n        }\n\n        if (!node.isLeaf) {\n          if (!expandKeySet.has(node.key)) {\n            hiddenKeys.add(node.key);\n          } else if (children) {\n            let allHidden = true;\n\n            for (const childNode of children) {\n              if (!hiddenKeys.has(childNode.key)) {\n                allHidden = false;\n                break;\n              }\n            }\n\n            if (allHidden) {\n              hiddenExpandIconKeys.add(node.key);\n            } else {\n              hiddenExpandIconKeys.delete(node.key);\n            }\n          }\n        }\n\n        family.pop();\n      });\n    }\n\n    traverse(nodes);\n    return expandKeySet;\n  }\n\n  function isForceHiddenExpandIcon(node) {\n    return hiddenExpandIconKeySet.value.has(node.key);\n  }\n\n  return {\n    hiddenExpandIconKeySet,\n    hiddenNodeKeySet,\n    doFilter,\n    isForceHiddenExpandIcon\n  };\n}\n\nexport { useFilter };","map":{"version":3,"mappings":"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","names":["useFilter","props","tree","hiddenNodeKeySet","ref","Set","hiddenExpandIconKeySet","filterable","computed","isFunction","filterMethod","doFilter","query","_a","value","expandKeySet","hiddenExpandIconKeys","hiddenKeys","family","nodes","treeNodes","filter","clear","traverse","nodes2","forEach","node","push","data","member","add","key","isLeaf","children","has","allHidden","childNode","delete","pop","isForceHiddenExpandIcon"],"sources":["../../../../../../../packages/components/tree-v2/src/composables/useFilter.ts"],"sourcesContent":["import { computed, ref } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport type { Ref } from 'vue'\nimport type { Tree, TreeKey, TreeNode, TreeProps } from '../types'\n\n// When the data volume is very large using filter will cause lag\n// I haven't found a better way to optimize it for now\n// Maybe this problem should be left to the server side\nexport function useFilter(props: TreeProps, tree: Ref<Tree | undefined>) {\n  const hiddenNodeKeySet = ref<Set<TreeKey>>(new Set([]))\n  const hiddenExpandIconKeySet = ref<Set<TreeKey>>(new Set([]))\n\n  const filterable = computed(() => {\n    return isFunction(props.filterMethod)\n  })\n\n  function doFilter(query: string) {\n    if (!filterable.value) {\n      return\n    }\n    const expandKeySet = new Set<TreeKey>()\n    const hiddenExpandIconKeys = hiddenExpandIconKeySet.value\n    const hiddenKeys = hiddenNodeKeySet.value\n    const family: TreeNode[] = []\n    const nodes = tree.value?.treeNodes || []\n    const filter = props.filterMethod\n    hiddenKeys.clear()\n    function traverse(nodes: TreeNode[]) {\n      nodes.forEach((node) => {\n        family.push(node)\n        if (filter?.(query, node.data)) {\n          family.forEach((member) => {\n            expandKeySet.add(member.key)\n          })\n        } else if (node.isLeaf) {\n          hiddenKeys.add(node.key)\n        }\n        const children = node.children\n        if (children) {\n          traverse(children)\n        }\n        if (!node.isLeaf) {\n          if (!expandKeySet.has(node.key)) {\n            hiddenKeys.add(node.key)\n          } else if (children) {\n            // If all child nodes are hidden, then the expand icon will be hidden\n            let allHidden = true\n            for (const childNode of children) {\n              if (!hiddenKeys.has(childNode.key)) {\n                allHidden = false\n                break\n              }\n            }\n            if (allHidden) {\n              hiddenExpandIconKeys.add(node.key)\n            } else {\n              hiddenExpandIconKeys.delete(node.key)\n            }\n          }\n        }\n        family.pop()\n      })\n    }\n    traverse(nodes)\n    return expandKeySet\n  }\n\n  function isForceHiddenExpandIcon(node: TreeNode): boolean {\n    return hiddenExpandIconKeySet.value.has(node.key)\n  }\n\n  return {\n    hiddenExpandIconKeySet,\n    hiddenNodeKeySet,\n    doFilter,\n    isForceHiddenExpandIcon,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}