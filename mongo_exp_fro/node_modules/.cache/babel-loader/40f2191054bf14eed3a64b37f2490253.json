{"ast":null,"code":"import { getCurrentInstance, shallowRef, ref, computed, unref, watch } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../utils/index.mjs';\nimport { FixedDir } from '../constants.mjs';\nimport { isNumber } from '@vueuse/core';\n\nconst useRow = (props, {\n  mainTableRef,\n  leftTableRef,\n  rightTableRef,\n  onMaybeEndReached\n}) => {\n  const vm = getCurrentInstance();\n  const {\n    emit\n  } = vm;\n  const isResetting = shallowRef(false);\n  const hoveringRowKey = shallowRef(null);\n  const expandedRowKeys = ref(props.defaultExpandedRowKeys || []);\n  const lastRenderedRowIndex = ref(-1);\n  const resetIndex = shallowRef(null);\n  const rowHeights = ref({});\n  const pendingRowHeights = ref({});\n  const leftTableHeights = shallowRef({});\n  const mainTableHeights = shallowRef({});\n  const rightTableHeights = shallowRef({});\n  const isDynamic = computed(() => isNumber(props.estimatedRowHeight));\n\n  function onRowsRendered(params) {\n    var _a;\n\n    (_a = props.onRowsRendered) == null ? void 0 : _a.call(props, params);\n\n    if (params.rowCacheEnd > unref(lastRenderedRowIndex)) {\n      lastRenderedRowIndex.value = params.rowCacheEnd;\n    }\n  }\n\n  function onRowHovered({\n    hovered,\n    rowKey\n  }) {\n    hoveringRowKey.value = hovered ? rowKey : null;\n  }\n\n  function onRowExpanded({\n    expanded,\n    rowData,\n    rowIndex,\n    rowKey\n  }) {\n    var _a, _b;\n\n    const _expandedRowKeys = [...unref(expandedRowKeys)];\n\n    const currentKeyIndex = _expandedRowKeys.indexOf(rowKey);\n\n    if (expanded) {\n      if (currentKeyIndex === -1) _expandedRowKeys.push(rowKey);\n    } else {\n      if (currentKeyIndex > -1) _expandedRowKeys.splice(currentKeyIndex, 1);\n    }\n\n    expandedRowKeys.value = _expandedRowKeys;\n    emit(\"update:expandedRowKeys\", _expandedRowKeys);\n    (_a = props.onRowExpand) == null ? void 0 : _a.call(props, {\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey\n    });\n    (_b = props.onExpandedRowsChange) == null ? void 0 : _b.call(props, _expandedRowKeys);\n  }\n\n  const flushingRowHeights = debounce(() => {\n    var _a, _b, _c, _d;\n\n    isResetting.value = true;\n    rowHeights.value = { ...unref(rowHeights),\n      ...unref(pendingRowHeights)\n    };\n    resetAfterIndex(unref(resetIndex), false);\n    pendingRowHeights.value = {};\n    resetIndex.value = null;\n    (_a = mainTableRef.value) == null ? void 0 : _a.forceUpdate();\n    (_b = leftTableRef.value) == null ? void 0 : _b.forceUpdate();\n    (_c = rightTableRef.value) == null ? void 0 : _c.forceUpdate();\n    (_d = vm.proxy) == null ? void 0 : _d.$forceUpdate();\n    isResetting.value = false;\n  }, 0);\n\n  function resetAfterIndex(index, forceUpdate = false) {\n    if (!unref(isDynamic)) return;\n    [mainTableRef, leftTableRef, rightTableRef].forEach(tableRef => {\n      const table = unref(tableRef);\n      if (table) table.resetAfterRowIndex(index, forceUpdate);\n    });\n  }\n\n  function resetHeights(rowKey, height, rowIdx) {\n    const resetIdx = unref(resetIndex);\n\n    if (resetIdx === null) {\n      resetIndex.value = rowIdx;\n    } else {\n      if (resetIdx > rowIdx) {\n        resetIndex.value = rowIdx;\n      }\n    }\n\n    pendingRowHeights.value[rowKey] = height;\n  }\n\n  function onRowHeightChange({\n    rowKey,\n    height,\n    rowIndex\n  }, fixedDir) {\n    if (!fixedDir) {\n      mainTableHeights.value[rowKey] = height;\n    } else {\n      if (fixedDir === FixedDir.RIGHT) {\n        rightTableHeights.value[rowKey] = height;\n      } else {\n        leftTableHeights.value[rowKey] = height;\n      }\n    }\n\n    const maximumHeight = Math.max(...[leftTableHeights, rightTableHeights, mainTableHeights].map(records => records.value[rowKey] || 0));\n\n    if (unref(rowHeights)[rowKey] !== maximumHeight) {\n      resetHeights(rowKey, maximumHeight, rowIndex);\n      flushingRowHeights();\n    }\n  }\n\n  watch(lastRenderedRowIndex, () => onMaybeEndReached());\n  return {\n    hoveringRowKey,\n    expandedRowKeys,\n    lastRenderedRowIndex,\n    isDynamic,\n    isResetting,\n    rowHeights,\n    resetAfterIndex,\n    onRowExpanded,\n    onRowHovered,\n    onRowsRendered,\n    onRowHeightChange\n  };\n};\n\nexport { useRow };","map":{"version":3,"mappings":"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","names":["useRow","props","mainTableRef","leftTableRef","rightTableRef","onMaybeEndReached","vm","getCurrentInstance","emit","isResetting","shallowRef","hoveringRowKey","expandedRowKeys","ref","defaultExpandedRowKeys","lastRenderedRowIndex","resetIndex","rowHeights","pendingRowHeights","leftTableHeights","mainTableHeights","rightTableHeights","isDynamic","computed","isNumber","estimatedRowHeight","onRowsRendered","params","_a","call","rowCacheEnd","unref","value","onRowHovered","hovered","rowKey","onRowExpanded","expanded","rowData","rowIndex","_b","_expandedRowKeys","currentKeyIndex","indexOf","push","splice","onRowExpand","onExpandedRowsChange","flushingRowHeights","debounce","_c","_d","resetAfterIndex","forceUpdate","proxy","$forceUpdate","index","forEach","tableRef","table","resetAfterRowIndex","resetHeights","height","rowIdx","resetIdx","onRowHeightChange","fixedDir","FixedDir","RIGHT","maximumHeight","Math","max","map","records","watch"],"sources":["../../../../../../../packages/components/table-v2/src/composables/use-row.ts"],"sourcesContent":["import {\n  computed,\n  getCurrentInstance,\n  ref,\n  shallowRef,\n  unref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { isNumber } from '@element-plus/utils'\nimport { FixedDir } from '../constants'\n\nimport type { Ref } from 'vue'\nimport type { TableV2Props } from '../table'\nimport type {\n  RowExpandParams,\n  RowHeightChangedParams,\n  RowHoverParams,\n} from '../row'\nimport type { FixedDirection, KeyType } from '../types'\nimport type { onRowRenderedParams } from '../grid'\nimport type { TableGridInstance } from '../table-grid'\n\ntype Heights = Record<KeyType, number>\ntype GridInstanceRef = Ref<TableGridInstance | undefined>\n\ntype UseRowProps = {\n  mainTableRef: GridInstanceRef\n  leftTableRef: GridInstanceRef\n  rightTableRef: GridInstanceRef\n\n  onMaybeEndReached: () => void\n}\n\nexport const useRow = (\n  props: TableV2Props,\n  { mainTableRef, leftTableRef, rightTableRef, onMaybeEndReached }: UseRowProps\n) => {\n  const vm = getCurrentInstance()!\n  const { emit } = vm\n  const isResetting = shallowRef(false)\n  const hoveringRowKey = shallowRef<KeyType | null>(null)\n  const expandedRowKeys = ref<KeyType[]>(props.defaultExpandedRowKeys || [])\n  const lastRenderedRowIndex = ref(-1)\n  const resetIndex = shallowRef<number | null>(null)\n  const rowHeights = ref<Heights>({})\n  const pendingRowHeights = ref<Heights>({})\n  const leftTableHeights = shallowRef<Heights>({})\n  const mainTableHeights = shallowRef<Heights>({})\n  const rightTableHeights = shallowRef<Heights>({})\n  const isDynamic = computed(() => isNumber(props.estimatedRowHeight))\n\n  function onRowsRendered(params: onRowRenderedParams) {\n    props.onRowsRendered?.(params)\n\n    if (params.rowCacheEnd > unref(lastRenderedRowIndex)) {\n      lastRenderedRowIndex.value = params.rowCacheEnd\n    }\n  }\n\n  function onRowHovered({ hovered, rowKey }: RowHoverParams) {\n    hoveringRowKey.value = hovered ? rowKey : null\n  }\n\n  function onRowExpanded({\n    expanded,\n    rowData,\n    rowIndex,\n    rowKey,\n  }: RowExpandParams) {\n    const _expandedRowKeys = [...unref(expandedRowKeys)]\n    const currentKeyIndex = _expandedRowKeys.indexOf(rowKey)\n    if (expanded) {\n      if (currentKeyIndex === -1) _expandedRowKeys.push(rowKey)\n    } else {\n      if (currentKeyIndex > -1) _expandedRowKeys.splice(currentKeyIndex, 1)\n    }\n    expandedRowKeys.value = _expandedRowKeys\n\n    emit('update:expandedRowKeys', _expandedRowKeys)\n    props.onRowExpand?.({\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey,\n    })\n    // If this is not controlled, then use this to notify changes\n    props.onExpandedRowsChange?.(_expandedRowKeys)\n  }\n\n  const flushingRowHeights = debounce(() => {\n    isResetting.value = true\n    rowHeights.value = { ...unref(rowHeights), ...unref(pendingRowHeights) }\n    resetAfterIndex(unref(resetIndex)!, false)\n    pendingRowHeights.value = {}\n    // force update\n    resetIndex.value = null\n    mainTableRef.value?.forceUpdate()\n    leftTableRef.value?.forceUpdate()\n    rightTableRef.value?.forceUpdate()\n    vm.proxy?.$forceUpdate()\n    isResetting.value = false\n  }, 0)\n\n  function resetAfterIndex(index: number, forceUpdate = false) {\n    if (!unref(isDynamic)) return\n    ;[mainTableRef, leftTableRef, rightTableRef].forEach((tableRef) => {\n      const table = unref(tableRef)\n      if (table) table.resetAfterRowIndex(index, forceUpdate)\n    })\n  }\n\n  function resetHeights(rowKey: KeyType, height: number, rowIdx: number) {\n    const resetIdx = unref(resetIndex)\n    if (resetIdx === null) {\n      resetIndex.value = rowIdx\n    } else {\n      if (resetIdx > rowIdx) {\n        resetIndex.value = rowIdx\n      }\n    }\n\n    pendingRowHeights.value[rowKey] = height\n  }\n\n  function onRowHeightChange(\n    { rowKey, height, rowIndex }: RowHeightChangedParams,\n    fixedDir: FixedDirection\n  ) {\n    if (!fixedDir) {\n      mainTableHeights.value[rowKey] = height\n    } else {\n      if (fixedDir === FixedDir.RIGHT) {\n        rightTableHeights.value[rowKey] = height\n      } else {\n        leftTableHeights.value[rowKey] = height\n      }\n    }\n\n    const maximumHeight = Math.max(\n      ...[leftTableHeights, rightTableHeights, mainTableHeights].map(\n        (records) => records.value[rowKey] || 0\n      )\n    )\n\n    if (unref(rowHeights)[rowKey] !== maximumHeight) {\n      resetHeights(rowKey, maximumHeight, rowIndex)\n      flushingRowHeights()\n    }\n  }\n  // when rendered row changes, maybe reaching the bottom\n  watch(lastRenderedRowIndex, () => onMaybeEndReached())\n\n  return {\n    hoveringRowKey,\n    expandedRowKeys,\n    lastRenderedRowIndex,\n    isDynamic,\n    isResetting,\n    rowHeights,\n\n    resetAfterIndex,\n    onRowExpanded,\n    onRowHovered,\n    onRowsRendered,\n    onRowHeightChange,\n  }\n}\n\nexport type UseRowReturn = ReturnType<typeof useRow>\n"]},"metadata":{},"sourceType":"module"}